
Qr-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000529c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800543c  0800543c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005444  08005444  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800544c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000334  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f461  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002236  00000000  00000000  0002f49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000316d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c88  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ab9  00000000  00000000  000330e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010337  00000000  00000000  00054b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb28f  00000000  00000000  00064ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013015f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037f4  00000000  00000000  001301b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800540c 	.word	0x0800540c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800540c 	.word	0x0800540c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005f4:	f000 b974 	b.w	80008e0 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468e      	mov	lr, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14d      	bne.n	80006ba <__udivmoddi4+0xaa>
 800061e:	428a      	cmp	r2, r1
 8000620:	4694      	mov	ip, r2
 8000622:	d969      	bls.n	80006f8 <__udivmoddi4+0xe8>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b152      	cbz	r2, 8000640 <__udivmoddi4+0x30>
 800062a:	fa01 f302 	lsl.w	r3, r1, r2
 800062e:	f1c2 0120 	rsb	r1, r2, #32
 8000632:	fa20 f101 	lsr.w	r1, r0, r1
 8000636:	fa0c fc02 	lsl.w	ip, ip, r2
 800063a:	ea41 0e03 	orr.w	lr, r1, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	0c21      	lsrs	r1, r4, #16
 8000646:	fbbe f6f8 	udiv	r6, lr, r8
 800064a:	fa1f f78c 	uxth.w	r7, ip
 800064e:	fb08 e316 	mls	r3, r8, r6, lr
 8000652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000656:	fb06 f107 	mul.w	r1, r6, r7
 800065a:	4299      	cmp	r1, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x64>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000666:	f080 811f 	bcs.w	80008a8 <__udivmoddi4+0x298>
 800066a:	4299      	cmp	r1, r3
 800066c:	f240 811c 	bls.w	80008a8 <__udivmoddi4+0x298>
 8000670:	3e02      	subs	r6, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f0f8 	udiv	r0, r3, r8
 800067c:	fb08 3310 	mls	r3, r8, r0, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb00 f707 	mul.w	r7, r0, r7
 8000688:	42a7      	cmp	r7, r4
 800068a:	d90a      	bls.n	80006a2 <__udivmoddi4+0x92>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000694:	f080 810a 	bcs.w	80008ac <__udivmoddi4+0x29c>
 8000698:	42a7      	cmp	r7, r4
 800069a:	f240 8107 	bls.w	80008ac <__udivmoddi4+0x29c>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a6:	1be4      	subs	r4, r4, r7
 80006a8:	2600      	movs	r6, #0
 80006aa:	b11d      	cbz	r5, 80006b4 <__udivmoddi4+0xa4>
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	2300      	movs	r3, #0
 80006b0:	e9c5 4300 	strd	r4, r3, [r5]
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0xc2>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80ef 	beq.w	80008a2 <__udivmoddi4+0x292>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x160>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xd4>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80f9 	bhi.w	80008d6 <__udivmoddi4+0x2c6>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	469e      	mov	lr, r3
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e0      	beq.n	80006b4 <__udivmoddi4+0xa4>
 80006f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f6:	e7dd      	b.n	80006b4 <__udivmoddi4+0xa4>
 80006f8:	b902      	cbnz	r2, 80006fc <__udivmoddi4+0xec>
 80006fa:	deff      	udf	#255	; 0xff
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	f040 8092 	bne.w	800082a <__udivmoddi4+0x21a>
 8000706:	eba1 010c 	sub.w	r1, r1, ip
 800070a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	2601      	movs	r6, #1
 8000714:	0c20      	lsrs	r0, r4, #16
 8000716:	fbb1 f3f7 	udiv	r3, r1, r7
 800071a:	fb07 1113 	mls	r1, r7, r3, r1
 800071e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000722:	fb0e f003 	mul.w	r0, lr, r3
 8000726:	4288      	cmp	r0, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0x12c>
 800072a:	eb1c 0101 	adds.w	r1, ip, r1
 800072e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x12a>
 8000734:	4288      	cmp	r0, r1
 8000736:	f200 80cb 	bhi.w	80008d0 <__udivmoddi4+0x2c0>
 800073a:	4643      	mov	r3, r8
 800073c:	1a09      	subs	r1, r1, r0
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb1 f0f7 	udiv	r0, r1, r7
 8000744:	fb07 1110 	mls	r1, r7, r0, r1
 8000748:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800074c:	fb0e fe00 	mul.w	lr, lr, r0
 8000750:	45a6      	cmp	lr, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x156>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x154>
 800075e:	45a6      	cmp	lr, r4
 8000760:	f200 80bb 	bhi.w	80008da <__udivmoddi4+0x2ca>
 8000764:	4608      	mov	r0, r1
 8000766:	eba4 040e 	sub.w	r4, r4, lr
 800076a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076e:	e79c      	b.n	80006aa <__udivmoddi4+0x9a>
 8000770:	f1c6 0720 	rsb	r7, r6, #32
 8000774:	40b3      	lsls	r3, r6
 8000776:	fa22 fc07 	lsr.w	ip, r2, r7
 800077a:	ea4c 0c03 	orr.w	ip, ip, r3
 800077e:	fa20 f407 	lsr.w	r4, r0, r7
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	40f9      	lsrs	r1, r7
 800078a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078e:	fa00 f306 	lsl.w	r3, r0, r6
 8000792:	fbb1 f8f9 	udiv	r8, r1, r9
 8000796:	0c20      	lsrs	r0, r4, #16
 8000798:	fa1f fe8c 	uxth.w	lr, ip
 800079c:	fb09 1118 	mls	r1, r9, r8, r1
 80007a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a4:	fb08 f00e 	mul.w	r0, r8, lr
 80007a8:	4288      	cmp	r0, r1
 80007aa:	fa02 f206 	lsl.w	r2, r2, r6
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b8>
 80007b0:	eb1c 0101 	adds.w	r1, ip, r1
 80007b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007b8:	f080 8088 	bcs.w	80008cc <__udivmoddi4+0x2bc>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f240 8085 	bls.w	80008cc <__udivmoddi4+0x2bc>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d0:	fb09 1110 	mls	r1, r9, r0, r1
 80007d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007dc:	458e      	cmp	lr, r1
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1e2>
 80007e0:	eb1c 0101 	adds.w	r1, ip, r1
 80007e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007e8:	d26c      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 80007ea:	458e      	cmp	lr, r1
 80007ec:	d96a      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4461      	add	r1, ip
 80007f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f6:	fba0 9402 	umull	r9, r4, r0, r2
 80007fa:	eba1 010e 	sub.w	r1, r1, lr
 80007fe:	42a1      	cmp	r1, r4
 8000800:	46c8      	mov	r8, r9
 8000802:	46a6      	mov	lr, r4
 8000804:	d356      	bcc.n	80008b4 <__udivmoddi4+0x2a4>
 8000806:	d053      	beq.n	80008b0 <__udivmoddi4+0x2a0>
 8000808:	b15d      	cbz	r5, 8000822 <__udivmoddi4+0x212>
 800080a:	ebb3 0208 	subs.w	r2, r3, r8
 800080e:	eb61 010e 	sbc.w	r1, r1, lr
 8000812:	fa01 f707 	lsl.w	r7, r1, r7
 8000816:	fa22 f306 	lsr.w	r3, r2, r6
 800081a:	40f1      	lsrs	r1, r6
 800081c:	431f      	orrs	r7, r3
 800081e:	e9c5 7100 	strd	r7, r1, [r5]
 8000822:	2600      	movs	r6, #0
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	40d8      	lsrs	r0, r3
 8000830:	fa0c fc02 	lsl.w	ip, ip, r2
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	4091      	lsls	r1, r2
 800083a:	4301      	orrs	r1, r0
 800083c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	fbb3 f0f7 	udiv	r0, r3, r7
 8000848:	fb07 3610 	mls	r6, r7, r0, r3
 800084c:	0c0b      	lsrs	r3, r1, #16
 800084e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000852:	fb00 f60e 	mul.w	r6, r0, lr
 8000856:	429e      	cmp	r6, r3
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x260>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000866:	d22f      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 8000868:	429e      	cmp	r6, r3
 800086a:	d92d      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 800086c:	3802      	subs	r0, #2
 800086e:	4463      	add	r3, ip
 8000870:	1b9b      	subs	r3, r3, r6
 8000872:	b289      	uxth	r1, r1
 8000874:	fbb3 f6f7 	udiv	r6, r3, r7
 8000878:	fb07 3316 	mls	r3, r7, r6, r3
 800087c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000880:	fb06 f30e 	mul.w	r3, r6, lr
 8000884:	428b      	cmp	r3, r1
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x28a>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000890:	d216      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000892:	428b      	cmp	r3, r1
 8000894:	d914      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000896:	3e02      	subs	r6, #2
 8000898:	4461      	add	r1, ip
 800089a:	1ac9      	subs	r1, r1, r3
 800089c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a0:	e738      	b.n	8000714 <__udivmoddi4+0x104>
 80008a2:	462e      	mov	r6, r5
 80008a4:	4628      	mov	r0, r5
 80008a6:	e705      	b.n	80006b4 <__udivmoddi4+0xa4>
 80008a8:	4606      	mov	r6, r0
 80008aa:	e6e3      	b.n	8000674 <__udivmoddi4+0x64>
 80008ac:	4618      	mov	r0, r3
 80008ae:	e6f8      	b.n	80006a2 <__udivmoddi4+0x92>
 80008b0:	454b      	cmp	r3, r9
 80008b2:	d2a9      	bcs.n	8000808 <__udivmoddi4+0x1f8>
 80008b4:	ebb9 0802 	subs.w	r8, r9, r2
 80008b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008bc:	3801      	subs	r0, #1
 80008be:	e7a3      	b.n	8000808 <__udivmoddi4+0x1f8>
 80008c0:	4646      	mov	r6, r8
 80008c2:	e7ea      	b.n	800089a <__udivmoddi4+0x28a>
 80008c4:	4620      	mov	r0, r4
 80008c6:	e794      	b.n	80007f2 <__udivmoddi4+0x1e2>
 80008c8:	4640      	mov	r0, r8
 80008ca:	e7d1      	b.n	8000870 <__udivmoddi4+0x260>
 80008cc:	46d0      	mov	r8, sl
 80008ce:	e77b      	b.n	80007c8 <__udivmoddi4+0x1b8>
 80008d0:	3b02      	subs	r3, #2
 80008d2:	4461      	add	r1, ip
 80008d4:	e732      	b.n	800073c <__udivmoddi4+0x12c>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e709      	b.n	80006ee <__udivmoddi4+0xde>
 80008da:	4464      	add	r4, ip
 80008dc:	3802      	subs	r0, #2
 80008de:	e742      	b.n	8000766 <__udivmoddi4+0x156>

080008e0 <__aeabi_idiv0>:
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b4c      	ldr	r3, [pc, #304]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4b      	ldr	r2, [pc, #300]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b49      	ldr	r3, [pc, #292]	; (8000a30 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b45      	ldr	r3, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a44      	ldr	r2, [pc, #272]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a36      	ldr	r2, [pc, #216]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	210a      	movs	r1, #10
 800098a:	482a      	ldr	r0, [pc, #168]	; (8000a34 <MX_GPIO_Init+0x150>)
 800098c:	f001 fe78 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2118      	movs	r1, #24
 8000994:	4828      	ldr	r0, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x154>)
 8000996:	f001 fe73 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80009a0:	4826      	ldr	r0, [pc, #152]	; (8000a3c <MX_GPIO_Init+0x158>)
 80009a2:	f001 fe6d 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80009ac:	4824      	ldr	r0, [pc, #144]	; (8000a40 <MX_GPIO_Init+0x15c>)
 80009ae:	f001 fe67 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80009b2:	230a      	movs	r3, #10
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MX_GPIO_Init+0x150>)
 80009ca:	f001 fcbd 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009ce:	2318      	movs	r3, #24
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4814      	ldr	r0, [pc, #80]	; (8000a38 <MX_GPIO_Init+0x154>)
 80009e6:	f001 fcaf 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80009ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000a04:	f001 fca0 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a08:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_GPIO_Init+0x15c>)
 8000a22:	f001 fc91 	bl	8002348 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  // Go ahead
  //  MotorTrapzoidalInit(&tProfile_1, 1000, 90, 45);
  //  MotorTrapzoidalInit(&tProfile_2, 1000, 90, 45);

  // Rotate left
  MotorTrapzoidalInit(&tProfile_1, 360, 60, 10, BACK);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000a4e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8000ac0 <main+0x7c>
 8000a52:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8000ac4 <main+0x80>
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <main+0x84>)
 8000a58:	f000 fb93 	bl	8001182 <MotorTrapzoidalInit>
  MotorTrapzoidalInit(&tProfile_2, 360, 60, 10, BACK);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000a62:	eddf 0a17 	vldr	s1, [pc, #92]	; 8000ac0 <main+0x7c>
 8000a66:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000ac4 <main+0x80>
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <main+0x88>)
 8000a6c:	f000 fb89 	bl	8001182 <MotorTrapzoidalInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a70:	f001 fa54 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f832 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f7ff ff34 	bl	80008e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a7c:	f000 fdb2 	bl	80015e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a80:	f000 fdfc 	bl	800167c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a84:	f000 fe70 	bl	8001768 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a88:	f000 fec2 	bl	8001810 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a8c:	f000 ff36 	bl	80018fc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a90:	f001 f8f4 	bl	8001c7c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a94:	f000 fd4e 	bl	8001534 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a98:	f001 f91a 	bl	8001cd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000a9c:	f000 f886 	bl	8000bac <SerialInit>
  MotorInit();
 8000aa0:	f000 f922 	bl	8000ce8 <MotorInit>

  __HAL_TIM_SetCounter(&htim8, 32768);
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <main+0x8c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SetCounter(&htim1, 32768);
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <main+0x90>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  tProcess = RUN_TEST;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <main+0x94>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
  //      MotorSetDuty(500, MOTOR_1);
  //      MotorSetDuty(500, MOTOR_2);
  //
  //  MotorSetRun();
  // HAL_UART_Transmit_IT(&huart2, (uint8_t*)data, sizeof(data));
  while (1)
 8000abe:	e7fe      	b.n	8000abe <main+0x7a>
 8000ac0:	42700000 	.word	0x42700000
 8000ac4:	43b40000 	.word	0x43b40000
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	200000c4 	.word	0x200000c4
 8000ad0:	2000026c 	.word	0x2000026c
 8000ad4:	20000104 	.word	0x20000104
 8000ad8:	200000fc 	.word	0x200000fc

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	2230      	movs	r2, #48	; 0x30
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fc86 	bl	80053fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <SystemClock_Config+0xc8>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <SystemClock_Config+0xc8>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <SystemClock_Config+0xc8>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <SystemClock_Config+0xcc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <SystemClock_Config+0xcc>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <SystemClock_Config+0xcc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b50:	2348      	movs	r3, #72	; 0x48
 8000b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fda7 	bl	80026b4 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b6c:	f000 fb04 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b70:	230f      	movs	r3, #15
 8000b72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2302      	movs	r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 f809 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b98:	f000 faee 	bl	8001178 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3750      	adds	r7, #80	; 0x50
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40007000 	.word	0x40007000

08000bac <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8000bb0:	2221      	movs	r2, #33	; 0x21
 8000bb2:	4903      	ldr	r1, [pc, #12]	; (8000bc0 <SerialInit+0x14>)
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <SerialInit+0x18>)
 8000bb6:	f003 fc64 	bl	8004482 <HAL_UART_Receive_IT>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	200002f8 	.word	0x200002f8

08000bc8 <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8000bcc:	2221      	movs	r2, #33	; 0x21
 8000bce:	4903      	ldr	r1, [pc, #12]	; (8000bdc <SerialAcceptReceive+0x14>)
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <SerialAcceptReceive+0x18>)
 8000bd2:	f003 fc56 	bl	8004482 <HAL_UART_Receive_IT>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000028 	.word	0x20000028
 8000be0:	200002f8 	.word	0x200002f8

08000be4 <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == huart2.Instance)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_UART_RxCpltCallback+0x30>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d108      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x26>
  {
    	 HAL_UART_Transmit(&huart2, (uint8_t*)dataBuffer, MAX_LEN_DATA, 1000);
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2221      	movs	r2, #33	; 0x21
 8000bfe:	4906      	ldr	r1, [pc, #24]	; (8000c18 <HAL_UART_RxCpltCallback+0x34>)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <HAL_UART_RxCpltCallback+0x30>)
 8000c02:	f003 fbac 	bl	800435e <HAL_UART_Transmit>
    //	SerialWriteComm();
    	  SerialAcceptReceive();
 8000c06:	f7ff ffdf 	bl	8000bc8 <SerialAcceptReceive>
    //    SerialWriteComm();
    //
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200002f8 	.word	0x200002f8
 8000c18:	20000028 	.word	0x20000028

08000c1c <Motor1Forward>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}

void Motor1Forward()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <Motor1Forward+0x20>)
 8000c28:	f001 fd2a 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	4802      	ldr	r0, [pc, #8]	; (8000c3c <Motor1Forward+0x20>)
 8000c34:	f001 fd24 	bl	8002680 <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000

08000c40 <Motor1Backward>:

void Motor1Backward()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <Motor1Backward+0x20>)
 8000c4c:	f001 fd18 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c56:	4802      	ldr	r0, [pc, #8]	; (8000c60 <Motor1Backward+0x20>)
 8000c58:	f001 fd12 	bl	8002680 <HAL_GPIO_WritePin>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000

08000c64 <Motor2Forward>:

void Motor2Forward()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <Motor2Forward+0x1c>)
 8000c6e:	f001 fd07 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4802      	ldr	r0, [pc, #8]	; (8000c80 <Motor2Forward+0x1c>)
 8000c78:	f001 fd02 	bl	8002680 <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40020800 	.word	0x40020800

08000c84 <Motor2Backward>:

void Motor2Backward()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <Motor2Backward+0x1c>)
 8000c8e:	f001 fcf7 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <Motor2Backward+0x1c>)
 8000c98:	f001 fcf2 	bl	8002680 <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <MotorSetDuty>:

void MotorSetDuty(uint16_t nDuty, uint8_t channel)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	80fb      	strh	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	717b      	strb	r3, [r7, #5]
  if (channel == MOTOR_1)
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d104      	bne.n	8000cc4 <MotorSetDuty+0x20>
  {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MotorSetDuty+0x3c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	88fa      	ldrh	r2, [r7, #6]
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else if (channel == MOTOR_2)
  {
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, nDuty);
  }
}
 8000cc2:	e006      	b.n	8000cd2 <MotorSetDuty+0x2e>
  else if (channel == MOTOR_2)
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d103      	bne.n	8000cd2 <MotorSetDuty+0x2e>
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, nDuty);
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MotorSetDuty+0x40>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	88fa      	ldrh	r2, [r7, #6]
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000194 	.word	0x20000194
 8000ce4:	20000224 	.word	0x20000224

08000ce8 <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8000cec:	481b      	ldr	r0, [pc, #108]	; (8000d5c <MotorInit+0x74>)
 8000cee:	f002 f9c9 	bl	8003084 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	481a      	ldr	r0, [pc, #104]	; (8000d60 <MotorInit+0x78>)
 8000cf6:	f002 fa8f 	bl	8003218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4819      	ldr	r0, [pc, #100]	; (8000d64 <MotorInit+0x7c>)
 8000cfe:	f002 fa8b 	bl	8003218 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MotorInit+0x80>)
 8000d06:	f002 fbf5 	bl	80034f4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <MotorInit+0x80>)
 8000d0e:	f002 fbf1 	bl	80034f4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000d12:	2100      	movs	r1, #0
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <MotorInit+0x84>)
 8000d16:	f002 fbed 	bl	80034f4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MotorInit+0x84>)
 8000d1e:	f002 fbe9 	bl	80034f4 <HAL_TIM_Encoder_Start>
  PIDInit(&tPID_1, 3.5, 1.5, 0.2);
 8000d22:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8000d70 <MotorInit+0x88>
 8000d26:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000d2a:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MotorInit+0x8c>)
 8000d30:	f000 faf2 	bl	8001318 <PIDInit>
  PIDInit(&tPID_2, 3.5, 1.5, 0.2);
 8000d34:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8000d70 <MotorInit+0x88>
 8000d38:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000d3c:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MotorInit+0x90>)
 8000d42:	f000 fae9 	bl	8001318 <PIDInit>

  MotorSetDuty(0, MOTOR_1);
 8000d46:	2101      	movs	r1, #1
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ffab 	bl	8000ca4 <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2);
 8000d4e:	2102      	movs	r1, #2
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ffa7 	bl	8000ca4 <MotorSetDuty>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000014c 	.word	0x2000014c
 8000d60:	20000194 	.word	0x20000194
 8000d64:	20000224 	.word	0x20000224
 8000d68:	20000104 	.word	0x20000104
 8000d6c:	2000026c 	.word	0x2000026c
 8000d70:	3e4ccccd 	.word	0x3e4ccccd
 8000d74:	20000064 	.word	0x20000064
 8000d78:	20000078 	.word	0x20000078

08000d7c <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse, uint8_t motor)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
  if (motor == MOTOR_1)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d105      	bne.n	8000d9a <MotorGetPulse+0x1e>
  {
    *nPulse = __HAL_TIM_GetCounter(&htim8);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MotorGetPulse+0x3c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	601a      	str	r2, [r3, #0]
  }
  else if (motor == MOTOR_2)
  {
    *nPulse = __HAL_TIM_GetCounter(&htim1);
  }
}
 8000d98:	e007      	b.n	8000daa <MotorGetPulse+0x2e>
  else if (motor == MOTOR_2)
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d104      	bne.n	8000daa <MotorGetPulse+0x2e>
    *nPulse = __HAL_TIM_GetCounter(&htim1);
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MotorGetPulse+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000026c 	.word	0x2000026c
 8000dbc:	20000104 	.word	0x20000104

08000dc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim2.Instance)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d111      	bne.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x38>
  {
    switch (tProcess)
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00f      	beq.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x22>
    case RUN_TEST:
      MotorMovePos(&tProfile_1, &tPID_1, MOTOR_1);
      MotorMovePos(&tProfile_2, &tPID_2, MOTOR_2);
    }
  }
}
 8000de0:	e00d      	b.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x3e>
      MotorMovePos(&tProfile_1, &tPID_1, MOTOR_1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	490a      	ldr	r1, [pc, #40]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000de8:	f000 f81a 	bl	8000e20 <MotorMovePos>
      MotorMovePos(&tProfile_2, &tPID_2, MOTOR_2);
 8000dec:	2202      	movs	r2, #2
 8000dee:	490a      	ldr	r1, [pc, #40]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000df2:	f000 f815 	bl	8000e20 <MotorMovePos>
}
 8000df6:	e002      	b.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x3e>
  }
 8000df8:	bf00      	nop
 8000dfa:	e000      	b.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x3e>
      break;
 8000dfc:	bf00      	nop
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000014c 	.word	0x2000014c
 8000e0c:	200000fc 	.word	0x200000fc
 8000e10:	20000064 	.word	0x20000064
 8000e14:	2000008c 	.word	0x2000008c
 8000e18:	20000078 	.word	0x20000078
 8000e1c:	200000c4 	.word	0x200000c4

08000e20 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl, uint8_t motor)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]
  int32_t g_nDutyCycle;
  uint32_t g_nActPulse;
  if (motor == MOTOR_1)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d11a      	bne.n	8000e6a <MotorMovePos+0x4a>
  {
    MotorGetPulse(&nPulse1, motor); // get encoder counter
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4898      	ldr	r0, [pc, #608]	; (800109c <MotorMovePos+0x27c>)
 8000e3a:	f7ff ff9f 	bl	8000d7c <MotorGetPulse>
    if (tProfile->Direct == HEAD)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d106      	bne.n	8000e56 <MotorMovePos+0x36>
    {
      g_nActPulse_1 = nPulse1 - 32768;
 8000e48:	4b94      	ldr	r3, [pc, #592]	; (800109c <MotorMovePos+0x27c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000e50:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <MotorMovePos+0x280>)
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e005      	b.n	8000e62 <MotorMovePos+0x42>
    }
    else
    {
      g_nActPulse_1 = 32768 - nPulse1;
 8000e56:	4b91      	ldr	r3, [pc, #580]	; (800109c <MotorMovePos+0x27c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000e5e:	4a90      	ldr	r2, [pc, #576]	; (80010a0 <MotorMovePos+0x280>)
 8000e60:	6013      	str	r3, [r2, #0]
    }
    g_nActPulse = g_nActPulse_1;
 8000e62:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <MotorMovePos+0x280>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	e019      	b.n	8000e9e <MotorMovePos+0x7e>
  }
  else
  {
    MotorGetPulse(&nPulse2, motor); // get encoder counter
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	488d      	ldr	r0, [pc, #564]	; (80010a4 <MotorMovePos+0x284>)
 8000e70:	f7ff ff84 	bl	8000d7c <MotorGetPulse>
    if (tProfile->Direct == HEAD)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <MotorMovePos+0x6c>
    {
      g_nActPulse_2 = nPulse2 - 32768;
 8000e7e:	4b89      	ldr	r3, [pc, #548]	; (80010a4 <MotorMovePos+0x284>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000e86:	4a88      	ldr	r2, [pc, #544]	; (80010a8 <MotorMovePos+0x288>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e005      	b.n	8000e98 <MotorMovePos+0x78>
    }
    else
    {
      g_nActPulse_2 = 32768 - nPulse2;
 8000e8c:	4b85      	ldr	r3, [pc, #532]	; (80010a4 <MotorMovePos+0x284>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000e94:	4a84      	ldr	r2, [pc, #528]	; (80010a8 <MotorMovePos+0x288>)
 8000e96:	6013      	str	r3, [r2, #0]
    }
    g_nActPulse = g_nActPulse_2;
 8000e98:	4b83      	ldr	r3, [pc, #524]	; (80010a8 <MotorMovePos+0x288>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61fb      	str	r3, [r7, #28]
  }

  float dPosTemp = 0;
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	d820      	bhi.n	8000efc <MotorMovePos+0xdc>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000edc:	edc7 7a06 	vstr	s15, [r7, #24]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ee6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef4:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <MotorMovePos+0x28c>)
 8000ef6:	edc3 7a00 	vstr	s15, [r3]
 8000efa:	e065      	b.n	8000fc8 <MotorMovePos+0x1a8>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	d817      	bhi.n	8000f42 <MotorMovePos+0x122>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	edc7 7a06 	vstr	s15, [r7, #24]
    g_dCmdVel = tProfile->dA2;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	4a5b      	ldr	r2, [pc, #364]	; (80010ac <MotorMovePos+0x28c>)
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e042      	b.n	8000fc8 <MotorMovePos+0x1a8>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	d834      	bhi.n	8000fc2 <MotorMovePos+0x1a2>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	edd3 6a07 	vldr	s13, [r3, #28]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	edc7 7a06 	vstr	s15, [r7, #24]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fa2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MotorMovePos+0x28c>)
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
 8000fc0:	e002      	b.n	8000fc8 <MotorMovePos+0x1a8>
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
  }

  // Control PID
  g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8000fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd0:	ee17 3a90 	vmov	r3, s15
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 ff50 	bl	8001e7c <ConvertDegToPulse>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <MotorMovePos+0x290>)
 8000fe2:	601a      	str	r2, [r3, #0]
  g_nDutyCycle = (int16_t)PIDCompute(tPIDControl, g_nCmdPulse, g_nActPulse, SAMPLING_TIME);
 8000fe4:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <MotorMovePos+0x290>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	ee07 3a10 	vmov	s14, r3
 8000ff6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000ffa:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80010b4 <MotorMovePos+0x294>
 8000ffe:	eef0 0a47 	vmov.f32	s1, s14
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	68b8      	ldr	r0, [r7, #8]
 8001008:	f000 f9a0 	bl	800134c <PIDCompute>
 800100c:	eef0 7a40 	vmov.f32	s15, s0
 8001010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001014:	ee17 3a90 	vmov	r3, s15
 8001018:	b21b      	sxth	r3, r3
 800101a:	617b      	str	r3, [r7, #20]
  if (g_nDutyCycle >= 0)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db22      	blt.n	8001068 <MotorMovePos+0x248>
  {
    if (motor == MOTOR_1)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d10a      	bne.n	800103e <MotorMovePos+0x21e>
    {
      if (tProfile->Direct == HEAD)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <MotorMovePos+0x218>
      {
        Motor1Forward();
 8001032:	f7ff fdf3 	bl	8000c1c <Motor1Forward>
 8001036:	e00c      	b.n	8001052 <MotorMovePos+0x232>
      }
      else
      {
        Motor1Backward();
 8001038:	f7ff fe02 	bl	8000c40 <Motor1Backward>
 800103c:	e009      	b.n	8001052 <MotorMovePos+0x232>
      }
    }
    else
    {
      if (tProfile->Direct == HEAD)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001044:	2b01      	cmp	r3, #1
 8001046:	d102      	bne.n	800104e <MotorMovePos+0x22e>
      {
        Motor2Forward();
 8001048:	f7ff fe0c 	bl	8000c64 <Motor2Forward>
 800104c:	e001      	b.n	8001052 <MotorMovePos+0x232>
      }
      else
      {
        Motor2Backward();
 800104e:	f7ff fe19 	bl	8000c84 <Motor2Backward>
      }
    }

    MotorSetDuty(abs(g_nDutyCycle), motor);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	bfb8      	it	lt
 8001058:	425b      	neglt	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe1f 	bl	8000ca4 <MotorSetDuty>
 8001066:	e033      	b.n	80010d0 <MotorMovePos+0x2b0>
  }
  else if (g_nDutyCycle < 0)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	da30      	bge.n	80010d0 <MotorMovePos+0x2b0>
  {
    if (motor == MOTOR_1)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10a      	bne.n	800108a <MotorMovePos+0x26a>
    {
      if (tProfile->Direct == HEAD)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800107a:	2b01      	cmp	r3, #1
 800107c:	d102      	bne.n	8001084 <MotorMovePos+0x264>
      {
        Motor1Backward();
 800107e:	f7ff fddf 	bl	8000c40 <Motor1Backward>
 8001082:	e01b      	b.n	80010bc <MotorMovePos+0x29c>
      }
      else
      {
        Motor1Forward();
 8001084:	f7ff fdca 	bl	8000c1c <Motor1Forward>
 8001088:	e018      	b.n	80010bc <MotorMovePos+0x29c>
      }
    }
    else
    {
      if (tProfile->Direct == HEAD)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001090:	2b01      	cmp	r3, #1
 8001092:	d111      	bne.n	80010b8 <MotorMovePos+0x298>
      {
        Motor2Backward();
 8001094:	f7ff fdf6 	bl	8000c84 <Motor2Backward>
 8001098:	e010      	b.n	80010bc <MotorMovePos+0x29c>
 800109a:	bf00      	nop
 800109c:	2000005c 	.word	0x2000005c
 80010a0:	2000004c 	.word	0x2000004c
 80010a4:	20000060 	.word	0x20000060
 80010a8:	20000050 	.word	0x20000050
 80010ac:	20000058 	.word	0x20000058
 80010b0:	20000054 	.word	0x20000054
 80010b4:	3ba3d70a 	.word	0x3ba3d70a
      }
      else
      {
        Motor2Forward();
 80010b8:	f7ff fdd4 	bl	8000c64 <Motor2Forward>
      }
    }

    MotorSetDuty(abs(g_nDutyCycle), motor);
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfb8      	it	lt
 80010c2:	425b      	neglt	r3, r3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fdea 	bl	8000ca4 <MotorSetDuty>
  }

  if (tProfile->nTime > tProfile->dMidStep3)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	dd23      	ble.n	800112e <MotorMovePos+0x30e>
  {
    __HAL_TIM_SetCounter(&htim1, 32768);
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MotorMovePos+0x348>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim8, 32768);
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MotorMovePos+0x34c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    g_nDutyCycle = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
    g_dCmdVel = 0;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MotorMovePos+0x350>)
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MotorMovePos+0x354>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(abs(g_nDutyCycle), motor);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	bfb8      	it	lt
 8001120:	425b      	neglt	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fdbb 	bl	8000ca4 <MotorSetDuty>
  }
  tProfile->nTime += SAMPLING_TIME;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9ac 	bl	8000490 <__aeabi_f2d>
 8001138:	a309      	add	r3, pc, #36	; (adr r3, 8001160 <MotorMovePos+0x340>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff f849 	bl	80001d4 <__adddf3>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff f9f9 	bl	8000540 <__aeabi_d2f>
 800114e:	4602      	mov	r2, r0
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	47ae147b 	.word	0x47ae147b
 8001164:	3f747ae1 	.word	0x3f747ae1
 8001168:	20000104 	.word	0x20000104
 800116c:	2000026c 	.word	0x2000026c
 8001170:	20000058 	.word	0x20000058
 8001174:	200000fc 	.word	0x200000fc

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>

08001182 <MotorTrapzoidalInit>:
 */

#include "motor.h"

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc, uint8_t direct)
{
 8001182:	b480      	push	{r7}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	6178      	str	r0, [r7, #20]
 800118a:	ed87 0a04 	vstr	s0, [r7, #16]
 800118e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001192:	ed87 1a02 	vstr	s2, [r7, #8]
 8001196:	460b      	mov	r3, r1
 8001198:	71fb      	strb	r3, [r7, #7]
	tProfile->dAccelMax = maxAcc;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ce:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80011d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	ed93 7a02 	vldr	s14, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	edd3 7a01 	vldr	s15, [r3, #4]
 800121a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	edd3 7a01 	vldr	s15, [r3, #4]
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	edd3 7a02 	vldr	s15, [r3, #8]
 8001234:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	ed93 7a01 	vldr	s14, [r3, #4]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	edd3 7a01 	vldr	s15, [r3, #4]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	edd3 7a01 	vldr	s15, [r3, #4]
 800126a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800126e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	edd3 7a01 	vldr	s15, [r3, #4]
 8001278:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	edd3 6a00 	vldr	s13, [r3]
 8001282:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	edd3 6a01 	vldr	s13, [r3, #4]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	ed93 7a00 	vldr	s14, [r3]
 800129c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80012b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tProfile->Direct = direct;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <PIDReset+0x2c>)
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000100 	.word	0x20000100

08001318 <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	ed87 0a02 	vstr	s0, [r7, #8]
 8001324:	edc7 0a01 	vstr	s1, [r7, #4]
 8001328:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff ffdb 	bl	80012e8 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	609a      	str	r2, [r3, #8]

}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	ed87 0a02 	vstr	s0, [r7, #8]
 8001358:	edc7 0a01 	vstr	s1, [r7, #4]
 800135c:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001360:	ed97 7a02 	vldr	s14, [r7, #8]
 8001364:	edd7 7a01 	vldr	s15, [r7, #4]
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <PIDCompute+0xe0>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl->dKp * g_dPIDError;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <PIDCompute+0xe0>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	edc7 7a07 	vstr	s15, [r7, #28]
    PID_Ctrl->dIntergral += g_dPIDError;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	ed93 7a04 	vldr	s14, [r3, #16]
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <PIDCompute+0xe0>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc7 7a06 	vstr	s15, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <PIDCompute+0xe0>)
 80013da:	edd3 6a00 	vldr	s13, [r3]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80013e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013ec:	ed97 7a00 	vldr	s14, [r7]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	edc7 7a05 	vstr	s15, [r7, #20]
    dPIDResult = dP + dI + dD;
 80013f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001404:	ed97 7a05 	vldr	s14, [r7, #20]
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	edc7 7a04 	vstr	s15, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <PIDCompute+0xe0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	ee07 3a90 	vmov	s15, r3
}
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	3724      	adds	r7, #36	; 0x24
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000100 	.word	0x20000100

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 fd78 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM2_IRQHandler+0x10>)
 80014da:	f002 f899 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000014c 	.word	0x2000014c

080014e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <USART1_IRQHandler+0x10>)
 80014ee:	f002 fff9 	bl	80044e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002b4 	.word	0x200002b4

080014fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <USART2_IRQHandler+0x10>)
 8001502:	f002 ffef 	bl	80044e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200002f8 	.word	0x200002f8

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SystemInit+0x20>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <SystemInit+0x20>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ff5a 	bl	80053fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <MX_TIM1_Init+0xac>)
 8001554:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_TIM1_Init+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001568:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM1_Init+0xa8>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800157c:	2303      	movs	r3, #3
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800158c:	230a      	movs	r3, #10
 800158e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800159c:	230a      	movs	r3, #10
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015a8:	f001 fefe 	bl	80033a8 <HAL_TIM_Encoder_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015b2:	f7ff fde1 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015c4:	f002 fdee 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015ce:	f7ff fdd3 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000104 	.word	0x20000104
 80015e0:	40010000 	.word	0x40010000

080015e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_TIM2_Init+0x94>)
 8001602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_TIM2_Init+0x94>)
 800160a:	2263      	movs	r2, #99	; 0x63
 800160c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM2_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_TIM2_Init+0x94>)
 8001616:	f640 620f 	movw	r2, #3599	; 0xe0f
 800161a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_TIM2_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM2_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <MX_TIM2_Init+0x94>)
 800162a:	f001 fcdb 	bl	8002fe4 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001634:	f7ff fda0 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <MX_TIM2_Init+0x94>)
 8001646:	f002 f9ad 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001650:	f7ff fd92 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_TIM2_Init+0x94>)
 8001662:	f002 fd9f 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800166c:	f7ff fd84 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000014c 	.word	0x2000014c

0800167c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	615a      	str	r2, [r3, #20]
 80016aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016ae:	4a2d      	ldr	r2, [pc, #180]	; (8001764 <MX_TIM3_Init+0xe8>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016b4:	2247      	movs	r2, #71	; 0x47
 80016b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80016b8:	4b29      	ldr	r3, [pc, #164]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016ba:	2260      	movs	r2, #96	; 0x60
 80016bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016d2:	4823      	ldr	r0, [pc, #140]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016d4:	f001 fc86 	bl	8002fe4 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016de:	f7ff fd4b 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ec:	4619      	mov	r1, r3
 80016ee:	481c      	ldr	r0, [pc, #112]	; (8001760 <MX_TIM3_Init+0xe4>)
 80016f0:	f002 f958 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016fa:	f7ff fd3d 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016fe:	4818      	ldr	r0, [pc, #96]	; (8001760 <MX_TIM3_Init+0xe4>)
 8001700:	f001 fd30 	bl	8003164 <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800170a:	f7ff fd35 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	4619      	mov	r1, r3
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <MX_TIM3_Init+0xe4>)
 800171e:	f002 fd41 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001728:	f7ff fd26 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <MX_TIM3_Init+0xe4>)
 8001744:	f002 f86c 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800174e:	f7ff fd13 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <MX_TIM3_Init+0xe4>)
 8001754:	f000 fa32 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 8001758:	bf00      	nop
 800175a:	3738      	adds	r7, #56	; 0x38
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000194 	.word	0x20000194
 8001764:	40000400 	.word	0x40000400

08001768 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2224      	movs	r2, #36	; 0x24
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fe40 	bl	80053fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_TIM4_Init+0xa0>)
 8001786:	4a21      	ldr	r2, [pc, #132]	; (800180c <MX_TIM4_Init+0xa4>)
 8001788:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_TIM4_Init+0xa0>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_TIM4_Init+0xa0>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_TIM4_Init+0xa0>)
 8001798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_TIM4_Init+0xa0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_TIM4_Init+0xa0>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017aa:	2303      	movs	r3, #3
 80017ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b2:	2301      	movs	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017ba:	230a      	movs	r3, #10
 80017bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c2:	2301      	movs	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80017ca:	230a      	movs	r3, #10
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_TIM4_Init+0xa0>)
 80017d6:	f001 fde7 	bl	80033a8 <HAL_TIM_Encoder_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017e0:	f7ff fcca 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_TIM4_Init+0xa0>)
 80017f2:	f002 fcd7 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017fc:	f7ff fcbc 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3730      	adds	r7, #48	; 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200001dc 	.word	0x200001dc
 800180c:	40000800 	.word	0x40000800

08001810 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001842:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <MX_TIM5_Init+0xe8>)
 8001844:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001848:	2247      	movs	r2, #71	; 0x47
 800184a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <MX_TIM5_Init+0xe4>)
 800184e:	2260      	movs	r2, #96	; 0x60
 8001850:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001858:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <MX_TIM5_Init+0xe4>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001866:	4823      	ldr	r0, [pc, #140]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001868:	f001 fbbc 	bl	8002fe4 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001872:	f7ff fc81 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001880:	4619      	mov	r1, r3
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001884:	f002 f88e 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800188e:	f7ff fc73 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001892:	4818      	ldr	r0, [pc, #96]	; (80018f4 <MX_TIM5_Init+0xe4>)
 8001894:	f001 fc66 	bl	8003164 <HAL_TIM_PWM_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800189e:	f7ff fc6b 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	4619      	mov	r1, r3
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <MX_TIM5_Init+0xe4>)
 80018b2:	f002 fc77 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80018bc:	f7ff fc5c 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2204      	movs	r2, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <MX_TIM5_Init+0xe4>)
 80018d8:	f001 ffa2 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80018e2:	f7ff fc49 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <MX_TIM5_Init+0xe4>)
 80018e8:	f000 f968 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 80018ec:	bf00      	nop
 80018ee:	3738      	adds	r7, #56	; 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000224 	.word	0x20000224
 80018f8:	40000c00 	.word	0x40000c00

080018fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fd76 	bl	80053fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <MX_TIM8_Init+0xa8>)
 800191a:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <MX_TIM8_Init+0xac>)
 800191c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_TIM8_Init+0xa8>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <MX_TIM8_Init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_TIM8_Init+0xa8>)
 800192c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001930:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_TIM8_Init+0xa8>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_TIM8_Init+0xa8>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_TIM8_Init+0xa8>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001944:	2303      	movs	r3, #3
 8001946:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001954:	230a      	movs	r3, #10
 8001956:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001964:	230a      	movs	r3, #10
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_TIM8_Init+0xa8>)
 8001970:	f001 fd1a 	bl	80033a8 <HAL_TIM_Encoder_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800197a:	f7ff fbfd 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_TIM8_Init+0xa8>)
 800198c:	f002 fc0a 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001996:	f7ff fbef 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000026c 	.word	0x2000026c
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_TIM_Encoder_MspInit+0x150>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12d      	bne.n	8001a2a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
 80019d2:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	623b      	str	r3, [r7, #32]
 80019e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a43      	ldr	r2, [pc, #268]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001a06:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4838      	ldr	r0, [pc, #224]	; (8001b04 <HAL_TIM_Encoder_MspInit+0x158>)
 8001a24:	f000 fc90 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a28:	e063      	b.n	8001af2 <HAL_TIM_Encoder_MspInit+0x146>
  else if(tim_encoderHandle->Instance==TIM4)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d12d      	bne.n	8001a90 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a30      	ldr	r2, [pc, #192]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	4820      	ldr	r0, [pc, #128]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x160>)
 8001a8a:	f000 fc5d 	bl	8002348 <HAL_GPIO_Init>
}
 8001a8e:	e030      	b.n	8001af2 <HAL_TIM_Encoder_MspInit+0x146>
  else if(tim_encoderHandle->Instance==TIM8)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x164>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12b      	bne.n	8001af2 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <HAL_TIM_Encoder_MspInit+0x168>)
 8001aee:	f000 fc2b 	bl	8002348 <HAL_GPIO_Init>
}
 8001af2:	bf00      	nop
 8001af4:	3738      	adds	r7, #56	; 0x38
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40020c00 	.word	0x40020c00
 8001b10:	40010400 	.word	0x40010400
 8001b14:	40020800 	.word	0x40020800

08001b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d116      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f000 fb33 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b50:	201c      	movs	r0, #28
 8001b52:	f000 fb4c 	bl	80021ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b56:	e026      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_TIM_Base_MspInit+0x9c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
}
 8001b7e:	e012      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_TIM_Base_MspInit+0xa0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10d      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000c00 	.word	0x40000c00

08001bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_TIM_MspPostInit+0xb0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d11e      	bne.n	8001c1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bfa:	2340      	movs	r3, #64	; 0x40
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4817      	ldr	r0, [pc, #92]	; (8001c74 <HAL_TIM_MspPostInit+0xb8>)
 8001c16:	f000 fb97 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c1a:	e022      	b.n	8001c62 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_TIM_MspPostInit+0xbc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d11d      	bne.n	8001c62 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c42:	2302      	movs	r3, #2
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c52:	2302      	movs	r3, #2
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_TIM_MspPostInit+0xb8>)
 8001c5e:	f000 fb73 	bl	8002348 <HAL_GPIO_Init>
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40000c00 	.word	0x40000c00

08001c7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_USART1_UART_Init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	f002 fb06 	bl	80042c4 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cbe:	f7ff fa5b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002b4 	.word	0x200002b4
 8001ccc:	40011000 	.word	0x40011000

08001cd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_USART2_UART_Init+0x50>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001d08:	f002 fadc 	bl	80042c4 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d12:	f7ff fa31 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002f8 	.word	0x200002f8
 8001d20:	40004400 	.word	0x40004400

08001d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a49      	ldr	r2, [pc, #292]	; (8001e68 <HAL_UART_MspInit+0x144>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d135      	bne.n	8001db2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a47      	ldr	r2, [pc, #284]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d90:	2307      	movs	r3, #7
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4835      	ldr	r0, [pc, #212]	; (8001e70 <HAL_UART_MspInit+0x14c>)
 8001d9c:	f000 fad4 	bl	8002348 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2025      	movs	r0, #37	; 0x25
 8001da6:	f000 fa06 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001daa:	2025      	movs	r0, #37	; 0x25
 8001dac:	f000 fa1f 	bl	80021ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001db0:	e056      	b.n	8001e60 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <HAL_UART_MspInit+0x150>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d151      	bne.n	8001e60 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_UART_MspInit+0x148>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e10:	2304      	movs	r3, #4
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e20:	2307      	movs	r3, #7
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4811      	ldr	r0, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x14c>)
 8001e2c:	f000 fa8c 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e40:	2307      	movs	r3, #7
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <HAL_UART_MspInit+0x154>)
 8001e4c:	f000 fa7c 	bl	8002348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2026      	movs	r0, #38	; 0x26
 8001e56:	f000 f9ae 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e5a:	2026      	movs	r0, #38	; 0x26
 8001e5c:	f000 f9c7 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40020c00 	.word	0x40020c00

08001e7c <ConvertDegToPulse>:

#include "utils.h"
#include "motor.h"

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * TotalPulse / TotalDeg;
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <ConvertDegToPulse+0x48>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	441a      	add	r2, r3
 8001e98:	1212      	asrs	r2, r2, #8
 8001e9a:	17db      	asrs	r3, r3, #31
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	edc7 7a03 	vstr	s15, [r7, #12]
    return (uint16_t)dPulse;
 8001eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb2:	ee17 3a90 	vmov	r3, s15
 8001eb6:	b29b      	uxth	r3, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	b60b60b7 	.word	0xb60b60b7

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff fb0d 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f003 fa5d 	bl	80053b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7fe fda3 	bl	8000a44 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f0c:	0800544c 	.word	0x0800544c
  ldr r2, =_sbss
 8001f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f14:	20000340 	.word	0x20000340

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f92b 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fa6e 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f943 	bl	800220a <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f9c:	f000 f90b 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	2000033c 	.word	0x2000033c

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000033c 	.word	0x2000033c

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff3e 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff8e 	bl	80020f4 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5d 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff31 	bl	8002064 <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff feda 	bl	8001fe8 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d008      	beq.n	8002254 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e052      	b.n	80022fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0216 	bic.w	r2, r2, #22
 8002262:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002272:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d103      	bne.n	8002284 <HAL_DMA_Abort+0x62>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a4:	e013      	b.n	80022ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a6:	f7ff fe9f 	bl	8001fe8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d90c      	bls.n	80022ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2203      	movs	r2, #3
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e015      	b.n	80022fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e4      	bne.n	80022a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d004      	beq.n	8002320 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e00c      	b.n	800233a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2205      	movs	r2, #5
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e16b      	b.n	800263c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 815a 	bne.w	8002636 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	2b02      	cmp	r3, #2
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80b4 	beq.w	8002636 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b60      	ldr	r3, [pc, #384]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a5f      	ldr	r2, [pc, #380]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_GPIO_Init+0x310>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_GPIO_Init+0x314>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x226>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_GPIO_Init+0x318>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x222>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_GPIO_Init+0x31c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x21e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_Init+0x320>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x21a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_GPIO_Init+0x324>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x216>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_GPIO_Init+0x328>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x212>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_GPIO_Init+0x32c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_GPIO_Init+0x330>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x20a>
 800254e:	2307      	movs	r3, #7
 8002550:	e00e      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002552:	2308      	movs	r3, #8
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002556:	2306      	movs	r3, #6
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <HAL_GPIO_Init+0x310>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_GPIO_Init+0x334>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a32      	ldr	r2, [pc, #200]	; (800267c <HAL_GPIO_Init+0x334>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b30      	ldr	r3, [pc, #192]	; (800267c <HAL_GPIO_Init+0x334>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_GPIO_Init+0x334>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_GPIO_Init+0x334>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_GPIO_Init+0x334>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_GPIO_Init+0x334>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_GPIO_Init+0x334>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae90 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40021c00 	.word	0x40021c00
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e267      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b82      	ldr	r3, [pc, #520]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b7e      	ldr	r3, [pc, #504]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e242      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x74>
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a75      	ldr	r2, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6f      	ldr	r2, [pc, #444]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6c      	ldr	r2, [pc, #432]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a68      	ldr	r2, [pc, #416]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a65      	ldr	r2, [pc, #404]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fc3c 	bl	8001fe8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff fc38 	bl	8001fe8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e207      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b5b      	ldr	r3, [pc, #364]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fc28 	bl	8001fe8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff fc24 	bl	8001fe8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1f3      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1c7      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4937      	ldr	r1, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e03a      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff fbdd 	bl	8001fe8 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff fbd9 	bl	8001fe8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1a8      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4925      	ldr	r1, [pc, #148]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff fbbc 	bl	8001fe8 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7ff fbb8 	bl	8001fe8 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e187      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d036      	beq.n	800290c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCC_OscConfig+0x248>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7ff fb9c 	bl	8001fe8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff fb98 	bl	8001fe8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e167      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x200>
 80028d2:	e01b      	b.n	800290c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_OscConfig+0x248>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff fb85 	bl	8001fe8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	e00e      	b.n	8002900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e2:	f7ff fb81 	bl	8001fe8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d907      	bls.n	8002900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e150      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	42470000 	.word	0x42470000
 80028fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ea      	bne.n	80028e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8097 	beq.w	8002a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4b81      	ldr	r3, [pc, #516]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b7d      	ldr	r3, [pc, #500]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a7c      	ldr	r2, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b7a      	ldr	r3, [pc, #488]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4b77      	ldr	r3, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002956:	4b74      	ldr	r3, [pc, #464]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a73      	ldr	r2, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002962:	f7ff fb41 	bl	8001fe8 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296a:	f7ff fb3d 	bl	8001fe8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e10c      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x2ea>
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a63      	ldr	r2, [pc, #396]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	e01c      	b.n	80029d8 <HAL_RCC_OscConfig+0x324>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x30c>
 80029a6:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5e      	ldr	r2, [pc, #376]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a5b      	ldr	r2, [pc, #364]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0x324>
 80029c0:	4b58      	ldr	r3, [pc, #352]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029d2:	f023 0304 	bic.w	r3, r3, #4
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7ff fb02 	bl	8001fe8 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7ff fafe 	bl	8001fe8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0cb      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	4b49      	ldr	r3, [pc, #292]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ee      	beq.n	80029e8 <HAL_RCC_OscConfig+0x334>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff faec 	bl	8001fe8 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7ff fae8 	bl	8001fe8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0b5      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ee      	bne.n	8002a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3c:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a1 	beq.w	8002b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a52:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d05c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d141      	bne.n	8002aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fabc 	bl	8001fe8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff fab8 	bl	8001fe8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e087      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	491b      	ldr	r1, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7ff fa91 	bl	8001fe8 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7ff fa8d 	bl	8001fe8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e05c      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x416>
 8002ae8:	e054      	b.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7ff fa7a 	bl	8001fe8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7ff fa76 	bl	8001fe8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e045      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x444>
 8002b16:	e03d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e038      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x4ec>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d121      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0cc      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d90c      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d044      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d119      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e067      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4934      	ldr	r1, [pc, #208]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7ff f9a8 	bl	8001fe8 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7ff f9a4 	bl	8001fe8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e04f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d20c      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f908 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08005424 	.word	0x08005424
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b094      	sub	sp, #80	; 0x50
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80e1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0db      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002da8:	e0db      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ebb2 0801 	subs.w	r8, r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb49 0303 	adc.w	r3, r9, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e62:	4629      	mov	r1, r5
 8002e64:	024b      	lsls	r3, r1, #9
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	024a      	lsls	r2, r1, #9
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e80:	f7fd fbae 	bl	80005e0 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb45 0303 	adc.w	r3, r5, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	f7fd fb54 	bl	80005e0 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3750      	adds	r7, #80	; 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08005434 	.word	0x08005434

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08005434 	.word	0x08005434

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e041      	b.n	800307a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fd84 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 fdae 	bl	8003b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d001      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04e      	b.n	800313a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <HAL_TIM_Base_Start_IT+0xc4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d022      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c6:	d01d      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_TIM_Base_Start_IT+0xc8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <HAL_TIM_Base_Start_IT+0xcc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_TIM_Base_Start_IT+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_TIM_Base_Start_IT+0xd4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_TIM_Base_Start_IT+0xd8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIM_Base_Start_IT+0xdc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d010      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003126:	e007      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40010400 	.word	0x40010400
 800315c:	40014000 	.word	0x40014000
 8003160:	40001800 	.word	0x40001800

08003164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e041      	b.n	80031fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f839 	bl	8003202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fcee 	bl	8003b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start+0x24>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e022      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d109      	bne.n	8003256 <HAL_TIM_PWM_Start+0x3e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e015      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d109      	bne.n	8003270 <HAL_TIM_PWM_Start+0x58>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e008      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07c      	b.n	8003384 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0x82>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003298:	e013      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0x92>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a8:	e00b      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	e003      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 ff44 	bl	8004158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_TIM_PWM_Start+0x174>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIM_PWM_Start+0xcc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <HAL_TIM_PWM_Start+0x178>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_PWM_Start+0xd0>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_TIM_PWM_Start+0xd2>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <HAL_TIM_PWM_Start+0x174>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003310:	d01d      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <HAL_TIM_PWM_Start+0x17c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d018      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_TIM_PWM_Start+0x180>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_TIM_PWM_Start+0x184>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_TIM_PWM_Start+0x178>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_TIM_PWM_Start+0x188>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_TIM_PWM_Start+0x18c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b06      	cmp	r3, #6
 800335e:	d010      	beq.n	8003382 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	e007      	b.n	8003382 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40010000 	.word	0x40010000
 8003390:	40010400 	.word	0x40010400
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40001800 	.word	0x40001800

080033a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e097      	b.n	80034ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fe faeb 	bl	80019ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ec:	f023 0307 	bic.w	r3, r3, #7
 80033f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fbc1 	bl	8003b84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4313      	orrs	r3, r2
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003448:	f023 030c 	bic.w	r3, r3, #12
 800344c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	4313      	orrs	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	011a      	lsls	r2, r3, #4
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	031b      	lsls	r3, r3, #12
 8003478:	4313      	orrs	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4313      	orrs	r3, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003504:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800350c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003514:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800351c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d110      	bne.n	8003546 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800352a:	7b7b      	ldrb	r3, [r7, #13]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e069      	b.n	8003608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	e031      	b.n	80035aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d110      	bne.n	800356e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800354c:	7bbb      	ldrb	r3, [r7, #14]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003552:	7b3b      	ldrb	r3, [r7, #12]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e055      	b.n	8003608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800356c:	e01d      	b.n	80035aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d108      	bne.n	8003586 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	7b7b      	ldrb	r3, [r7, #13]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003580:	7b3b      	ldrb	r3, [r7, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e03e      	b.n	8003608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_TIM_Encoder_Start+0xc4>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d008      	beq.n	80035c8 <HAL_TIM_Encoder_Start+0xd4>
 80035b6:	e00f      	b.n	80035d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fdc9 	bl	8004158 <TIM_CCxChannelCmd>
      break;
 80035c6:	e016      	b.n	80035f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	2104      	movs	r1, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fdc1 	bl	8004158 <TIM_CCxChannelCmd>
      break;
 80035d6:	e00e      	b.n	80035f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fdb9 	bl	8004158 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	2104      	movs	r1, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fdb2 	bl	8004158 <TIM_CCxChannelCmd>
      break;
 80035f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0202 	mvn.w	r2, #2
 800363c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa77 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa69 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fa7a 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0204 	mvn.w	r2, #4
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa4d 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa3f 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fa50 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0208 	mvn.w	r2, #8
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2204      	movs	r2, #4
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa23 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa15 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa26 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b10      	cmp	r3, #16
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b10      	cmp	r3, #16
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0210 	mvn.w	r2, #16
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2208      	movs	r2, #8
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9f9 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9eb 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f9fc 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0201 	mvn.w	r2, #1
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fb16 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fd78 	bl	80042b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f9c1 	bl	8003b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b20      	cmp	r3, #32
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0220 	mvn.w	r2, #32
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fd42 	bl	800429c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ae      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	f200 809f 	bhi.w	800398c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003889 	.word	0x08003889
 8003858:	0800398d 	.word	0x0800398d
 800385c:	0800398d 	.word	0x0800398d
 8003860:	0800398d 	.word	0x0800398d
 8003864:	080038c9 	.word	0x080038c9
 8003868:	0800398d 	.word	0x0800398d
 800386c:	0800398d 	.word	0x0800398d
 8003870:	0800398d 	.word	0x0800398d
 8003874:	0800390b 	.word	0x0800390b
 8003878:	0800398d 	.word	0x0800398d
 800387c:	0800398d 	.word	0x0800398d
 8003880:	0800398d 	.word	0x0800398d
 8003884:	0800394b 	.word	0x0800394b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa18 	bl	8003cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0204 	bic.w	r2, r2, #4
 80038b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6999      	ldr	r1, [r3, #24]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	619a      	str	r2, [r3, #24]
      break;
 80038c6:	e064      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fa68 	bl	8003da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	619a      	str	r2, [r3, #24]
      break;
 8003908:	e043      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fabd 	bl	8003e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0208 	orr.w	r2, r2, #8
 8003924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0204 	bic.w	r2, r2, #4
 8003934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69d9      	ldr	r1, [r3, #28]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	61da      	str	r2, [r3, #28]
      break;
 8003948:	e023      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb11 	bl	8003f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	021a      	lsls	r2, r3, #8
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	61da      	str	r2, [r3, #28]
      break;
 800398a:	e002      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
      break;
 8003990:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_ConfigClockSource+0x1c>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0b4      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x186>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f8:	d03e      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xd4>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fe:	f200 8087 	bhi.w	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	f000 8086 	beq.w	8003b16 <HAL_TIM_ConfigClockSource+0x172>
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	d87f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d01a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xa6>
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d87b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b60      	cmp	r3, #96	; 0x60
 8003a1a:	d050      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x11a>
 8003a1c:	2b60      	cmp	r3, #96	; 0x60
 8003a1e:	d877      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b50      	cmp	r3, #80	; 0x50
 8003a22:	d03c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xfa>
 8003a24:	2b50      	cmp	r3, #80	; 0x50
 8003a26:	d873      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d058      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x13a>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d86f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d064      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d86b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d060      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d867      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d05a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	e062      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 fb5d 	bl	8004118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	609a      	str	r2, [r3, #8]
      break;
 8003a76:	e04f      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f000 fb46 	bl	8004118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a9a:	609a      	str	r2, [r3, #8]
      break;
 8003a9c:	e03c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 faba 	bl	8004024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2150      	movs	r1, #80	; 0x50
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb13 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e02c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fad9 	bl	8004082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2160      	movs	r1, #96	; 0x60
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb03 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003adc:	e01c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fa9a 	bl	8004024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 faf3 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003afc:	e00c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f000 faea 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e000      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <TIM_Base_SetConfig+0x114>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d00f      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a3d      	ldr	r2, [pc, #244]	; (8003c9c <TIM_Base_SetConfig+0x118>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00b      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3c      	ldr	r2, [pc, #240]	; (8003ca0 <TIM_Base_SetConfig+0x11c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <TIM_Base_SetConfig+0x120>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3a      	ldr	r2, [pc, #232]	; (8003ca8 <TIM_Base_SetConfig+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d108      	bne.n	8003bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a2f      	ldr	r2, [pc, #188]	; (8003c98 <TIM_Base_SetConfig+0x114>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02b      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d027      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2c      	ldr	r2, [pc, #176]	; (8003c9c <TIM_Base_SetConfig+0x118>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d023      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2b      	ldr	r2, [pc, #172]	; (8003ca0 <TIM_Base_SetConfig+0x11c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <TIM_Base_SetConfig+0x120>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01b      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <TIM_Base_SetConfig+0x124>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d017      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a28      	ldr	r2, [pc, #160]	; (8003cac <TIM_Base_SetConfig+0x128>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a27      	ldr	r2, [pc, #156]	; (8003cb0 <TIM_Base_SetConfig+0x12c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00f      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <TIM_Base_SetConfig+0x130>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <TIM_Base_SetConfig+0x134>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <TIM_Base_SetConfig+0x138>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <TIM_Base_SetConfig+0x13c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <TIM_Base_SetConfig+0x114>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0xf8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <TIM_Base_SetConfig+0x124>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d103      	bne.n	8003c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	615a      	str	r2, [r3, #20]
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40010400 	.word	0x40010400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800
 8003cb8:	40001800 	.word	0x40001800
 8003cbc:	40001c00 	.word	0x40001c00
 8003cc0:	40002000 	.word	0x40002000

08003cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 0302 	bic.w	r3, r3, #2
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <TIM_OC1_SetConfig+0xd8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_OC1_SetConfig+0x64>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <TIM_OC1_SetConfig+0xdc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10c      	bne.n	8003d42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0308 	bic.w	r3, r3, #8
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <TIM_OC1_SetConfig+0xd8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_OC1_SetConfig+0x8e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <TIM_OC1_SetConfig+0xdc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d111      	bne.n	8003d76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40010400 	.word	0x40010400

08003da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0320 	bic.w	r3, r3, #32
 8003dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <TIM_OC2_SetConfig+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_OC2_SetConfig+0x68>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <TIM_OC2_SetConfig+0xe8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10d      	bne.n	8003e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <TIM_OC2_SetConfig+0xe4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC2_SetConfig+0x94>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <TIM_OC2_SetConfig+0xe8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d113      	bne.n	8003e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400

08003e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <TIM_OC3_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_OC3_SetConfig+0x66>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <TIM_OC3_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <TIM_OC3_SetConfig+0xe0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_OC3_SetConfig+0x92>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <TIM_OC3_SetConfig+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d113      	bne.n	8003f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40010400 	.word	0x40010400

08003f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	031b      	lsls	r3, r3, #12
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a12      	ldr	r2, [pc, #72]	; (800401c <TIM_OC4_SetConfig+0xa4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_OC4_SetConfig+0x68>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <TIM_OC4_SetConfig+0xa8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d109      	bne.n	8003ff4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	019b      	lsls	r3, r3, #6
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40010400 	.word	0x40010400

08004024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 030a 	bic.w	r3, r3, #10
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004082:	b480      	push	{r7}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0210 	bic.w	r2, r3, #16
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	031b      	lsls	r3, r3, #12
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f043 0307 	orr.w	r3, r3, #7
 8004104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	431a      	orrs	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4313      	orrs	r3, r2
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2201      	movs	r2, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e05a      	b.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d01d      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a17      	ldr	r2, [pc, #92]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10c      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40010400 	.word	0x40010400
 8004294:	40014000 	.word	0x40014000
 8004298:	40001800 	.word	0x40001800

0800429c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e03f      	b.n	8004356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd fd1a 	bl	8001d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fddf 	bl	8004ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800433c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b08a      	sub	sp, #40	; 0x28
 8004362:	af02      	add	r7, sp, #8
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b20      	cmp	r3, #32
 800437c:	d17c      	bne.n	8004478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_UART_Transmit+0x2c>
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e075      	b.n	800447a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UART_Transmit+0x3e>
 8004398:	2302      	movs	r3, #2
 800439a:	e06e      	b.n	800447a <HAL_UART_Transmit+0x11c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2221      	movs	r2, #33	; 0x21
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b2:	f7fd fe19 	bl	8001fe8 <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d108      	bne.n	80043e0 <HAL_UART_Transmit+0x82>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	e003      	b.n	80043e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043f0:	e02a      	b.n	8004448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fb1f 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e036      	b.n	800447a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	3302      	adds	r3, #2
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	e007      	b.n	800443a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3301      	adds	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1cf      	bne.n	80043f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2140      	movs	r1, #64	; 0x40
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 faef 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e006      	b.n	800447a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b20      	cmp	r3, #32
 800449a:	d11d      	bne.n	80044d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Receive_IT+0x26>
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e016      	b.n	80044da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Receive_IT+0x38>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e00f      	b.n	80044da <HAL_UART_Receive_IT+0x58>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fb24 	bl	8004b1c <UART_Start_Receive_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	e000      	b.n	80044da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b0ba      	sub	sp, #232	; 0xe8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_UART_IRQHandler+0x66>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fc07 	bl	8004d56 <UART_Receive_IT>
      return;
 8004548:	e256      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800454a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80de 	beq.w	8004710 <HAL_UART_IRQHandler+0x22c>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80d1 	beq.w	8004710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_UART_IRQHandler+0xae>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
 800459e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xf6>
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_UART_IRQHandler+0x126>
 80045e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0208 	orr.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 81ed 	beq.w	80049ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x14e>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fb92 	bl	8004d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_UART_IRQHandler+0x17a>
 8004656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04f      	beq.n	80046fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa9a 	bl	8004b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d141      	bne.n	80046f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800469e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1d9      	bne.n	8004672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4a7d      	ldr	r2, [pc, #500]	; (80048c0 <HAL_UART_IRQHandler+0x3dc>)
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fe15 	bl	8002302 <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00e      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f990 	bl	8004a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e00a      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f98c 	bl	8004a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e006      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f988 	bl	8004a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800470a:	e170      	b.n	80049ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	bf00      	nop
    return;
 800470e:	e16e      	b.n	80049ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 814a 	bne.w	80049ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8143 	beq.w	80049ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 813c 	beq.w	80049ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	f040 80b4 	bne.w	80048c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8140 	beq.w	80049f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477a:	429a      	cmp	r2, r3
 800477c:	f080 8139 	bcs.w	80049f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	f000 8088 	beq.w	80048a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1d9      	bne.n	8004796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800480e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e1      	bne.n	80047e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e3      	bne.n	800481e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	f023 0310 	bic.w	r3, r3, #16
 800487a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004888:	65ba      	str	r2, [r7, #88]	; 0x58
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800488e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e3      	bne.n	8004864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd fcbe 	bl	8002222 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8b6 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048bc:	e099      	b.n	80049f2 <HAL_UART_IRQHandler+0x50e>
 80048be:	bf00      	nop
 80048c0:	08004c5f 	.word	0x08004c5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 808b 	beq.w	80049f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8086 	beq.w	80049f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800490e:	647a      	str	r2, [r7, #68]	; 0x44
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e3      	bne.n	80048ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	623b      	str	r3, [r7, #32]
   return(result);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004946:	633a      	str	r2, [r7, #48]	; 0x30
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60fb      	str	r3, [r7, #12]
   return(result);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800498c:	61fa      	str	r2, [r7, #28]
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e3      	bne.n	8004968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f83e 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ac:	e023      	b.n	80049f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_UART_IRQHandler+0x4ea>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f95d 	bl	8004c86 <UART_Transmit_IT>
    return;
 80049cc:	e014      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <HAL_UART_IRQHandler+0x514>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f99d 	bl	8004d26 <UART_EndTransmit_IT>
    return;
 80049ec:	e004      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
    return;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
      return;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
      return;
 80049f6:	bf00      	nop
  }
}
 80049f8:	37e8      	adds	r7, #232	; 0xe8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop

08004a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b090      	sub	sp, #64	; 0x40
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	e050      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a58:	d04c      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a60:	f7fd fac2 	bl	8001fe8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d241      	bcs.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a90:	637a      	str	r2, [r7, #52]	; 0x34
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac4:	623a      	str	r2, [r7, #32]
 8004ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69f9      	ldr	r1, [r7, #28]
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e00f      	b.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d09f      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3740      	adds	r7, #64	; 0x40
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2222      	movs	r2, #34	; 0x22
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0220 	orr.w	r2, r2, #32
 8004b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b095      	sub	sp, #84	; 0x54
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bc0:	643a      	str	r2, [r7, #64]	; 0x40
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e5      	bne.n	8004ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e5      	bne.n	8004bd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d119      	bne.n	8004c44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f023 0310 	bic.w	r3, r3, #16
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c30:	61ba      	str	r2, [r7, #24]
 8004c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6979      	ldr	r1, [r7, #20]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e5      	bne.n	8004c10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c52:	bf00      	nop
 8004c54:	3754      	adds	r7, #84	; 0x54
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff fecb 	bl	8004a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b21      	cmp	r3, #33	; 0x21
 8004c98:	d13e      	bne.n	8004d18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	d114      	bne.n	8004cce <UART_Transmit_IT+0x48>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d110      	bne.n	8004cce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	1c9a      	adds	r2, r3, #2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	621a      	str	r2, [r3, #32]
 8004ccc:	e008      	b.n	8004ce0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6211      	str	r1, [r2, #32]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4619      	mov	r1, r3
 8004cee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fe5a 	bl	8004a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b08c      	sub	sp, #48	; 0x30
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b22      	cmp	r3, #34	; 0x22
 8004d68:	f040 80ab 	bne.w	8004ec2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d117      	bne.n	8004da6 <UART_Receive_IT+0x50>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d113      	bne.n	8004da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
 8004da4:	e026      	b.n	8004df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db8:	d007      	beq.n	8004dca <UART_Receive_IT+0x74>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <UART_Receive_IT+0x82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e008      	b.n	8004dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4619      	mov	r1, r3
 8004e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d15a      	bne.n	8004ebe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0220 	bic.w	r2, r2, #32
 8004e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d135      	bne.n	8004eb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	623a      	str	r2, [r7, #32]
 8004e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d10a      	bne.n	8004ea6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fdbb 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004eb2:	e002      	b.n	8004eba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fb fe95 	bl	8000be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e002      	b.n	8004ec4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3730      	adds	r7, #48	; 0x30
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed0:	b0c0      	sub	sp, #256	; 0x100
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	ea40 0301 	orr.w	r3, r0, r1
 8004ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f24:	f021 010c 	bic.w	r1, r1, #12
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f32:	430b      	orrs	r3, r1
 8004f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	6999      	ldr	r1, [r3, #24]
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	ea40 0301 	orr.w	r3, r0, r1
 8004f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b8f      	ldr	r3, [pc, #572]	; (8005198 <UART_SetConfig+0x2cc>)
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d005      	beq.n	8004f6c <UART_SetConfig+0xa0>
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b8d      	ldr	r3, [pc, #564]	; (800519c <UART_SetConfig+0x2d0>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d104      	bne.n	8004f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe f826 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004f70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f74:	e003      	b.n	8004f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f76:	f7fe f80d 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	f040 810c 	bne.w	80051a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	1891      	adds	r1, r2, r2
 8004fa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fa6:	415b      	adcs	r3, r3
 8004fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fae:	4621      	mov	r1, r4
 8004fb0:	eb12 0801 	adds.w	r8, r2, r1
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	eb43 0901 	adc.w	r9, r3, r1
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fce:	4690      	mov	r8, r2
 8004fd0:	4699      	mov	r9, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	eb18 0303 	adds.w	r3, r8, r3
 8004fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fdc:	462b      	mov	r3, r5
 8004fde:	eb49 0303 	adc.w	r3, r9, r3
 8004fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	18db      	adds	r3, r3, r3
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8005000:	4613      	mov	r3, r2
 8005002:	eb42 0303 	adc.w	r3, r2, r3
 8005006:	657b      	str	r3, [r7, #84]	; 0x54
 8005008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800500c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005010:	f7fb fae6 	bl	80005e0 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b61      	ldr	r3, [pc, #388]	; (80051a0 <UART_SetConfig+0x2d4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800502c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	64b9      	str	r1, [r7, #72]	; 0x48
 800503c:	415b      	adcs	r3, r3
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005044:	4641      	mov	r1, r8
 8005046:	eb12 0a01 	adds.w	sl, r2, r1
 800504a:	4649      	mov	r1, r9
 800504c:	eb43 0b01 	adc.w	fp, r3, r1
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800505c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005064:	4692      	mov	sl, r2
 8005066:	469b      	mov	fp, r3
 8005068:	4643      	mov	r3, r8
 800506a:	eb1a 0303 	adds.w	r3, sl, r3
 800506e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005072:	464b      	mov	r3, r9
 8005074:	eb4b 0303 	adc.w	r3, fp, r3
 8005078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005088:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800508c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005090:	460b      	mov	r3, r1
 8005092:	18db      	adds	r3, r3, r3
 8005094:	643b      	str	r3, [r7, #64]	; 0x40
 8005096:	4613      	mov	r3, r2
 8005098:	eb42 0303 	adc.w	r3, r2, r3
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
 800509e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050a6:	f7fb fa9b 	bl	80005e0 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b3b      	ldr	r3, [pc, #236]	; (80051a0 <UART_SetConfig+0x2d4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	; 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <UART_SetConfig+0x2d4>)
 80050c8:	fba3 2302 	umull	r2, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d4:	441c      	add	r4, r3
 80050d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80050f0:	415b      	adcs	r3, r3
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6339      	str	r1, [r7, #48]	; 0x30
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800512c:	464b      	mov	r3, r9
 800512e:	460a      	mov	r2, r1
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005144:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800514c:	460b      	mov	r3, r1
 800514e:	18db      	adds	r3, r3, r3
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
 8005152:	4613      	mov	r3, r2
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005162:	f7fb fa3d 	bl	80005e0 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <UART_SetConfig+0x2d4>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	; 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	3332      	adds	r3, #50	; 0x32
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <UART_SetConfig+0x2d4>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4422      	add	r2, r4
 8005192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005194:	e105      	b.n	80053a2 <UART_SetConfig+0x4d6>
 8005196:	bf00      	nop
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	6239      	str	r1, [r7, #32]
 80051be:	415b      	adcs	r3, r3
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c6:	4641      	mov	r1, r8
 80051c8:	1854      	adds	r4, r2, r1
 80051ca:	4649      	mov	r1, r9
 80051cc:	eb43 0501 	adc.w	r5, r3, r1
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	00eb      	lsls	r3, r5, #3
 80051da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051de:	00e2      	lsls	r2, r4, #3
 80051e0:	4614      	mov	r4, r2
 80051e2:	461d      	mov	r5, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	18e3      	adds	r3, r4, r3
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ec:	464b      	mov	r3, r9
 80051ee:	eb45 0303 	adc.w	r3, r5, r3
 80051f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005212:	4629      	mov	r1, r5
 8005214:	008b      	lsls	r3, r1, #2
 8005216:	4621      	mov	r1, r4
 8005218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521c:	4621      	mov	r1, r4
 800521e:	008a      	lsls	r2, r1, #2
 8005220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005224:	f7fb f9dc 	bl	80005e0 <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4b60      	ldr	r3, [pc, #384]	; (80053b0 <UART_SetConfig+0x4e4>)
 800522e:	fba3 2302 	umull	r2, r3, r3, r2
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	011c      	lsls	r4, r3, #4
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	61b9      	str	r1, [r7, #24]
 8005250:	415b      	adcs	r3, r3
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005258:	4641      	mov	r1, r8
 800525a:	1851      	adds	r1, r2, r1
 800525c:	6139      	str	r1, [r7, #16]
 800525e:	4649      	mov	r1, r9
 8005260:	414b      	adcs	r3, r1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005270:	4659      	mov	r1, fp
 8005272:	00cb      	lsls	r3, r1, #3
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527a:	4651      	mov	r1, sl
 800527c:	00ca      	lsls	r2, r1, #3
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	4603      	mov	r3, r0
 8005284:	4642      	mov	r2, r8
 8005286:	189b      	adds	r3, r3, r2
 8005288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800528c:	464b      	mov	r3, r9
 800528e:	460a      	mov	r2, r1
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052b0:	4649      	mov	r1, r9
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	4641      	mov	r1, r8
 80052b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ba:	4641      	mov	r1, r8
 80052bc:	008a      	lsls	r2, r1, #2
 80052be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052c2:	f7fb f98d 	bl	80005e0 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <UART_SetConfig+0x4e4>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2164      	movs	r1, #100	; 0x64
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3332      	adds	r3, #50	; 0x32
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <UART_SetConfig+0x4e4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ea:	441c      	add	r4, r3
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	673b      	str	r3, [r7, #112]	; 0x70
 80052f4:	677a      	str	r2, [r7, #116]	; 0x74
 80052f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052fa:	4642      	mov	r2, r8
 80052fc:	464b      	mov	r3, r9
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	415b      	adcs	r3, r3
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800530a:	4641      	mov	r1, r8
 800530c:	1851      	adds	r1, r2, r1
 800530e:	6039      	str	r1, [r7, #0]
 8005310:	4649      	mov	r1, r9
 8005312:	414b      	adcs	r3, r1
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005322:	4659      	mov	r1, fp
 8005324:	00cb      	lsls	r3, r1, #3
 8005326:	4651      	mov	r1, sl
 8005328:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532c:	4651      	mov	r1, sl
 800532e:	00ca      	lsls	r2, r1, #3
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	4603      	mov	r3, r0
 8005336:	4642      	mov	r2, r8
 8005338:	189b      	adds	r3, r3, r2
 800533a:	66bb      	str	r3, [r7, #104]	; 0x68
 800533c:	464b      	mov	r3, r9
 800533e:	460a      	mov	r2, r1
 8005340:	eb42 0303 	adc.w	r3, r2, r3
 8005344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	663b      	str	r3, [r7, #96]	; 0x60
 8005350:	667a      	str	r2, [r7, #100]	; 0x64
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800535e:	4649      	mov	r1, r9
 8005360:	008b      	lsls	r3, r1, #2
 8005362:	4641      	mov	r1, r8
 8005364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005368:	4641      	mov	r1, r8
 800536a:	008a      	lsls	r2, r1, #2
 800536c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005370:	f7fb f936 	bl	80005e0 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <UART_SetConfig+0x4e4>)
 800537a:	fba3 1302 	umull	r1, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2164      	movs	r1, #100	; 0x64
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	3332      	adds	r3, #50	; 0x32
 800538c:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <UART_SetConfig+0x4e4>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4422      	add	r2, r4
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	bf00      	nop
 80053a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ae:	bf00      	nop
 80053b0:	51eb851f 	.word	0x51eb851f

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4d0d      	ldr	r5, [pc, #52]	; (80053ec <__libc_init_array+0x38>)
 80053b8:	4c0d      	ldr	r4, [pc, #52]	; (80053f0 <__libc_init_array+0x3c>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	2600      	movs	r6, #0
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	4d0b      	ldr	r5, [pc, #44]	; (80053f4 <__libc_init_array+0x40>)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	; (80053f8 <__libc_init_array+0x44>)
 80053c8:	f000 f820 	bl	800540c <_init>
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	2600      	movs	r6, #0
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	08005444 	.word	0x08005444
 80053f0:	08005444 	.word	0x08005444
 80053f4:	08005444 	.word	0x08005444
 80053f8:	08005448 	.word	0x08005448

080053fc <memset>:
 80053fc:	4402      	add	r2, r0
 80053fe:	4603      	mov	r3, r0
 8005400:	4293      	cmp	r3, r2
 8005402:	d100      	bne.n	8005406 <memset+0xa>
 8005404:	4770      	bx	lr
 8005406:	f803 1b01 	strb.w	r1, [r3], #1
 800540a:	e7f9      	b.n	8005400 <memset+0x4>

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
