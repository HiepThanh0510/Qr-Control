
Qr-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b60  08005b60  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b68  08005b68  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000284  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f780  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239e  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00031bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c88  00000000  00000000  00032958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021df3  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107f7  00000000  00000000  000553d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb7e7  00000000  00000000  00065bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001313b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf0  00000000  00000000  00131404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a18 	.word	0x08005a18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005a18 	.word	0x08005a18

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__gedf2>:
 8000554:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000558:	e006      	b.n	8000568 <__cmpdf2+0x4>
 800055a:	bf00      	nop

0800055c <__ledf2>:
 800055c:	f04f 0c01 	mov.w	ip, #1
 8000560:	e002      	b.n	8000568 <__cmpdf2+0x4>
 8000562:	bf00      	nop

08000564 <__cmpdf2>:
 8000564:	f04f 0c01 	mov.w	ip, #1
 8000568:	f84d cd04 	str.w	ip, [sp, #-4]!
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	bf18      	it	ne
 800057a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057e:	d01b      	beq.n	80005b8 <__cmpdf2+0x54>
 8000580:	b001      	add	sp, #4
 8000582:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000586:	bf0c      	ite	eq
 8000588:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800058c:	ea91 0f03 	teqne	r1, r3
 8000590:	bf02      	ittt	eq
 8000592:	ea90 0f02 	teqeq	r0, r2
 8000596:	2000      	moveq	r0, #0
 8000598:	4770      	bxeq	lr
 800059a:	f110 0f00 	cmn.w	r0, #0
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf58      	it	pl
 80005a4:	4299      	cmppl	r1, r3
 80005a6:	bf08      	it	eq
 80005a8:	4290      	cmpeq	r0, r2
 80005aa:	bf2c      	ite	cs
 80005ac:	17d8      	asrcs	r0, r3, #31
 80005ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005b2:	f040 0001 	orr.w	r0, r0, #1
 80005b6:	4770      	bx	lr
 80005b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c0:	d102      	bne.n	80005c8 <__cmpdf2+0x64>
 80005c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c6:	d107      	bne.n	80005d8 <__cmpdf2+0x74>
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d0:	d1d6      	bne.n	8000580 <__cmpdf2+0x1c>
 80005d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d6:	d0d3      	beq.n	8000580 <__cmpdf2+0x1c>
 80005d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_cdrcmple>:
 80005e0:	4684      	mov	ip, r0
 80005e2:	4610      	mov	r0, r2
 80005e4:	4662      	mov	r2, ip
 80005e6:	468c      	mov	ip, r1
 80005e8:	4619      	mov	r1, r3
 80005ea:	4663      	mov	r3, ip
 80005ec:	e000      	b.n	80005f0 <__aeabi_cdcmpeq>
 80005ee:	bf00      	nop

080005f0 <__aeabi_cdcmpeq>:
 80005f0:	b501      	push	{r0, lr}
 80005f2:	f7ff ffb7 	bl	8000564 <__cmpdf2>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	bf48      	it	mi
 80005fa:	f110 0f00 	cmnmi.w	r0, #0
 80005fe:	bd01      	pop	{r0, pc}

08000600 <__aeabi_dcmpeq>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff fff4 	bl	80005f0 <__aeabi_cdcmpeq>
 8000608:	bf0c      	ite	eq
 800060a:	2001      	moveq	r0, #1
 800060c:	2000      	movne	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmplt>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffea 	bl	80005f0 <__aeabi_cdcmpeq>
 800061c:	bf34      	ite	cc
 800061e:	2001      	movcc	r0, #1
 8000620:	2000      	movcs	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmple>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffe0 	bl	80005f0 <__aeabi_cdcmpeq>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpge>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffce 	bl	80005e0 <__aeabi_cdrcmple>
 8000644:	bf94      	ite	ls
 8000646:	2001      	movls	r0, #1
 8000648:	2000      	movhi	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmpgt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffc4 	bl	80005e0 <__aeabi_cdrcmple>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_d2f>:
 8000664:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000668:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800066c:	bf24      	itt	cs
 800066e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000672:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000676:	d90d      	bls.n	8000694 <__aeabi_d2f+0x30>
 8000678:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800067c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000680:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000684:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000688:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800068c:	bf08      	it	eq
 800068e:	f020 0001 	biceq.w	r0, r0, #1
 8000692:	4770      	bx	lr
 8000694:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000698:	d121      	bne.n	80006de <__aeabi_d2f+0x7a>
 800069a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800069e:	bfbc      	itt	lt
 80006a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006a4:	4770      	bxlt	lr
 80006a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006ae:	f1c2 0218 	rsb	r2, r2, #24
 80006b2:	f1c2 0c20 	rsb	ip, r2, #32
 80006b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80006ba:	fa20 f002 	lsr.w	r0, r0, r2
 80006be:	bf18      	it	ne
 80006c0:	f040 0001 	orrne.w	r0, r0, #1
 80006c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006d0:	ea40 000c 	orr.w	r0, r0, ip
 80006d4:	fa23 f302 	lsr.w	r3, r3, r2
 80006d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006dc:	e7cc      	b.n	8000678 <__aeabi_d2f+0x14>
 80006de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006e2:	d107      	bne.n	80006f4 <__aeabi_d2f+0x90>
 80006e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006e8:	bf1e      	ittt	ne
 80006ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006f2:	4770      	bxne	lr
 80006f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_uldivmod>:
 8000704:	b953      	cbnz	r3, 800071c <__aeabi_uldivmod+0x18>
 8000706:	b94a      	cbnz	r2, 800071c <__aeabi_uldivmod+0x18>
 8000708:	2900      	cmp	r1, #0
 800070a:	bf08      	it	eq
 800070c:	2800      	cmpeq	r0, #0
 800070e:	bf1c      	itt	ne
 8000710:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000714:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000718:	f000 b974 	b.w	8000a04 <__aeabi_idiv0>
 800071c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000724:	f000 f806 	bl	8000734 <__udivmoddi4>
 8000728:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr

08000734 <__udivmoddi4>:
 8000734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000738:	9d08      	ldr	r5, [sp, #32]
 800073a:	4604      	mov	r4, r0
 800073c:	468e      	mov	lr, r1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d14d      	bne.n	80007de <__udivmoddi4+0xaa>
 8000742:	428a      	cmp	r2, r1
 8000744:	4694      	mov	ip, r2
 8000746:	d969      	bls.n	800081c <__udivmoddi4+0xe8>
 8000748:	fab2 f282 	clz	r2, r2
 800074c:	b152      	cbz	r2, 8000764 <__udivmoddi4+0x30>
 800074e:	fa01 f302 	lsl.w	r3, r1, r2
 8000752:	f1c2 0120 	rsb	r1, r2, #32
 8000756:	fa20 f101 	lsr.w	r1, r0, r1
 800075a:	fa0c fc02 	lsl.w	ip, ip, r2
 800075e:	ea41 0e03 	orr.w	lr, r1, r3
 8000762:	4094      	lsls	r4, r2
 8000764:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000768:	0c21      	lsrs	r1, r4, #16
 800076a:	fbbe f6f8 	udiv	r6, lr, r8
 800076e:	fa1f f78c 	uxth.w	r7, ip
 8000772:	fb08 e316 	mls	r3, r8, r6, lr
 8000776:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077a:	fb06 f107 	mul.w	r1, r6, r7
 800077e:	4299      	cmp	r1, r3
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x64>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078a:	f080 811f 	bcs.w	80009cc <__udivmoddi4+0x298>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 811c 	bls.w	80009cc <__udivmoddi4+0x298>
 8000794:	3e02      	subs	r6, #2
 8000796:	4463      	add	r3, ip
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 f707 	mul.w	r7, r0, r7
 80007ac:	42a7      	cmp	r7, r4
 80007ae:	d90a      	bls.n	80007c6 <__udivmoddi4+0x92>
 80007b0:	eb1c 0404 	adds.w	r4, ip, r4
 80007b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007b8:	f080 810a 	bcs.w	80009d0 <__udivmoddi4+0x29c>
 80007bc:	42a7      	cmp	r7, r4
 80007be:	f240 8107 	bls.w	80009d0 <__udivmoddi4+0x29c>
 80007c2:	4464      	add	r4, ip
 80007c4:	3802      	subs	r0, #2
 80007c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ca:	1be4      	subs	r4, r4, r7
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa4>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0xc2>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	f000 80ef 	beq.w	80009c6 <__udivmoddi4+0x292>
 80007e8:	2600      	movs	r6, #0
 80007ea:	e9c5 0100 	strd	r0, r1, [r5]
 80007ee:	4630      	mov	r0, r6
 80007f0:	4631      	mov	r1, r6
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	fab3 f683 	clz	r6, r3
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d14a      	bne.n	8000894 <__udivmoddi4+0x160>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d302      	bcc.n	8000808 <__udivmoddi4+0xd4>
 8000802:	4282      	cmp	r2, r0
 8000804:	f200 80f9 	bhi.w	80009fa <__udivmoddi4+0x2c6>
 8000808:	1a84      	subs	r4, r0, r2
 800080a:	eb61 0303 	sbc.w	r3, r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	469e      	mov	lr, r3
 8000812:	2d00      	cmp	r5, #0
 8000814:	d0e0      	beq.n	80007d8 <__udivmoddi4+0xa4>
 8000816:	e9c5 4e00 	strd	r4, lr, [r5]
 800081a:	e7dd      	b.n	80007d8 <__udivmoddi4+0xa4>
 800081c:	b902      	cbnz	r2, 8000820 <__udivmoddi4+0xec>
 800081e:	deff      	udf	#255	; 0xff
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	2a00      	cmp	r2, #0
 8000826:	f040 8092 	bne.w	800094e <__udivmoddi4+0x21a>
 800082a:	eba1 010c 	sub.w	r1, r1, ip
 800082e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000832:	fa1f fe8c 	uxth.w	lr, ip
 8000836:	2601      	movs	r6, #1
 8000838:	0c20      	lsrs	r0, r4, #16
 800083a:	fbb1 f3f7 	udiv	r3, r1, r7
 800083e:	fb07 1113 	mls	r1, r7, r3, r1
 8000842:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000846:	fb0e f003 	mul.w	r0, lr, r3
 800084a:	4288      	cmp	r0, r1
 800084c:	d908      	bls.n	8000860 <__udivmoddi4+0x12c>
 800084e:	eb1c 0101 	adds.w	r1, ip, r1
 8000852:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000856:	d202      	bcs.n	800085e <__udivmoddi4+0x12a>
 8000858:	4288      	cmp	r0, r1
 800085a:	f200 80cb 	bhi.w	80009f4 <__udivmoddi4+0x2c0>
 800085e:	4643      	mov	r3, r8
 8000860:	1a09      	subs	r1, r1, r0
 8000862:	b2a4      	uxth	r4, r4
 8000864:	fbb1 f0f7 	udiv	r0, r1, r7
 8000868:	fb07 1110 	mls	r1, r7, r0, r1
 800086c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000870:	fb0e fe00 	mul.w	lr, lr, r0
 8000874:	45a6      	cmp	lr, r4
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0x156>
 8000878:	eb1c 0404 	adds.w	r4, ip, r4
 800087c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000880:	d202      	bcs.n	8000888 <__udivmoddi4+0x154>
 8000882:	45a6      	cmp	lr, r4
 8000884:	f200 80bb 	bhi.w	80009fe <__udivmoddi4+0x2ca>
 8000888:	4608      	mov	r0, r1
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000892:	e79c      	b.n	80007ce <__udivmoddi4+0x9a>
 8000894:	f1c6 0720 	rsb	r7, r6, #32
 8000898:	40b3      	lsls	r3, r6
 800089a:	fa22 fc07 	lsr.w	ip, r2, r7
 800089e:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a2:	fa20 f407 	lsr.w	r4, r0, r7
 80008a6:	fa01 f306 	lsl.w	r3, r1, r6
 80008aa:	431c      	orrs	r4, r3
 80008ac:	40f9      	lsrs	r1, r7
 80008ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b2:	fa00 f306 	lsl.w	r3, r0, r6
 80008b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ba:	0c20      	lsrs	r0, r4, #16
 80008bc:	fa1f fe8c 	uxth.w	lr, ip
 80008c0:	fb09 1118 	mls	r1, r9, r8, r1
 80008c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008c8:	fb08 f00e 	mul.w	r0, r8, lr
 80008cc:	4288      	cmp	r0, r1
 80008ce:	fa02 f206 	lsl.w	r2, r2, r6
 80008d2:	d90b      	bls.n	80008ec <__udivmoddi4+0x1b8>
 80008d4:	eb1c 0101 	adds.w	r1, ip, r1
 80008d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008dc:	f080 8088 	bcs.w	80009f0 <__udivmoddi4+0x2bc>
 80008e0:	4288      	cmp	r0, r1
 80008e2:	f240 8085 	bls.w	80009f0 <__udivmoddi4+0x2bc>
 80008e6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ea:	4461      	add	r1, ip
 80008ec:	1a09      	subs	r1, r1, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f4:	fb09 1110 	mls	r1, r9, r0, r1
 80008f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000900:	458e      	cmp	lr, r1
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x1e2>
 8000904:	eb1c 0101 	adds.w	r1, ip, r1
 8000908:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800090c:	d26c      	bcs.n	80009e8 <__udivmoddi4+0x2b4>
 800090e:	458e      	cmp	lr, r1
 8000910:	d96a      	bls.n	80009e8 <__udivmoddi4+0x2b4>
 8000912:	3802      	subs	r0, #2
 8000914:	4461      	add	r1, ip
 8000916:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091a:	fba0 9402 	umull	r9, r4, r0, r2
 800091e:	eba1 010e 	sub.w	r1, r1, lr
 8000922:	42a1      	cmp	r1, r4
 8000924:	46c8      	mov	r8, r9
 8000926:	46a6      	mov	lr, r4
 8000928:	d356      	bcc.n	80009d8 <__udivmoddi4+0x2a4>
 800092a:	d053      	beq.n	80009d4 <__udivmoddi4+0x2a0>
 800092c:	b15d      	cbz	r5, 8000946 <__udivmoddi4+0x212>
 800092e:	ebb3 0208 	subs.w	r2, r3, r8
 8000932:	eb61 010e 	sbc.w	r1, r1, lr
 8000936:	fa01 f707 	lsl.w	r7, r1, r7
 800093a:	fa22 f306 	lsr.w	r3, r2, r6
 800093e:	40f1      	lsrs	r1, r6
 8000940:	431f      	orrs	r7, r3
 8000942:	e9c5 7100 	strd	r7, r1, [r5]
 8000946:	2600      	movs	r6, #0
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	f1c2 0320 	rsb	r3, r2, #32
 8000952:	40d8      	lsrs	r0, r3
 8000954:	fa0c fc02 	lsl.w	ip, ip, r2
 8000958:	fa21 f303 	lsr.w	r3, r1, r3
 800095c:	4091      	lsls	r1, r2
 800095e:	4301      	orrs	r1, r0
 8000960:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	fbb3 f0f7 	udiv	r0, r3, r7
 800096c:	fb07 3610 	mls	r6, r7, r0, r3
 8000970:	0c0b      	lsrs	r3, r1, #16
 8000972:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000976:	fb00 f60e 	mul.w	r6, r0, lr
 800097a:	429e      	cmp	r6, r3
 800097c:	fa04 f402 	lsl.w	r4, r4, r2
 8000980:	d908      	bls.n	8000994 <__udivmoddi4+0x260>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098a:	d22f      	bcs.n	80009ec <__udivmoddi4+0x2b8>
 800098c:	429e      	cmp	r6, r3
 800098e:	d92d      	bls.n	80009ec <__udivmoddi4+0x2b8>
 8000990:	3802      	subs	r0, #2
 8000992:	4463      	add	r3, ip
 8000994:	1b9b      	subs	r3, r3, r6
 8000996:	b289      	uxth	r1, r1
 8000998:	fbb3 f6f7 	udiv	r6, r3, r7
 800099c:	fb07 3316 	mls	r3, r7, r6, r3
 80009a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a4:	fb06 f30e 	mul.w	r3, r6, lr
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d908      	bls.n	80009be <__udivmoddi4+0x28a>
 80009ac:	eb1c 0101 	adds.w	r1, ip, r1
 80009b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b4:	d216      	bcs.n	80009e4 <__udivmoddi4+0x2b0>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d914      	bls.n	80009e4 <__udivmoddi4+0x2b0>
 80009ba:	3e02      	subs	r6, #2
 80009bc:	4461      	add	r1, ip
 80009be:	1ac9      	subs	r1, r1, r3
 80009c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c4:	e738      	b.n	8000838 <__udivmoddi4+0x104>
 80009c6:	462e      	mov	r6, r5
 80009c8:	4628      	mov	r0, r5
 80009ca:	e705      	b.n	80007d8 <__udivmoddi4+0xa4>
 80009cc:	4606      	mov	r6, r0
 80009ce:	e6e3      	b.n	8000798 <__udivmoddi4+0x64>
 80009d0:	4618      	mov	r0, r3
 80009d2:	e6f8      	b.n	80007c6 <__udivmoddi4+0x92>
 80009d4:	454b      	cmp	r3, r9
 80009d6:	d2a9      	bcs.n	800092c <__udivmoddi4+0x1f8>
 80009d8:	ebb9 0802 	subs.w	r8, r9, r2
 80009dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e0:	3801      	subs	r0, #1
 80009e2:	e7a3      	b.n	800092c <__udivmoddi4+0x1f8>
 80009e4:	4646      	mov	r6, r8
 80009e6:	e7ea      	b.n	80009be <__udivmoddi4+0x28a>
 80009e8:	4620      	mov	r0, r4
 80009ea:	e794      	b.n	8000916 <__udivmoddi4+0x1e2>
 80009ec:	4640      	mov	r0, r8
 80009ee:	e7d1      	b.n	8000994 <__udivmoddi4+0x260>
 80009f0:	46d0      	mov	r8, sl
 80009f2:	e77b      	b.n	80008ec <__udivmoddi4+0x1b8>
 80009f4:	3b02      	subs	r3, #2
 80009f6:	4461      	add	r1, ip
 80009f8:	e732      	b.n	8000860 <__udivmoddi4+0x12c>
 80009fa:	4630      	mov	r0, r6
 80009fc:	e709      	b.n	8000812 <__udivmoddi4+0xde>
 80009fe:	4464      	add	r4, ip
 8000a00:	3802      	subs	r0, #2
 8000a02:	e742      	b.n	800088a <__udivmoddi4+0x156>

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b49      	ldr	r3, [pc, #292]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a44      	ldr	r2, [pc, #272]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a3d      	ldr	r2, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a36      	ldr	r2, [pc, #216]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_GPIO_Init+0x14c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210a      	movs	r1, #10
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <MX_GPIO_Init+0x150>)
 8000ab0:	f001 ff2c 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2118      	movs	r1, #24
 8000ab8:	4828      	ldr	r0, [pc, #160]	; (8000b5c <MX_GPIO_Init+0x154>)
 8000aba:	f001 ff27 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000ac4:	4826      	ldr	r0, [pc, #152]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000ac6:	f001 ff21 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000ad0:	4824      	ldr	r0, [pc, #144]	; (8000b64 <MX_GPIO_Init+0x15c>)
 8000ad2:	f001 ff1b 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_GPIO_Init+0x150>)
 8000aee:	f001 fd71 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000af2:	2318      	movs	r3, #24
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4814      	ldr	r0, [pc, #80]	; (8000b5c <MX_GPIO_Init+0x154>)
 8000b0a:	f001 fd63 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000b0e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480e      	ldr	r0, [pc, #56]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000b28:	f001 fd54 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_GPIO_Init+0x15c>)
 8000b46:	f001 fd45 	bl	80025d4 <HAL_GPIO_Init>

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f001 fb1c 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f826 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff ff48 	bl	8000a08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b78:	f000 fed2 	bl	8001920 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b7c:	f000 ff1c 	bl	80019b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b80:	f000 ff90 	bl	8001aa4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b84:	f001 f804 	bl	8001b90 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000b88:	f000 fe72 	bl	8001870 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b8c:	f001 f988 	bl	8001ea0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000b90:	f000 f87e 	bl	8000c90 <SerialInit>
  MotorInit();
 8000b94:	f000 f986 	bl	8000ea4 <MotorInit>

  __HAL_TIM_SetCounter(&htim8, 32768);
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <main+0x4c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SetCounter(&htim1, 32768);
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <main+0x50>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  tProcess = NONE;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <main+0x54>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  //      MotorSetDuty(500, MOTOR_1);
  //      MotorSetDuty(500, MOTOR_2);
  //
  //  MotorSetRun();
  // HAL_UART_Transmit_IT(&huart2, (uint8_t*)data, sizeof(data));
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <main+0x4a>
 8000bb4:	2000025c 	.word	0x2000025c
 8000bb8:	2000013c 	.word	0x2000013c
 8000bbc:	2000011c 	.word	0x2000011c

08000bc0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2230      	movs	r2, #48	; 0x30
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fd74 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <SystemClock_Config+0xc8>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <SystemClock_Config+0xc8>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <SystemClock_Config+0xc8>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <SystemClock_Config+0xcc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <SystemClock_Config+0xcc>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <SystemClock_Config+0xcc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c30:	2304      	movs	r3, #4
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c34:	2348      	movs	r3, #72	; 0x48
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fe7b 	bl	8002940 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c50:	f000 fc06 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c54:	230f      	movs	r3, #15
 8000c56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2102      	movs	r1, #2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 f8dd 	bl	8002e30 <HAL_RCC_ClockConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c7c:	f000 fbf0 	bl	8001460 <Error_Handler>
  }
}
 8000c80:	bf00      	nop
 8000c82:	3750      	adds	r7, #80	; 0x50
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8000c94:	2212      	movs	r2, #18
 8000c96:	4903      	ldr	r1, [pc, #12]	; (8000ca4 <SerialInit+0x14>)
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <SerialInit+0x18>)
 8000c9a:	f003 fd38 	bl	800470e <HAL_UART_Receive_IT>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000094 	.word	0x20000094
 8000ca8:	200002a4 	.word	0x200002a4

08000cac <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8000cb0:	2212      	movs	r2, #18
 8000cb2:	4903      	ldr	r1, [pc, #12]	; (8000cc0 <SerialAcceptReceive+0x14>)
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <SerialAcceptReceive+0x18>)
 8000cb6:	f003 fd2a 	bl	800470e <HAL_UART_Receive_IT>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000094 	.word	0x20000094
 8000cc4:	200002a4 	.word	0x200002a4

08000cc8 <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6178      	str	r0, [r7, #20]
  if (huart->Instance == huart2.Instance)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_UART_RxCpltCallback+0xdc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d15f      	bne.n	8000d9c <HAL_UART_RxCpltCallback+0xd4>
    //	  MotorSetDuty(0, MOTOR_2);
    //	  MotorSetDuty(0, MOTOR_1);
//	  __HAL_TIM_SetCounter(&htim8, 32768);
//	  __HAL_TIM_SetCounter(&htim1, 32768);

	  __HAL_TIM_SetCounter(&htim1, 32768);
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_UART_RxCpltCallback+0xe0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SetCounter(&htim8, 32768);
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <HAL_UART_RxCpltCallback+0xe4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
	    tProcess = NONE;
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <HAL_UART_RxCpltCallback+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	    PIDReset(&tPID_2);
 8000cf6:	482f      	ldr	r0, [pc, #188]	; (8000db4 <HAL_UART_RxCpltCallback+0xec>)
 8000cf8:	f000 fc68 	bl	80015cc <PIDReset>
	    PIDReset(&tPID_1);
 8000cfc:	482e      	ldr	r0, [pc, #184]	; (8000db8 <HAL_UART_RxCpltCallback+0xf0>)
 8000cfe:	f000 fc65 	bl	80015cc <PIDReset>

	    if(!strcmp(dataBuffer, "1111,1111,1111,1,1")){
 8000d02:	492e      	ldr	r1, [pc, #184]	; (8000dbc <HAL_UART_RxCpltCallback+0xf4>)
 8000d04:	482e      	ldr	r0, [pc, #184]	; (8000dc0 <HAL_UART_RxCpltCallback+0xf8>)
 8000d06:	f7ff fa5f 	bl	80001c8 <strcmp>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d107      	bne.n	8000d20 <HAL_UART_RxCpltCallback+0x58>
	    	HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	2205      	movs	r2, #5
 8000d16:	492b      	ldr	r1, [pc, #172]	; (8000dc4 <HAL_UART_RxCpltCallback+0xfc>)
 8000d18:	4822      	ldr	r0, [pc, #136]	; (8000da4 <HAL_UART_RxCpltCallback+0xdc>)
 8000d1a:	f003 fc66 	bl	80045ea <HAL_UART_Transmit>
 8000d1e:	e03b      	b.n	8000d98 <HAL_UART_RxCpltCallback+0xd0>
	    } else {
	    	 HAL_UART_Transmit(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA, 1000);
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	2212      	movs	r2, #18
 8000d26:	4926      	ldr	r1, [pc, #152]	; (8000dc0 <HAL_UART_RxCpltCallback+0xf8>)
 8000d28:	481e      	ldr	r0, [pc, #120]	; (8000da4 <HAL_UART_RxCpltCallback+0xdc>)
 8000d2a:	f003 fc5e 	bl	80045ea <HAL_UART_Transmit>
	    	    arrData1 = ArrProcess(dataBuffer);
 8000d2e:	4c26      	ldr	r4, [pc, #152]	; (8000dc8 <HAL_UART_RxCpltCallback+0x100>)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4923      	ldr	r1, [pc, #140]	; (8000dc0 <HAL_UART_RxCpltCallback+0xf8>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 f973 	bl	8002020 <ArrProcess>
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	463a      	mov	r2, r7
 8000d3e:	6810      	ldr	r0, [r2, #0]
 8000d40:	6851      	ldr	r1, [r2, #4]
 8000d42:	c303      	stmia	r3!, {r0, r1}
 8000d44:	8912      	ldrh	r2, [r2, #8]
 8000d46:	801a      	strh	r2, [r3, #0]
	    	    MotorTrapzoidalInit(&tProfile, arrData1.pos1, arrData1.vel1, arrData1.acc1);
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_UART_RxCpltCallback+0x100>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_UART_RxCpltCallback+0x100>)
 8000d56:	885b      	ldrh	r3, [r3, #2]
 8000d58:	ee07 3a10 	vmov	s14, r3
 8000d5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_UART_RxCpltCallback+0x100>)
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	ee06 3a90 	vmov	s13, r3
 8000d68:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000d6c:	eeb0 1a66 	vmov.f32	s2, s13
 8000d70:	eef0 0a47 	vmov.f32	s1, s14
 8000d74:	eeb0 0a67 	vmov.f32	s0, s15
 8000d78:	4814      	ldr	r0, [pc, #80]	; (8000dcc <HAL_UART_RxCpltCallback+0x104>)
 8000d7a:	f000 fb76 	bl	800146a <MotorTrapzoidalInit>
	    	    dir1 = arrData1.dir1;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_UART_RxCpltCallback+0x100>)
 8000d80:	88db      	ldrh	r3, [r3, #6]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_UART_RxCpltCallback+0x108>)
 8000d86:	701a      	strb	r2, [r3, #0]
	    	    dir2 = arrData1.dir2;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_UART_RxCpltCallback+0x100>)
 8000d8a:	891b      	ldrh	r3, [r3, #8]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_UART_RxCpltCallback+0x10c>)
 8000d90:	701a      	strb	r2, [r3, #0]
	    	    tProcess = RUN_TEST;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_UART_RxCpltCallback+0xe8>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]

	    }
	    SerialAcceptReceive();
 8000d98:	f7ff ff88 	bl	8000cac <SerialAcceptReceive>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	200002a4 	.word	0x200002a4
 8000da8:	2000013c 	.word	0x2000013c
 8000dac:	2000025c 	.word	0x2000025c
 8000db0:	2000011c 	.word	0x2000011c
 8000db4:	200000d4 	.word	0x200000d4
 8000db8:	200000c0 	.word	0x200000c0
 8000dbc:	08005a30 	.word	0x08005a30
 8000dc0:	20000094 	.word	0x20000094
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000120 	.word	0x20000120
 8000dcc:	200000e8 	.word	0x200000e8
 8000dd0:	2000012a 	.word	0x2000012a
 8000dd4:	2000012b 	.word	0x2000012b

08000dd8 <Motor1Forward>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}

void Motor1Forward()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <Motor1Forward+0x20>)
 8000de4:	f001 fd92 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <Motor1Forward+0x20>)
 8000df0:	f001 fd8c 	bl	800290c <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000

08000dfc <Motor1Backward>:

void Motor1Backward()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <Motor1Backward+0x20>)
 8000e08:	f001 fd80 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <Motor1Backward+0x20>)
 8000e14:	f001 fd7a 	bl	800290c <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000

08000e20 <Motor2Forward>:

void Motor2Forward()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2102      	movs	r1, #2
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <Motor2Forward+0x1c>)
 8000e2a:	f001 fd6f 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2108      	movs	r1, #8
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <Motor2Forward+0x1c>)
 8000e34:	f001 fd6a 	bl	800290c <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40020800 	.word	0x40020800

08000e40 <Motor2Backward>:

void Motor2Backward()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2102      	movs	r1, #2
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <Motor2Backward+0x1c>)
 8000e4a:	f001 fd5f 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2108      	movs	r1, #8
 8000e52:	4802      	ldr	r0, [pc, #8]	; (8000e5c <Motor2Backward+0x1c>)
 8000e54:	f001 fd5a 	bl	800290c <HAL_GPIO_WritePin>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40020800 	.word	0x40020800

08000e60 <MotorSetDuty>:

void MotorSetDuty(uint16_t nDuty, uint8_t channel)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	80fb      	strh	r3, [r7, #6]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	717b      	strb	r3, [r7, #5]
  if (channel == MOTOR_1)
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d104      	bne.n	8000e80 <MotorSetDuty+0x20>
  {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MotorSetDuty+0x3c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else if (channel == MOTOR_2)
  {
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, nDuty);
  }
}
 8000e7e:	e006      	b.n	8000e8e <MotorSetDuty+0x2e>
  else if (channel == MOTOR_2)
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d103      	bne.n	8000e8e <MotorSetDuty+0x2e>
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, nDuty);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MotorSetDuty+0x40>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200001cc 	.word	0x200001cc
 8000ea0:	20000214 	.word	0x20000214

08000ea4 <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8000ea8:	481b      	ldr	r0, [pc, #108]	; (8000f18 <MotorInit+0x74>)
 8000eaa:	f002 fa31 	bl	8003310 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	481a      	ldr	r0, [pc, #104]	; (8000f1c <MotorInit+0x78>)
 8000eb2:	f002 faf7 	bl	80034a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4819      	ldr	r0, [pc, #100]	; (8000f20 <MotorInit+0x7c>)
 8000eba:	f002 faf3 	bl	80034a4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4818      	ldr	r0, [pc, #96]	; (8000f24 <MotorInit+0x80>)
 8000ec2:	f002 fc5d 	bl	8003780 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4816      	ldr	r0, [pc, #88]	; (8000f24 <MotorInit+0x80>)
 8000eca:	f002 fc59 	bl	8003780 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <MotorInit+0x84>)
 8000ed2:	f002 fc55 	bl	8003780 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MotorInit+0x84>)
 8000eda:	f002 fc51 	bl	8003780 <HAL_TIM_Encoder_Start>
  PIDInit(&tPID_1, 3.5, 1.5, 0.2);
 8000ede:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8000f2c <MotorInit+0x88>
 8000ee2:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000ee6:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <MotorInit+0x8c>)
 8000eec:	f000 fb86 	bl	80015fc <PIDInit>
  PIDInit(&tPID_2, 3.5, 1.5, 0.2);
 8000ef0:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8000f2c <MotorInit+0x88>
 8000ef4:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000ef8:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MotorInit+0x90>)
 8000efe:	f000 fb7d 	bl	80015fc <PIDInit>

  MotorSetDuty(0, MOTOR_1);
 8000f02:	2101      	movs	r1, #1
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff ffab 	bl	8000e60 <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2);
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff ffa7 	bl	8000e60 <MotorSetDuty>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000184 	.word	0x20000184
 8000f1c:	200001cc 	.word	0x200001cc
 8000f20:	20000214 	.word	0x20000214
 8000f24:	2000013c 	.word	0x2000013c
 8000f28:	2000025c 	.word	0x2000025c
 8000f2c:	3e4ccccd 	.word	0x3e4ccccd
 8000f30:	200000c0 	.word	0x200000c0
 8000f34:	200000d4 	.word	0x200000d4

08000f38 <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse, uint8_t motor)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  if (motor == MOTOR_1)
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d105      	bne.n	8000f56 <MotorGetPulse+0x1e>
  {
    *nPulse = __HAL_TIM_GetCounter(&htim8);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MotorGetPulse+0x3c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
  }
  else if (motor == MOTOR_2)
  {
    *nPulse = __HAL_TIM_GetCounter(&htim1);
  }
}
 8000f54:	e007      	b.n	8000f66 <MotorGetPulse+0x2e>
  else if (motor == MOTOR_2)
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d104      	bne.n	8000f66 <MotorGetPulse+0x2e>
    *nPulse = __HAL_TIM_GetCounter(&htim1);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MotorGetPulse+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000025c 	.word	0x2000025c
 8000f78:	2000013c 	.word	0x2000013c

08000f7c <HAL_TIM_PeriodElapsedCallback>:

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim2.Instance)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d112      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x3a>
  {
    switch (tProcess)
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d010      	beq.n	8000fba <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d000      	beq.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x22>
      break;
    case RUN_TEST:
      MotorMovePos(&tProfile, &tPID_1, &tPID_2, dir1, dir2);
    }
  }
}
 8000f9c:	e00e      	b.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>
      MotorMovePos(&tProfile, &tPID_1, &tPID_2, dir1, dir2);
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fac:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fb0:	f000 f816 	bl	8000fe0 <MotorMovePos>
}
 8000fb4:	e002      	b.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>
  }
 8000fb6:	bf00      	nop
 8000fb8:	e000      	b.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>
      break;
 8000fba:	bf00      	nop
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000184 	.word	0x20000184
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	2000012a 	.word	0x2000012a
 8000fd0:	2000012b 	.word	0x2000012b
 8000fd4:	200000d4 	.word	0x200000d4
 8000fd8:	200000c0 	.word	0x200000c0
 8000fdc:	200000e8 	.word	0x200000e8

08000fe0 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl1, PID_CONTROL_t *tPIDControl2, uint8_t dir1, uint8_t dir2)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	70fb      	strb	r3, [r7, #3]
  int32_t g_nDutyCycle_1, g_nDutyCycle_2;
  uint32_t g_nActPulse_1_tmp, g_nActPulse_2_tmp;

  MotorGetPulse(&nPulse1, MOTOR_1); // get encoder counter
 8000fee:	2101      	movs	r1, #1
 8000ff0:	488d      	ldr	r0, [pc, #564]	; (8001228 <MotorMovePos+0x248>)
 8000ff2:	f7ff ffa1 	bl	8000f38 <MotorGetPulse>
  MotorGetPulse(&nPulse2, MOTOR_2); // get encoder counter
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	488c      	ldr	r0, [pc, #560]	; (800122c <MotorMovePos+0x24c>)
 8000ffa:	f7ff ff9d 	bl	8000f38 <MotorGetPulse>
  if (dir1 == HEAD)
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d11c      	bne.n	800103e <MotorMovePos+0x5e>
  {
	  if((nPulse1 < 32768) && (tProfile->nTime < 0.3)){
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <MotorMovePos+0x248>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800100c:	d210      	bcs.n	8001030 <MotorMovePos+0x50>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa46 	bl	80004a4 <__aeabi_f2d>
 8001018:	a381      	add	r3, pc, #516	; (adr r3, 8001220 <MotorMovePos+0x240>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faf9 	bl	8000614 <__aeabi_dcmplt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <MotorMovePos+0x50>

		  nPulse1 = 32768;
 8001028:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <MotorMovePos+0x248>)
 800102a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800102e:	601a      	str	r2, [r3, #0]
	  }
    g_nActPulse_1 = nPulse1 - 32768;
 8001030:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <MotorMovePos+0x248>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001038:	4a7d      	ldr	r2, [pc, #500]	; (8001230 <MotorMovePos+0x250>)
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e01b      	b.n	8001076 <MotorMovePos+0x96>
  }
  else
  {
	  if((nPulse1 > 32768) && (tProfile->nTime < 0.3)){
 800103e:	4b7a      	ldr	r3, [pc, #488]	; (8001228 <MotorMovePos+0x248>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001046:	d910      	bls.n	800106a <MotorMovePos+0x8a>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa29 	bl	80004a4 <__aeabi_f2d>
 8001052:	a373      	add	r3, pc, #460	; (adr r3, 8001220 <MotorMovePos+0x240>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fadc 	bl	8000614 <__aeabi_dcmplt>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <MotorMovePos+0x8a>
		  nPulse1 = 32768;
 8001062:	4b71      	ldr	r3, [pc, #452]	; (8001228 <MotorMovePos+0x248>)
 8001064:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001068:	601a      	str	r2, [r3, #0]
	  }
    g_nActPulse_1 = 32768 - nPulse1;
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <MotorMovePos+0x248>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8001072:	4a6f      	ldr	r2, [pc, #444]	; (8001230 <MotorMovePos+0x250>)
 8001074:	6013      	str	r3, [r2, #0]
  }

  if (dir2 == HEAD)
 8001076:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800107a:	2b01      	cmp	r3, #1
 800107c:	d11c      	bne.n	80010b8 <MotorMovePos+0xd8>
  {
	  if((nPulse2 < 32768) && (tProfile->nTime < 0.3)){
 800107e:	4b6b      	ldr	r3, [pc, #428]	; (800122c <MotorMovePos+0x24c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001086:	d210      	bcs.n	80010aa <MotorMovePos+0xca>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa09 	bl	80004a4 <__aeabi_f2d>
 8001092:	a363      	add	r3, pc, #396	; (adr r3, 8001220 <MotorMovePos+0x240>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fabc 	bl	8000614 <__aeabi_dcmplt>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <MotorMovePos+0xca>
		  nPulse2 = 32768;
 80010a2:	4b62      	ldr	r3, [pc, #392]	; (800122c <MotorMovePos+0x24c>)
 80010a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a8:	601a      	str	r2, [r3, #0]
	  }
	  g_nActPulse_2 = nPulse2 - 32768;
 80010aa:	4b60      	ldr	r3, [pc, #384]	; (800122c <MotorMovePos+0x24c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80010b2:	4a60      	ldr	r2, [pc, #384]	; (8001234 <MotorMovePos+0x254>)
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01b      	b.n	80010f0 <MotorMovePos+0x110>
  }
  else
  {
	  if((nPulse2 > 32768) && (tProfile->nTime < 0.3)){
 80010b8:	4b5c      	ldr	r3, [pc, #368]	; (800122c <MotorMovePos+0x24c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010c0:	d910      	bls.n	80010e4 <MotorMovePos+0x104>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f9ec 	bl	80004a4 <__aeabi_f2d>
 80010cc:	a354      	add	r3, pc, #336	; (adr r3, 8001220 <MotorMovePos+0x240>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa9f 	bl	8000614 <__aeabi_dcmplt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <MotorMovePos+0x104>
		  nPulse2 = 32768;
 80010dc:	4b53      	ldr	r3, [pc, #332]	; (800122c <MotorMovePos+0x24c>)
 80010de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010e2:	601a      	str	r2, [r3, #0]
	  }
    g_nActPulse_2 = 32768 - nPulse2;
 80010e4:	4b51      	ldr	r3, [pc, #324]	; (800122c <MotorMovePos+0x24c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <MotorMovePos+0x254>)
 80010ee:	6013      	str	r3, [r2, #0]
  }

  g_nActPulse_1_tmp = g_nActPulse_1;
 80010f0:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MotorMovePos+0x250>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	623b      	str	r3, [r7, #32]
  g_nActPulse_2_tmp = g_nActPulse_2;
 80010f6:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <MotorMovePos+0x254>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61fb      	str	r3, [r7, #28]





  float dPosTemp = 0;
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800110e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d820      	bhi.n	800115a <MotorMovePos+0x17a>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	ed93 7a03 	vldr	s14, [r3, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edd3 7a03 	vldr	s15, [r3, #12]
 8001144:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <MotorMovePos+0x258>)
 8001154:	edc3 7a00 	vstr	s15, [r3]
 8001158:	e073      	b.n	8001242 <MotorMovePos+0x262>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d817      	bhi.n	80011a0 <MotorMovePos+0x1c0>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	ed93 7a04 	vldr	s14, [r3, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800117c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a05 	vldr	s15, [r3, #20]
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_dCmdVel = tProfile->dA2;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a27      	ldr	r2, [pc, #156]	; (8001238 <MotorMovePos+0x258>)
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e050      	b.n	8001242 <MotorMovePos+0x262>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d842      	bhi.n	800123c <MotorMovePos+0x25c>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	edd3 6a07 	vldr	s13, [r3, #28]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001200:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800120a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	edd3 7a07 	vldr	s15, [r3, #28]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MotorMovePos+0x258>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
 800121e:	e010      	b.n	8001242 <MotorMovePos+0x262>
 8001220:	33333333 	.word	0x33333333
 8001224:	3fd33333 	.word	0x3fd33333
 8001228:	200000b8 	.word	0x200000b8
 800122c:	200000bc 	.word	0x200000bc
 8001230:	200000a8 	.word	0x200000a8
 8001234:	200000ac 	.word	0x200000ac
 8001238:	200000b4 	.word	0x200000b4
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  }

  // Control PID
  g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8001242:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124a:	ee17 3a90 	vmov	r3, s15
 800124e:	b29b      	uxth	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f000 febf 	bl	8001fd4 <ConvertDegToPulse>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <MotorMovePos+0x450>)
 800125c:	601a      	str	r2, [r3, #0]

  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_nCmdPulse, g_nActPulse_1_tmp, SAMPLING_TIME);
 800125e:	4b74      	ldr	r3, [pc, #464]	; (8001430 <MotorMovePos+0x450>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	ee07 3a10 	vmov	s14, r3
 8001270:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001274:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8001434 <MotorMovePos+0x454>
 8001278:	eef0 0a47 	vmov.f32	s1, s14
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f000 f9d5 	bl	8001630 <PIDCompute>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	ee17 3a90 	vmov	r3, s15
 8001292:	b21b      	sxth	r3, r3
 8001294:	61bb      	str	r3, [r7, #24]
  g_nDutyCycle_2 = (int16_t)PIDCompute(tPIDControl2, g_nCmdPulse, g_nActPulse_2_tmp, SAMPLING_TIME);
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <MotorMovePos+0x450>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	ee07 3a10 	vmov	s14, r3
 80012a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80012ac:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8001434 <MotorMovePos+0x454>
 80012b0:	eef0 0a47 	vmov.f32	s1, s14
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9b9 	bl	8001630 <PIDCompute>
 80012be:	eef0 7a40 	vmov.f32	s15, s0
 80012c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c6:	ee17 3a90 	vmov	r3, s15
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	617b      	str	r3, [r7, #20]

  dutyCycle_global_1 = g_nDutyCycle_1;
 80012ce:	4a5a      	ldr	r2, [pc, #360]	; (8001438 <MotorMovePos+0x458>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6013      	str	r3, [r2, #0]
  dutyCycle_global_2 = g_nDutyCycle_2;
 80012d4:	4a59      	ldr	r2, [pc, #356]	; (800143c <MotorMovePos+0x45c>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	6013      	str	r3, [r2, #0]
  if (g_nDutyCycle_1 >= 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db11      	blt.n	8001304 <MotorMovePos+0x324>
  {
    if (dir1 == HEAD)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <MotorMovePos+0x30c>
    {
      Motor1Forward();
 80012e6:	f7ff fd77 	bl	8000dd8 <Motor1Forward>
 80012ea:	e001      	b.n	80012f0 <MotorMovePos+0x310>
    }
    else
    {
      Motor1Backward();
 80012ec:	f7ff fd86 	bl	8000dfc <Motor1Backward>
    }
    MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bfb8      	it	lt
 80012f6:	425b      	neglt	r3, r3
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fdaf 	bl	8000e60 <MotorSetDuty>
 8001302:	e013      	b.n	800132c <MotorMovePos+0x34c>
  }
  else if (g_nDutyCycle_1 < 0)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	da10      	bge.n	800132c <MotorMovePos+0x34c>
  {

    if (dir1 == HEAD)
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d102      	bne.n	8001316 <MotorMovePos+0x336>
    {
      Motor1Backward();
 8001310:	f7ff fd74 	bl	8000dfc <Motor1Backward>
 8001314:	e001      	b.n	800131a <MotorMovePos+0x33a>
    }
    else
    {
      Motor1Forward();
 8001316:	f7ff fd5f 	bl	8000dd8 <Motor1Forward>
    }
    MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfb8      	it	lt
 8001320:	425b      	neglt	r3, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd9a 	bl	8000e60 <MotorSetDuty>
  }

  if (g_nDutyCycle_2 >= 0)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db12      	blt.n	8001358 <MotorMovePos+0x378>
  {
    if (dir2 == HEAD)
 8001332:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <MotorMovePos+0x360>
    {
      Motor2Forward();
 800133a:	f7ff fd71 	bl	8000e20 <Motor2Forward>
 800133e:	e001      	b.n	8001344 <MotorMovePos+0x364>
    }
    else
    {
      Motor2Backward();
 8001340:	f7ff fd7e 	bl	8000e40 <Motor2Backward>
    }
    MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	bfb8      	it	lt
 800134a:	425b      	neglt	r3, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	2102      	movs	r1, #2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd85 	bl	8000e60 <MotorSetDuty>
 8001356:	e014      	b.n	8001382 <MotorMovePos+0x3a2>
  }
  else if (g_nDutyCycle_2 < 0)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da11      	bge.n	8001382 <MotorMovePos+0x3a2>
  {

    if (dir2 == HEAD)
 800135e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <MotorMovePos+0x38c>
    {
      Motor2Backward();
 8001366:	f7ff fd6b 	bl	8000e40 <Motor2Backward>
 800136a:	e001      	b.n	8001370 <MotorMovePos+0x390>
    }
    else
    {
      Motor2Forward();
 800136c:	f7ff fd58 	bl	8000e20 <Motor2Forward>
    }
    MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	425b      	neglt	r3, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fd6f 	bl	8000e60 <MotorSetDuty>
  }

  if (tProfile->nTime > tProfile->dMidStep3)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800138e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	dd30      	ble.n	80013fa <MotorMovePos+0x41a>
  {
    __HAL_TIM_SetCounter(&htim1, 32768);
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MotorMovePos+0x460>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim8, 32768);
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MotorMovePos+0x464>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    g_nDutyCycle_1 = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
    g_nDutyCycle_2 = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
    g_dCmdVel = 0;
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <MotorMovePos+0x468>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MotorMovePos+0x46c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(0, MOTOR_1);
 80013d0:	2101      	movs	r1, #1
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fd44 	bl	8000e60 <MotorSetDuty>
    MotorSetDuty(0, MOTOR_2);
 80013d8:	2102      	movs	r1, #2
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fd40 	bl	8000e60 <MotorSetDuty>
    PIDReset(&tPID_2);
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <MotorMovePos+0x470>)
 80013e2:	f000 f8f3 	bl	80015cc <PIDReset>
    PIDReset(&tPID_1);
 80013e6:	481b      	ldr	r0, [pc, #108]	; (8001454 <MotorMovePos+0x474>)
 80013e8:	f000 f8f0 	bl	80015cc <PIDReset>
    HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	2205      	movs	r2, #5
 80013f2:	4919      	ldr	r1, [pc, #100]	; (8001458 <MotorMovePos+0x478>)
 80013f4:	4819      	ldr	r0, [pc, #100]	; (800145c <MotorMovePos+0x47c>)
 80013f6:	f003 f8f8 	bl	80045ea <HAL_UART_Transmit>
  }
  tProfile->nTime += SAMPLING_TIME;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f850 	bl	80004a4 <__aeabi_f2d>
 8001404:	a308      	add	r3, pc, #32	; (adr r3, 8001428 <MotorMovePos+0x448>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe feed 	bl	80001e8 <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff f925 	bl	8000664 <__aeabi_d2f>
 800141a:	4602      	mov	r2, r0
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	47ae147b 	.word	0x47ae147b
 800142c:	3f747ae1 	.word	0x3f747ae1
 8001430:	200000b0 	.word	0x200000b0
 8001434:	3ba3d70a 	.word	0x3ba3d70a
 8001438:	2000012c 	.word	0x2000012c
 800143c:	20000130 	.word	0x20000130
 8001440:	2000013c 	.word	0x2000013c
 8001444:	2000025c 	.word	0x2000025c
 8001448:	200000b4 	.word	0x200000b4
 800144c:	2000011c 	.word	0x2000011c
 8001450:	200000d4 	.word	0x200000d4
 8001454:	200000c0 	.word	0x200000c0
 8001458:	20000000 	.word	0x20000000
 800145c:	200002a4 	.word	0x200002a4

08001460 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>

0800146a <MotorTrapzoidalInit>:
 */

#include "motor.h"

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	ed87 0a02 	vstr	s0, [r7, #8]
 8001476:	edc7 0a01 	vstr	s1, [r7, #4]
 800147a:	ed87 1a00 	vstr	s2, [r7]
	tProfile->dAccelMax = maxAcc;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80014b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80014fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	edd3 7a01 	vldr	s15, [r3, #4]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	edd3 7a02 	vldr	s15, [r3, #8]
 8001518:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800151c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	edd3 7a02 	vldr	s15, [r3, #8]
 8001526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	ed93 7a01 	vldr	s14, [r3, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	edd3 7a01 	vldr	s15, [r3, #4]
 800154e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001552:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	edd3 7a01 	vldr	s15, [r3, #4]
 800155c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 6a00 	vldr	s13, [r3]
 8001566:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	edd3 6a01 	vldr	s13, [r3, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	ed93 7a01 	vldr	s14, [r3, #4]
 8001596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
//	tProfile->Direct = direct;
	tProfile->nTime = 0;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <PIDReset+0x2c>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	20000134 	.word	0x20000134

080015fc <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	ed87 0a02 	vstr	s0, [r7, #8]
 8001608:	edc7 0a01 	vstr	s1, [r7, #4]
 800160c:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff ffdb 	bl	80015cc <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	609a      	str	r2, [r3, #8]

}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	ed87 0a02 	vstr	s0, [r7, #8]
 800163c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001640:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001644:	ed97 7a02 	vldr	s14, [r7, #8]
 8001648:	edd7 7a01 	vldr	s15, [r7, #4]
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <PIDCompute+0xe0>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl->dKp * g_dPIDError;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <PIDCompute+0xe0>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a07 	vstr	s15, [r7, #28]
    PID_Ctrl->dIntergral += g_dPIDError;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <PIDCompute+0xe0>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	ed93 7a01 	vldr	s14, [r3, #4]
 8001698:	edd7 7a00 	vldr	s15, [r7]
 800169c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	edc7 7a06 	vstr	s15, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <PIDCompute+0xe0>)
 80016be:	edd3 6a00 	vldr	s13, [r3]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80016c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016d0:	ed97 7a00 	vldr	s14, [r7]
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	edc7 7a05 	vstr	s15, [r7, #20]
    dPIDResult = dP + dI + dD;
 80016dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80016e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	edc7 7a04 	vstr	s15, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <PIDCompute+0xe0>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	ee07 3a90 	vmov	s15, r3
}
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	3724      	adds	r7, #36	; 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000134 	.word	0x20000134

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_MspInit+0x4c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <HAL_MspInit+0x4c>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_MspInit+0x4c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_MspInit+0x4c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_MspInit+0x4c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b0:	f000 fd4c 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f002 f86d 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000184 	.word	0x20000184

080017cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART2_IRQHandler+0x10>)
 80017d2:	f002 ffcd 	bl	8004770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002a4 	.word	0x200002a4

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f003 ff1a 	bl	8005648 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20020000 	.word	0x20020000
 8001840:	00000400 	.word	0x00000400
 8001844:	20000138 	.word	0x20000138
 8001848:	20000300 	.word	0x20000300

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f003 ff1c 	bl	80056bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_TIM1_Init+0xa8>)
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <MX_TIM1_Init+0xac>)
 8001890:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_TIM1_Init+0xa8>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_TIM1_Init+0xa8>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_TIM1_Init+0xa8>)
 80018a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_TIM1_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM1_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_TIM1_Init+0xa8>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018b8:	2303      	movs	r3, #3
 80018ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018c0:	2301      	movs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018c8:	230a      	movs	r3, #10
 80018ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80018d8:	230a      	movs	r3, #10
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM1_Init+0xa8>)
 80018e4:	f001 fea6 	bl	8003634 <HAL_TIM_Encoder_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018ee:	f7ff fdb7 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM1_Init+0xa8>)
 8001900:	f002 fd96 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800190a:	f7ff fda9 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	; 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000013c 	.word	0x2000013c
 800191c:	40010000 	.word	0x40010000

08001920 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <MX_TIM2_Init+0x94>)
 800193e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001946:	2263      	movs	r2, #99	; 0x63
 8001948:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_TIM2_Init+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001952:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_TIM2_Init+0x94>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001966:	f001 fc83 	bl	8003270 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001970:	f7ff fd76 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <MX_TIM2_Init+0x94>)
 8001982:	f002 f955 	bl	8003c30 <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800198c:	f7ff fd68 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_TIM2_Init+0x94>)
 800199e:	f002 fd47 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019a8:	f7ff fd5a 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000184 	.word	0x20000184

080019b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <MX_TIM3_Init+0xe4>)
 80019ea:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <MX_TIM3_Init+0xe8>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <MX_TIM3_Init+0xe4>)
 80019f0:	2247      	movs	r2, #71	; 0x47
 80019f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <MX_TIM3_Init+0xe4>)
 80019f6:	2260      	movs	r2, #96	; 0x60
 80019f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <MX_TIM3_Init+0xe4>)
 80019fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0e:	4823      	ldr	r0, [pc, #140]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a10:	f001 fc2e 	bl	8003270 <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a1a:	f7ff fd21 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	481c      	ldr	r0, [pc, #112]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a2c:	f002 f900 	bl	8003c30 <HAL_TIM_ConfigClockSource>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a36:	f7ff fd13 	bl	8001460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a3c:	f001 fcd8 	bl	80033f0 <HAL_TIM_PWM_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a46:	f7ff fd0b 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	4619      	mov	r1, r3
 8001a58:	4810      	ldr	r0, [pc, #64]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a5a:	f002 fce9 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a64:	f7ff fcfc 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a68:	2360      	movs	r3, #96	; 0x60
 8001a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a80:	f002 f814 	bl	8003aac <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a8a:	f7ff fce9 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <MX_TIM3_Init+0xe4>)
 8001a90:	f000 f9a6 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001a94:	bf00      	nop
 8001a96:	3738      	adds	r7, #56	; 0x38
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200001cc 	.word	0x200001cc
 8001aa0:	40000400 	.word	0x40000400

08001aa4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <MX_TIM5_Init+0xe8>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001adc:	2247      	movs	r2, #71	; 0x47
 8001ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001ae2:	2260      	movs	r2, #96	; 0x60
 8001ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001afa:	4823      	ldr	r0, [pc, #140]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001afc:	f001 fbb8 	bl	8003270 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001b06:	f7ff fcab 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b14:	4619      	mov	r1, r3
 8001b16:	481c      	ldr	r0, [pc, #112]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001b18:	f002 f88a 	bl	8003c30 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001b22:	f7ff fc9d 	bl	8001460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001b28:	f001 fc62 	bl	80033f0 <HAL_TIM_PWM_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001b32:	f7ff fc95 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	4619      	mov	r1, r3
 8001b44:	4810      	ldr	r0, [pc, #64]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001b46:	f002 fc73 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001b50:	f7ff fc86 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b54:	2360      	movs	r3, #96	; 0x60
 8001b56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2204      	movs	r2, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001b6c:	f001 ff9e 	bl	8003aac <HAL_TIM_PWM_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001b76:	f7ff fc73 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <MX_TIM5_Init+0xe4>)
 8001b7c:	f000 f930 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001b80:	bf00      	nop
 8001b82:	3738      	adds	r7, #56	; 0x38
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000214 	.word	0x20000214
 8001b8c:	40000c00 	.word	0x40000c00

08001b90 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fd8c 	bl	80056bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <MX_TIM8_Init+0xac>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001be8:	230a      	movs	r3, #10
 8001bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001c04:	f001 fd16 	bl	8003634 <HAL_TIM_Encoder_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001c0e:	f7ff fc27 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_TIM8_Init+0xa8>)
 8001c20:	f002 fc06 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001c2a:	f7ff fc19 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3730      	adds	r7, #48	; 0x30
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000025c 	.word	0x2000025c
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12d      	bne.n	8001cbe <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001c9a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	481e      	ldr	r0, [pc, #120]	; (8001d30 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001cb8:	f000 fc8c 	bl	80025d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cbc:	e030      	b.n	8001d20 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM8)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12b      	bne.n	8001d20 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d00:	23c0      	movs	r3, #192	; 0xc0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d1c:	f000 fc5a 	bl	80025d4 <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3730      	adds	r7, #48	; 0x30
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010400 	.word	0x40010400
 8001d38:	40020800 	.word	0x40020800

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d116      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	201c      	movs	r0, #28
 8001d70:	f000 fb67 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d74:	201c      	movs	r0, #28
 8001d76:	f000 fb80 	bl	800247a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001d7a:	e026      	b.n	8001dca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
}
 8001da2:	e012      	b.n	8001dca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_TIM_Base_MspInit+0xa0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10d      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_TIM_Base_MspInit+0x98>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000c00 	.word	0x40000c00

08001de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d11e      	bne.n	8001e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e1e:	2340      	movs	r3, #64	; 0x40
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4817      	ldr	r0, [pc, #92]	; (8001e98 <HAL_TIM_MspPostInit+0xb8>)
 8001e3a:	f000 fbcb 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001e3e:	e022      	b.n	8001e86 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <HAL_TIM_MspPostInit+0xbc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11d      	bne.n	8001e86 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_TIM_MspPostInit+0xb4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e66:	2302      	movs	r3, #2
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e76:	2302      	movs	r3, #2
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_TIM_MspPostInit+0xb8>)
 8001e82:	f000 fba7 	bl	80025d4 <HAL_GPIO_Init>
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40000c00 	.word	0x40000c00

08001ea0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <MX_USART2_UART_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f002 fb3a 	bl	8004550 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f7ff fabd 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002a4 	.word	0x200002a4
 8001ef0:	40004400 	.word	0x40004400

08001ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <HAL_UART_MspInit+0xd0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d151      	bne.n	8001fba <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_UART_MspInit+0xd4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4811      	ldr	r0, [pc, #68]	; (8001fcc <HAL_UART_MspInit+0xd8>)
 8001f86:	f000 fb25 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f8a:	2340      	movs	r3, #64	; 0x40
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001fa6:	f000 fb15 	bl	80025d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	2026      	movs	r0, #38	; 0x26
 8001fb0:	f000 fa47 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb4:	2026      	movs	r0, #38	; 0x26
 8001fb6:	f000 fa60 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020c00 	.word	0x40020c00

08001fd4 <ConvertDegToPulse>:
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * TotalPulse / TotalDeg;
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <ConvertDegToPulse+0x48>)
 8001fea:	fb82 1203 	smull	r1, r2, r2, r3
 8001fee:	441a      	add	r2, r3
 8001ff0:	1212      	asrs	r2, r2, #8
 8001ff2:	17db      	asrs	r3, r3, #31
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffe:	edc7 7a03 	vstr	s15, [r7, #12]
    return (uint16_t)dPulse;
 8002002:	edd7 7a03 	vldr	s15, [r7, #12]
 8002006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200a:	ee17 3a90 	vmov	r3, s15
 800200e:	b29b      	uxth	r3, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	b60b60b7 	.word	0xb60b60b7

08002020 <ArrProcess>:
    float dDeg = nPulse * TotalDeg / TotalPulse;
    return (uint16_t)dDeg;
}

ArrData_t ArrProcess(char *arr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b090      	sub	sp, #64	; 0x40
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
    ArrData_t data;
    char sampleString[19];
    strcpy(sampleString, arr);
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fc3b 	bl	80058ac <strcpy>

    char *pos1 = (char *)malloc(sizeof(char) * 5);
 8002036:	2005      	movs	r0, #5
 8002038:	f003 fb30 	bl	800569c <malloc>
 800203c:	4603      	mov	r3, r0
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *vel1 = (char *)malloc(sizeof(char) * 5);
 8002040:	2005      	movs	r0, #5
 8002042:	f003 fb2b 	bl	800569c <malloc>
 8002046:	4603      	mov	r3, r0
 8002048:	63bb      	str	r3, [r7, #56]	; 0x38
    char *acc1 = (char *)malloc(sizeof(char) * 5);
 800204a:	2005      	movs	r0, #5
 800204c:	f003 fb26 	bl	800569c <malloc>
 8002050:	4603      	mov	r3, r0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
    char *dir1 = (char *)malloc(sizeof(char) * 2);
 8002054:	2002      	movs	r0, #2
 8002056:	f003 fb21 	bl	800569c <malloc>
 800205a:	4603      	mov	r3, r0
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
    char *dir2 = (char *)malloc(sizeof(char) * 2);
 800205e:	2002      	movs	r0, #2
 8002060:	f003 fb1c 	bl	800569c <malloc>
 8002064:	4603      	mov	r3, r0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c

    strncpy(pos1, sampleString, 4);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2204      	movs	r2, #4
 800206e:	4619      	mov	r1, r3
 8002070:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002072:	f003 fc23 	bl	80058bc <strncpy>
    pos1[4] = '\0';
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	3304      	adds	r3, #4
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    strncpy(vel1, &sampleString[5], 4);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	3305      	adds	r3, #5
 8002084:	2204      	movs	r2, #4
 8002086:	4619      	mov	r1, r3
 8002088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800208a:	f003 fc17 	bl	80058bc <strncpy>
    vel1[4] = '\0';
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	3304      	adds	r3, #4
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
    strncpy(acc1, &sampleString[10], 4);
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	330a      	adds	r3, #10
 800209c:	2204      	movs	r2, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020a2:	f003 fc0b 	bl	80058bc <strncpy>
    acc1[4] = '\0';
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	3304      	adds	r3, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
    strncpy(dir1, &sampleString[15], 1);
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	330f      	adds	r3, #15
 80020b4:	2201      	movs	r2, #1
 80020b6:	4619      	mov	r1, r3
 80020b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ba:	f003 fbff 	bl	80058bc <strncpy>
    dir1[1] = '\0';
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	3301      	adds	r3, #1
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    strncpy(dir2, &sampleString[17], 1);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	3311      	adds	r3, #17
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020d2:	f003 fbf3 	bl	80058bc <strncpy>
    dir2[1] = '\0';
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	3301      	adds	r3, #1
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]

    data.pos1 = atoi(pos1);
 80020de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020e0:	f003 faae 	bl	8005640 <atoi>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	843b      	strh	r3, [r7, #32]
    data.vel1 = atoi(vel1);
 80020ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020ec:	f003 faa8 	bl	8005640 <atoi>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	847b      	strh	r3, [r7, #34]	; 0x22
    data.acc1 = atoi(acc1);
 80020f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020f8:	f003 faa2 	bl	8005640 <atoi>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b29b      	uxth	r3, r3
 8002100:	84bb      	strh	r3, [r7, #36]	; 0x24
    data.dir1 = atoi(dir1);
 8002102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002104:	f003 fa9c 	bl	8005640 <atoi>
 8002108:	4603      	mov	r3, r0
 800210a:	b29b      	uxth	r3, r3
 800210c:	84fb      	strh	r3, [r7, #38]	; 0x26
    data.dir2 = atoi(dir2);
 800210e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002110:	f003 fa96 	bl	8005640 <atoi>
 8002114:	4603      	mov	r3, r0
 8002116:	b29b      	uxth	r3, r3
 8002118:	853b      	strh	r3, [r7, #40]	; 0x28

    free(pos1);
 800211a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800211c:	f003 fac6 	bl	80056ac <free>
    free(vel1);
 8002120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002122:	f003 fac3 	bl	80056ac <free>
    free(acc1);
 8002126:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002128:	f003 fac0 	bl	80056ac <free>
    free(dir1);
 800212c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212e:	f003 fabd 	bl	80056ac <free>
    free(dir2);
 8002132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002134:	f003 faba 	bl	80056ac <free>

    return data;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	cb03      	ldmia	r3!, {r0, r1}
 8002142:	6010      	str	r0, [r2, #0]
 8002144:	6051      	str	r1, [r2, #4]
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	8113      	strh	r3, [r2, #8]
}
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	3740      	adds	r7, #64	; 0x40
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800218c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800215a:	490e      	ldr	r1, [pc, #56]	; (8002194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002170:	4c0b      	ldr	r4, [pc, #44]	; (80021a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217e:	f7ff fb65 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f003 fa67 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002186:	f7fe fcef 	bl	8000b68 <main>
  bx  lr    
 800218a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800218c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002198:	08005b70 	.word	0x08005b70
  ldr r2, =_sbss
 800219c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021a0:	200002fc 	.word	0x200002fc

080021a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_Init+0x40>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_Init+0x40>)
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_Init+0x40>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 f92b 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	200f      	movs	r0, #15
 80021d8:	f000 f808 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fa9a 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x54>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f943 	bl	8002496 <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f000 f90b 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_InitTick+0x5c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000008 	.word	0x20000008
 8002244:	20000010 	.word	0x20000010
 8002248:	2000000c 	.word	0x2000000c

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000010 	.word	0x20000010
 8002270:	200002e8 	.word	0x200002e8

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200002e8 	.word	0x200002e8

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff3e 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff31 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa2 	bl	80023e8 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff feda 	bl	8002274 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d008      	beq.n	80024e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e052      	b.n	8002586 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0216 	bic.w	r2, r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <HAL_DMA_Abort+0x62>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0208 	bic.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002530:	e013      	b.n	800255a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002532:	f7ff fe9f 	bl	8002274 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b05      	cmp	r3, #5
 800253e:	d90c      	bls.n	800255a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e015      	b.n	8002586 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e4      	bne.n	8002532 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	223f      	movs	r2, #63	; 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e00c      	b.n	80025c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2205      	movs	r2, #5
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e16b      	b.n	80028c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 815a 	bne.w	80028c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	2b02      	cmp	r3, #2
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d017      	beq.n	80026c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d123      	bne.n	8002718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0203 	and.w	r2, r3, #3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80b4 	beq.w	80028c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_GPIO_Init+0x310>)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x314>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_Init+0x226>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_GPIO_Init+0x318>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_Init+0x222>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a50      	ldr	r2, [pc, #320]	; (80028f0 <HAL_GPIO_Init+0x31c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_Init+0x21e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_GPIO_Init+0x320>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x21a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4e      	ldr	r2, [pc, #312]	; (80028f8 <HAL_GPIO_Init+0x324>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x216>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4d      	ldr	r2, [pc, #308]	; (80028fc <HAL_GPIO_Init+0x328>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x212>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4c      	ldr	r2, [pc, #304]	; (8002900 <HAL_GPIO_Init+0x32c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x20e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <HAL_GPIO_Init+0x330>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x20a>
 80027da:	2307      	movs	r3, #7
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027de:	2308      	movs	r3, #8
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <HAL_GPIO_Init+0x310>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_GPIO_Init+0x334>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a32      	ldr	r2, [pc, #200]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <HAL_GPIO_Init+0x334>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x334>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_GPIO_Init+0x334>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae90 	bls.w	80025f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e267      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	4b88      	ldr	r3, [pc, #544]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b85      	ldr	r3, [pc, #532]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b82      	ldr	r3, [pc, #520]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b7e      	ldr	r3, [pc, #504]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e242      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a75      	ldr	r2, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b70      	ldr	r3, [pc, #448]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6f      	ldr	r2, [pc, #444]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6c      	ldr	r2, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b69      	ldr	r3, [pc, #420]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a68      	ldr	r2, [pc, #416]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff fc3c 	bl	8002274 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff fc38 	bl	8002274 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e207      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fc28 	bl	8002274 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fc24 	bl	8002274 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1f3      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b51      	ldr	r3, [pc, #324]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c7      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4937      	ldr	r1, [pc, #220]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_OscConfig+0x244>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7ff fbdd 	bl	8002274 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7ff fbd9 	bl	8002274 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a8      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4925      	ldr	r1, [pc, #148]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCC_OscConfig+0x244>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff fbbc 	bl	8002274 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7ff fbb8 	bl	8002274 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e187      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d036      	beq.n	8002b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RCC_OscConfig+0x248>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7ff fb9c 	bl	8002274 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7ff fb98 	bl	8002274 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e167      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
 8002b5e:	e01b      	b.n	8002b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_OscConfig+0x248>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7ff fb85 	bl	8002274 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e00e      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7ff fb81 	bl	8002274 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d907      	bls.n	8002b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e150      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	42470000 	.word	0x42470000
 8002b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ea      	bne.n	8002b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8097 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002baa:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b7d      	ldr	r3, [pc, #500]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b7a      	ldr	r3, [pc, #488]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b77      	ldr	r3, [pc, #476]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b74      	ldr	r3, [pc, #464]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a73      	ldr	r2, [pc, #460]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7ff fb41 	bl	8002274 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7ff fb3d 	bl	8002274 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e10c      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2ea>
 8002c1c:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x324>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x30c>
 8002c32:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a5b      	ldr	r2, [pc, #364]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x324>
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a57      	ldr	r2, [pc, #348]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a54      	ldr	r2, [pc, #336]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7ff fb02 	bl	8002274 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7ff fafe 	bl	8002274 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0cb      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ee      	beq.n	8002c74 <HAL_RCC_OscConfig+0x334>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7ff faec 	bl	8002274 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7ff fae8 	bl	8002274 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0b5      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	4a38      	ldr	r2, [pc, #224]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a1 	beq.w	8002e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d05c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d141      	bne.n	8002d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fabc 	bl	8002274 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d00:	f7ff fab8 	bl	8002274 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e087      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	491b      	ldr	r1, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7ff fa91 	bl	8002274 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d56:	f7ff fa8d 	bl	8002274 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e05c      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x416>
 8002d74:	e054      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff fa7a 	bl	8002274 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff fa76 	bl	8002274 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e045      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x444>
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e038      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d11a      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d111      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	3b01      	subs	r3, #1
 8002e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7ff f9a8 	bl	8002274 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7ff f9a4 	bl	8002274 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f908 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08005a44 	.word	0x08005a44
 8002ff4:	20000008 	.word	0x20000008
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003000:	b094      	sub	sp, #80	; 0x50
 8003002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	647b      	str	r3, [r7, #68]	; 0x44
 8003008:	2300      	movs	r3, #0
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800300c:	2300      	movs	r3, #0
 800300e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003014:	4b79      	ldr	r3, [pc, #484]	; (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d00d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003020:	2b08      	cmp	r3, #8
 8003022:	f200 80e1 	bhi.w	80031e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 800302e:	e0db      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_GetSysClockFreq+0x204>)
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003034:	e0db      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b73      	ldr	r3, [pc, #460]	; (8003204 <HAL_RCC_GetSysClockFreq+0x208>)
 8003038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800303a:	e0d8      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d063      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	63bb      	str	r3, [r7, #56]	; 0x38
 800305c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
 8003066:	2300      	movs	r3, #0
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
 800306a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800306e:	4622      	mov	r2, r4
 8003070:	462b      	mov	r3, r5
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	0159      	lsls	r1, r3, #5
 800307c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003080:	0150      	lsls	r0, r2, #5
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4621      	mov	r1, r4
 8003088:	1a51      	subs	r1, r2, r1
 800308a:	6139      	str	r1, [r7, #16]
 800308c:	4629      	mov	r1, r5
 800308e:	eb63 0301 	sbc.w	r3, r3, r1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a0:	4659      	mov	r1, fp
 80030a2:	018b      	lsls	r3, r1, #6
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030aa:	4651      	mov	r1, sl
 80030ac:	018a      	lsls	r2, r1, #6
 80030ae:	4651      	mov	r1, sl
 80030b0:	ebb2 0801 	subs.w	r8, r2, r1
 80030b4:	4659      	mov	r1, fp
 80030b6:	eb63 0901 	sbc.w	r9, r3, r1
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ce:	4690      	mov	r8, r2
 80030d0:	4699      	mov	r9, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	eb18 0303 	adds.w	r3, r8, r3
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	462b      	mov	r3, r5
 80030dc:	eb49 0303 	adc.w	r3, r9, r3
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ee:	4629      	mov	r1, r5
 80030f0:	024b      	lsls	r3, r1, #9
 80030f2:	4621      	mov	r1, r4
 80030f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f8:	4621      	mov	r1, r4
 80030fa:	024a      	lsls	r2, r1, #9
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003102:	2200      	movs	r2, #0
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 8003106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800310c:	f7fd fafa 	bl	8000704 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4613      	mov	r3, r2
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	e058      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2200      	movs	r2, #0
 8003122:	4618      	mov	r0, r3
 8003124:	4611      	mov	r1, r2
 8003126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
 8003130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003134:	4642      	mov	r2, r8
 8003136:	464b      	mov	r3, r9
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	0159      	lsls	r1, r3, #5
 8003142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003146:	0150      	lsls	r0, r2, #5
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4641      	mov	r1, r8
 800314e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003152:	4649      	mov	r1, r9
 8003154:	eb63 0b01 	sbc.w	fp, r3, r1
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800316c:	ebb2 040a 	subs.w	r4, r2, sl
 8003170:	eb63 050b 	sbc.w	r5, r3, fp
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	00eb      	lsls	r3, r5, #3
 800317e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003182:	00e2      	lsls	r2, r4, #3
 8003184:	4614      	mov	r4, r2
 8003186:	461d      	mov	r5, r3
 8003188:	4643      	mov	r3, r8
 800318a:	18e3      	adds	r3, r4, r3
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	464b      	mov	r3, r9
 8003190:	eb45 0303 	adc.w	r3, r5, r3
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031a2:	4629      	mov	r1, r5
 80031a4:	028b      	lsls	r3, r1, #10
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031ac:	4621      	mov	r1, r4
 80031ae:	028a      	lsls	r2, r1, #10
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	61fa      	str	r2, [r7, #28]
 80031bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c0:	f7fd faa0 	bl	8000704 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4613      	mov	r3, r2
 80031ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3750      	adds	r7, #80	; 0x50
 80031f4:	46bd      	mov	sp, r7
 80031f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	00f42400 	.word	0x00f42400
 8003204:	007a1200 	.word	0x007a1200

08003208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_RCC_GetHCLKFreq+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000008 	.word	0x20000008

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003224:	f7ff fff0 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0a9b      	lsrs	r3, r3, #10
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	08005a54 	.word	0x08005a54

08003248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800324c:	f7ff ffdc 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0b5b      	lsrs	r3, r3, #13
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	; (800326c <HAL_RCC_GetPCLK2Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	08005a54 	.word	0x08005a54

08003270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e041      	b.n	8003306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fd50 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f000 fdae 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d001      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04e      	b.n	80033c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d022      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d01d      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d018      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIM_Base_Start_IT+0xdc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d111      	bne.n	80033b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d010      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	e007      	b.n	80033c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40001800 	.word	0x40001800

080033f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f839 	bl	800348e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 fcee 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_TIM_PWM_Start+0x24>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	e022      	b.n	800350e <HAL_TIM_PWM_Start+0x6a>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d109      	bne.n	80034e2 <HAL_TIM_PWM_Start+0x3e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	e015      	b.n	800350e <HAL_TIM_PWM_Start+0x6a>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d109      	bne.n	80034fc <HAL_TIM_PWM_Start+0x58>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e008      	b.n	800350e <HAL_TIM_PWM_Start+0x6a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07c      	b.n	8003610 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0x82>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	e013      	b.n	800354e <HAL_TIM_PWM_Start+0xaa>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0x92>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003534:	e00b      	b.n	800354e <HAL_TIM_PWM_Start+0xaa>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003544:	e003      	b.n	800354e <HAL_TIM_PWM_Start+0xaa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff44 	bl	80043e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <HAL_TIM_PWM_Start+0x174>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_PWM_Start+0xcc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HAL_TIM_PWM_Start+0x178>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_TIM_PWM_Start+0xd0>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_TIM_PWM_Start+0xd2>
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_TIM_PWM_Start+0x174>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d01d      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_TIM_PWM_Start+0x17c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_TIM_PWM_Start+0x180>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_TIM_PWM_Start+0x184>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_TIM_PWM_Start+0x178>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_TIM_PWM_Start+0x188>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_TIM_PWM_Start+0x18c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d010      	beq.n	800360e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fc:	e007      	b.n	800360e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40010000 	.word	0x40010000
 800361c:	40010400 	.word	0x40010400
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40014000 	.word	0x40014000
 8003630:	40001800 	.word	0x40001800

08003634 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e097      	b.n	8003778 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe faef 	bl	8001c40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003678:	f023 0307 	bic.w	r3, r3, #7
 800367c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f000 fbc1 	bl	8003e10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	4313      	orrs	r3, r2
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036d4:	f023 030c 	bic.w	r3, r3, #12
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	4313      	orrs	r3, r2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	011a      	lsls	r2, r3, #4
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	031b      	lsls	r3, r3, #12
 8003704:	4313      	orrs	r3, r2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	4313      	orrs	r3, r2
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003790:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003798:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d110      	bne.n	80037d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037b6:	7b7b      	ldrb	r3, [r7, #13]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d001      	beq.n	80037c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e069      	b.n	8003894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d0:	e031      	b.n	8003836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d110      	bne.n	80037fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d102      	bne.n	80037e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037de:	7b3b      	ldrb	r3, [r7, #12]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d001      	beq.n	80037e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e055      	b.n	8003894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f8:	e01d      	b.n	8003836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d108      	bne.n	8003812 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003806:	7b7b      	ldrb	r3, [r7, #13]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800380c:	7b3b      	ldrb	r3, [r7, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e03e      	b.n	8003894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_TIM_Encoder_Start+0xc4>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d008      	beq.n	8003854 <HAL_TIM_Encoder_Start+0xd4>
 8003842:	e00f      	b.n	8003864 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fdc9 	bl	80043e4 <TIM_CCxChannelCmd>
      break;
 8003852:	e016      	b.n	8003882 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	2104      	movs	r1, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fdc1 	bl	80043e4 <TIM_CCxChannelCmd>
      break;
 8003862:	e00e      	b.n	8003882 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fdb9 	bl	80043e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	2104      	movs	r1, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fdb2 	bl	80043e4 <TIM_CCxChannelCmd>
      break;
 8003880:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0202 	mvn.w	r2, #2
 80038c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa77 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa69 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fa7a 	bl	8003de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0204 	mvn.w	r2, #4
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fa4d 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa3f 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa50 	bl	8003de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d122      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b08      	cmp	r3, #8
 8003966:	d11b      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0208 	mvn.w	r2, #8
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa23 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa15 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa26 	bl	8003de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d122      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d11b      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2208      	movs	r2, #8
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9f9 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9eb 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f9fc 	bl	8003de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10e      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0201 	mvn.w	r2, #1
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd faae 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b80      	cmp	r3, #128	; 0x80
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fd78 	bl	800453c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d107      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9c1 	bl	8003dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d10e      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d107      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0220 	mvn.w	r2, #32
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fd42 	bl	8004528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ae      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	f200 809f 	bhi.w	8003c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003c19 	.word	0x08003c19
 8003ae8:	08003c19 	.word	0x08003c19
 8003aec:	08003c19 	.word	0x08003c19
 8003af0:	08003b55 	.word	0x08003b55
 8003af4:	08003c19 	.word	0x08003c19
 8003af8:	08003c19 	.word	0x08003c19
 8003afc:	08003c19 	.word	0x08003c19
 8003b00:	08003b97 	.word	0x08003b97
 8003b04:	08003c19 	.word	0x08003c19
 8003b08:	08003c19 	.word	0x08003c19
 8003b0c:	08003c19 	.word	0x08003c19
 8003b10:	08003bd7 	.word	0x08003bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa18 	bl	8003f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	619a      	str	r2, [r3, #24]
      break;
 8003b52:	e064      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa68 	bl	8004030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      break;
 8003b94:	e043      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fabd 	bl	800411c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0208 	orr.w	r2, r2, #8
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0204 	bic.w	r2, r2, #4
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]
      break;
 8003bd4:	e023      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fb11 	bl	8004204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	61da      	str	r2, [r3, #28]
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_ConfigClockSource+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0b4      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x186>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c84:	d03e      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0xd4>
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8a:	f200 8087 	bhi.w	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	f000 8086 	beq.w	8003da2 <HAL_TIM_ConfigClockSource+0x172>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	d87f      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b70      	cmp	r3, #112	; 0x70
 8003c9e:	d01a      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8003ca0:	2b70      	cmp	r3, #112	; 0x70
 8003ca2:	d87b      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d050      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x11a>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d877      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b50      	cmp	r3, #80	; 0x50
 8003cae:	d03c      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0xfa>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d873      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d058      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x13a>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d86f      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d064      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d86b      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d060      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d867      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d05a      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	e062      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f000 fb5d 	bl	80043a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	609a      	str	r2, [r3, #8]
      break;
 8003d02:	e04f      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f000 fb46 	bl	80043a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d26:	609a      	str	r2, [r3, #8]
      break;
 8003d28:	e03c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f000 faba 	bl	80042b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2150      	movs	r1, #80	; 0x50
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fb13 	bl	800436e <TIM_ITRx_SetConfig>
      break;
 8003d48:	e02c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fad9 	bl	800430e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2160      	movs	r1, #96	; 0x60
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb03 	bl	800436e <TIM_ITRx_SetConfig>
      break;
 8003d68:	e01c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fa9a 	bl	80042b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2140      	movs	r1, #64	; 0x40
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 faf3 	bl	800436e <TIM_ITRx_SetConfig>
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f000 faea 	bl	800436e <TIM_ITRx_SetConfig>
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3d      	ldr	r2, [pc, #244]	; (8003f28 <TIM_Base_SetConfig+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <TIM_Base_SetConfig+0x11c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <TIM_Base_SetConfig+0x120>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d027      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <TIM_Base_SetConfig+0x118>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d023      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <TIM_Base_SetConfig+0x11c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <TIM_Base_SetConfig+0x120>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d017      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <TIM_Base_SetConfig+0x128>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <TIM_Base_SetConfig+0x130>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0x134>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <TIM_Base_SetConfig+0x138>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	615a      	str	r2, [r3, #20]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40010400 	.word	0x40010400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800
 8003f44:	40001800 	.word	0x40001800
 8003f48:	40001c00 	.word	0x40001c00
 8003f4c:	40002000 	.word	0x40002000

08003f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 0302 	bic.w	r3, r3, #2
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <TIM_OC1_SetConfig+0xd8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x64>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1f      	ldr	r2, [pc, #124]	; (800402c <TIM_OC1_SetConfig+0xdc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <TIM_OC1_SetConfig+0xd8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_OC1_SetConfig+0x8e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a14      	ldr	r2, [pc, #80]	; (800402c <TIM_OC1_SetConfig+0xdc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d111      	bne.n	8004002 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0320 	bic.w	r3, r3, #32
 800407a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a22      	ldr	r2, [pc, #136]	; (8004114 <TIM_OC2_SetConfig+0xe4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC2_SetConfig+0x68>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a21      	ldr	r2, [pc, #132]	; (8004118 <TIM_OC2_SetConfig+0xe8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10d      	bne.n	80040b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <TIM_OC2_SetConfig+0xe4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC2_SetConfig+0x94>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <TIM_OC2_SetConfig+0xe8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d113      	bne.n	80040ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40010400 	.word	0x40010400

0800411c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a21      	ldr	r2, [pc, #132]	; (80041fc <TIM_OC3_SetConfig+0xe0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC3_SetConfig+0x66>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a20      	ldr	r2, [pc, #128]	; (8004200 <TIM_OC3_SetConfig+0xe4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10d      	bne.n	800419e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800419c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a16      	ldr	r2, [pc, #88]	; (80041fc <TIM_OC3_SetConfig+0xe0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_OC3_SetConfig+0x92>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <TIM_OC3_SetConfig+0xe4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d113      	bne.n	80041d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	621a      	str	r2, [r3, #32]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40010000 	.word	0x40010000
 8004200:	40010400 	.word	0x40010400

08004204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800424e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <TIM_OC4_SetConfig+0xa4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC4_SetConfig+0x68>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a11      	ldr	r2, [pc, #68]	; (80042ac <TIM_OC4_SetConfig+0xa8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d109      	bne.n	8004280 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	019b      	lsls	r3, r3, #6
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 030a 	bic.w	r3, r3, #10
 80042ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0210 	bic.w	r2, r3, #16
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800434a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	f043 0307 	orr.w	r3, r3, #7
 8004390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2201      	movs	r2, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e05a      	b.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d01d      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10c      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40010400 	.word	0x40010400
 8004520:	40014000 	.word	0x40014000
 8004524:	40001800 	.word	0x40001800

08004528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e03f      	b.n	80045e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fcbc 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fddf 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b08a      	sub	sp, #40	; 0x28
 80045ee:	af02      	add	r7, sp, #8
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b20      	cmp	r3, #32
 8004608:	d17c      	bne.n	8004704 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_UART_Transmit+0x2c>
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e075      	b.n	8004706 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_UART_Transmit+0x3e>
 8004624:	2302      	movs	r3, #2
 8004626:	e06e      	b.n	8004706 <HAL_UART_Transmit+0x11c>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2221      	movs	r2, #33	; 0x21
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463e:	f7fd fe19 	bl	8002274 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d108      	bne.n	800466c <HAL_UART_Transmit+0x82>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e003      	b.n	8004674 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800467c:	e02a      	b.n	80046d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fb1f 	bl	8004ccc <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e036      	b.n	8004706 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3302      	adds	r3, #2
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e007      	b.n	80046c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1cf      	bne.n	800467e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2200      	movs	r2, #0
 80046e6:	2140      	movs	r1, #64	; 0x40
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 faef 	bl	8004ccc <UART_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e006      	b.n	8004706 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	d11d      	bne.n	8004764 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_UART_Receive_IT+0x26>
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e016      	b.n	8004766 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UART_Receive_IT+0x38>
 8004742:	2302      	movs	r3, #2
 8004744:	e00f      	b.n	8004766 <HAL_UART_Receive_IT+0x58>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	461a      	mov	r2, r3
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fb24 	bl	8004da8 <UART_Start_Receive_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	e000      	b.n	8004766 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b0ba      	sub	sp, #232	; 0xe8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_UART_IRQHandler+0x66>
 80047c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fc07 	bl	8004fe2 <UART_Receive_IT>
      return;
 80047d4:	e256      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80de 	beq.w	800499c <HAL_UART_IRQHandler+0x22c>
 80047e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80d1 	beq.w	800499c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0xae>
 8004806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_UART_IRQHandler+0xd2>
 800482a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0202 	orr.w	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_UART_IRQHandler+0xf6>
 800484e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d011      	beq.n	8004896 <HAL_UART_IRQHandler+0x126>
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0208 	orr.w	r2, r3, #8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 81ed 	beq.w	8004c7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_UART_IRQHandler+0x14e>
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fb92 	bl	8004fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_UART_IRQHandler+0x17a>
 80048e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04f      	beq.n	800498a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa9a 	bl	8004e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b40      	cmp	r3, #64	; 0x40
 80048fc:	d141      	bne.n	8004982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800492a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800492e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1d9      	bne.n	80048fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d013      	beq.n	800497a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	4a7d      	ldr	r2, [pc, #500]	; (8004b4c <HAL_UART_IRQHandler+0x3dc>)
 8004958:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd fe15 	bl	800258e <HAL_DMA_Abort_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e00e      	b.n	8004998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f990 	bl	8004ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	e00a      	b.n	8004998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f98c 	bl	8004ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	e006      	b.n	8004998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f988 	bl	8004ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004996:	e170      	b.n	8004c7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	bf00      	nop
    return;
 800499a:	e16e      	b.n	8004c7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 814a 	bne.w	8004c3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8143 	beq.w	8004c3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 813c 	beq.w	8004c3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	f040 80b4 	bne.w	8004b50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8140 	beq.w	8004c7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a06:	429a      	cmp	r2, r3
 8004a08:	f080 8139 	bcs.w	8004c7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1e:	f000 8088 	beq.w	8004b32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1d9      	bne.n	8004a22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e1      	bne.n	8004a6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e3      	bne.n	8004aaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e3      	bne.n	8004af0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd fcbe 	bl	80024ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8b6 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b48:	e099      	b.n	8004c7e <HAL_UART_IRQHandler+0x50e>
 8004b4a:	bf00      	nop
 8004b4c:	08004eeb 	.word	0x08004eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 808b 	beq.w	8004c82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e3      	bne.n	8004b76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0310 	bic.w	r3, r3, #16
 8004c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c18:	61fa      	str	r2, [r7, #28]
 8004c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	617b      	str	r3, [r7, #20]
   return(result);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e3      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f83e 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c38:	e023      	b.n	8004c82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_UART_IRQHandler+0x4ea>
 8004c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f95d 	bl	8004f12 <UART_Transmit_IT>
    return;
 8004c58:	e014      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00e      	beq.n	8004c84 <HAL_UART_IRQHandler+0x514>
 8004c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f99d 	bl	8004fb2 <UART_EndTransmit_IT>
    return;
 8004c78:	e004      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
    return;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
      return;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
      return;
 8004c82:	bf00      	nop
  }
}
 8004c84:	37e8      	adds	r7, #232	; 0xe8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop

08004c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b090      	sub	sp, #64	; 0x40
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cdc:	e050      	b.n	8004d80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce4:	d04c      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cec:	f7fd fac2 	bl	8002274 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d241      	bcs.n	8004d80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d1c:	637a      	str	r2, [r7, #52]	; 0x34
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d50:	623a      	str	r2, [r7, #32]
 8004d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	69f9      	ldr	r1, [r7, #28]
 8004d56:	6a3a      	ldr	r2, [r7, #32]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e00f      	b.n	8004da0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d09f      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3740      	adds	r7, #64	; 0x40
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2222      	movs	r2, #34	; 0x22
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0220 	orr.w	r2, r2, #32
 8004e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b095      	sub	sp, #84	; 0x54
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3314      	adds	r3, #20
 8004e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e5      	bne.n	8004e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d119      	bne.n	8004ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f023 0310 	bic.w	r3, r3, #16
 8004eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ebc:	61ba      	str	r2, [r7, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6979      	ldr	r1, [r7, #20]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ede:	bf00      	nop
 8004ee0:	3754      	adds	r7, #84	; 0x54
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fecb 	bl	8004ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b21      	cmp	r3, #33	; 0x21
 8004f24:	d13e      	bne.n	8004fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d114      	bne.n	8004f5a <UART_Transmit_IT+0x48>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d110      	bne.n	8004f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]
 8004f58:	e008      	b.n	8004f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6211      	str	r1, [r2, #32]
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fe5a 	bl	8004c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08c      	sub	sp, #48	; 0x30
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b22      	cmp	r3, #34	; 0x22
 8004ff4:	f040 80ab 	bne.w	800514e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005000:	d117      	bne.n	8005032 <UART_Receive_IT+0x50>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d113      	bne.n	8005032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005020:	b29a      	uxth	r2, r3
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
 8005030:	e026      	b.n	8005080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d007      	beq.n	8005056 <UART_Receive_IT+0x74>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <UART_Receive_IT+0x82>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e008      	b.n	8005076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	b2da      	uxtb	r2, r3
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29b      	uxth	r3, r3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4619      	mov	r1, r3
 800508e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005090:	2b00      	cmp	r3, #0
 8005092:	d15a      	bne.n	800514a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0220 	bic.w	r2, r2, #32
 80050a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d135      	bne.n	8005140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	613b      	str	r3, [r7, #16]
   return(result);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	623a      	str	r2, [r7, #32]
 80050fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	61bb      	str	r3, [r7, #24]
   return(result);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d10a      	bne.n	8005132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fdbb 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
 800513e:	e002      	b.n	8005146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fb fdc1 	bl	8000cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e002      	b.n	8005150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	; 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b0c0      	sub	sp, #256	; 0x100
 800515e:	af00      	add	r7, sp, #0
 8005160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	ea40 0301 	orr.w	r3, r0, r1
 8005180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	431a      	orrs	r2, r3
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051b0:	f021 010c 	bic.w	r1, r1, #12
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051be:	430b      	orrs	r3, r1
 80051c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	6999      	ldr	r1, [r3, #24]
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	ea40 0301 	orr.w	r3, r0, r1
 80051de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b8f      	ldr	r3, [pc, #572]	; (8005424 <UART_SetConfig+0x2cc>)
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d005      	beq.n	80051f8 <UART_SetConfig+0xa0>
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b8d      	ldr	r3, [pc, #564]	; (8005428 <UART_SetConfig+0x2d0>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d104      	bne.n	8005202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe f826 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 80051fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005200:	e003      	b.n	800520a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005202:	f7fe f80d 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8005206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	f040 810c 	bne.w	8005430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521c:	2200      	movs	r2, #0
 800521e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	1891      	adds	r1, r2, r2
 8005230:	65b9      	str	r1, [r7, #88]	; 0x58
 8005232:	415b      	adcs	r3, r3
 8005234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800523a:	4621      	mov	r1, r4
 800523c:	eb12 0801 	adds.w	r8, r2, r1
 8005240:	4629      	mov	r1, r5
 8005242:	eb43 0901 	adc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005268:	462b      	mov	r3, r5
 800526a:	eb49 0303 	adc.w	r3, r9, r3
 800526e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800527e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005286:	460b      	mov	r3, r1
 8005288:	18db      	adds	r3, r3, r3
 800528a:	653b      	str	r3, [r7, #80]	; 0x50
 800528c:	4613      	mov	r3, r2
 800528e:	eb42 0303 	adc.w	r3, r2, r3
 8005292:	657b      	str	r3, [r7, #84]	; 0x54
 8005294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800529c:	f7fb fa32 	bl	8000704 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4b61      	ldr	r3, [pc, #388]	; (800542c <UART_SetConfig+0x2d4>)
 80052a6:	fba3 2302 	umull	r2, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	011c      	lsls	r4, r3, #4
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052c8:	415b      	adcs	r3, r3
 80052ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052d0:	4641      	mov	r1, r8
 80052d2:	eb12 0a01 	adds.w	sl, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb43 0b01 	adc.w	fp, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f0:	4692      	mov	sl, r2
 80052f2:	469b      	mov	fp, r3
 80052f4:	4643      	mov	r3, r8
 80052f6:	eb1a 0303 	adds.w	r3, sl, r3
 80052fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052fe:	464b      	mov	r3, r9
 8005300:	eb4b 0303 	adc.w	r3, fp, r3
 8005304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800531c:	460b      	mov	r3, r1
 800531e:	18db      	adds	r3, r3, r3
 8005320:	643b      	str	r3, [r7, #64]	; 0x40
 8005322:	4613      	mov	r3, r2
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
 800532a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800532e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005332:	f7fb f9e7 	bl	8000704 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b3b      	ldr	r3, [pc, #236]	; (800542c <UART_SetConfig+0x2d4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	; 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005352:	4b36      	ldr	r3, [pc, #216]	; (800542c <UART_SetConfig+0x2d4>)
 8005354:	fba3 2302 	umull	r2, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005360:	441c      	add	r4, r3
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800536c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	63b9      	str	r1, [r7, #56]	; 0x38
 800537c:	415b      	adcs	r3, r3
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6339      	str	r1, [r7, #48]	; 0x30
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053b8:	464b      	mov	r3, r9
 80053ba:	460a      	mov	r2, r1
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053d8:	460b      	mov	r3, r1
 80053da:	18db      	adds	r3, r3, r3
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	4613      	mov	r3, r2
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053ee:	f7fb f989 	bl	8000704 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <UART_SetConfig+0x2d4>)
 80053f8:	fba3 1302 	umull	r1, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	2164      	movs	r1, #100	; 0x64
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	3332      	adds	r3, #50	; 0x32
 800540a:	4a08      	ldr	r2, [pc, #32]	; (800542c <UART_SetConfig+0x2d4>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	f003 0207 	and.w	r2, r3, #7
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4422      	add	r2, r4
 800541e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005420:	e105      	b.n	800562e <UART_SetConfig+0x4d6>
 8005422:	bf00      	nop
 8005424:	40011000 	.word	0x40011000
 8005428:	40011400 	.word	0x40011400
 800542c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800543a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800543e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005442:	4642      	mov	r2, r8
 8005444:	464b      	mov	r3, r9
 8005446:	1891      	adds	r1, r2, r2
 8005448:	6239      	str	r1, [r7, #32]
 800544a:	415b      	adcs	r3, r3
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
 800544e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005452:	4641      	mov	r1, r8
 8005454:	1854      	adds	r4, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb43 0501 	adc.w	r5, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	00eb      	lsls	r3, r5, #3
 8005466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	4643      	mov	r3, r8
 8005472:	18e3      	adds	r3, r4, r3
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005478:	464b      	mov	r3, r9
 800547a:	eb45 0303 	adc.w	r3, r5, r3
 800547e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800548e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800549e:	4629      	mov	r1, r5
 80054a0:	008b      	lsls	r3, r1, #2
 80054a2:	4621      	mov	r1, r4
 80054a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a8:	4621      	mov	r1, r4
 80054aa:	008a      	lsls	r2, r1, #2
 80054ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054b0:	f7fb f928 	bl	8000704 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4b60      	ldr	r3, [pc, #384]	; (800563c <UART_SetConfig+0x4e4>)
 80054ba:	fba3 2302 	umull	r2, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	011c      	lsls	r4, r3, #4
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	61b9      	str	r1, [r7, #24]
 80054dc:	415b      	adcs	r3, r3
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e4:	4641      	mov	r1, r8
 80054e6:	1851      	adds	r1, r2, r1
 80054e8:	6139      	str	r1, [r7, #16]
 80054ea:	4649      	mov	r1, r9
 80054ec:	414b      	adcs	r3, r1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054fc:	4659      	mov	r1, fp
 80054fe:	00cb      	lsls	r3, r1, #3
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005506:	4651      	mov	r1, sl
 8005508:	00ca      	lsls	r2, r1, #3
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	4603      	mov	r3, r0
 8005510:	4642      	mov	r2, r8
 8005512:	189b      	adds	r3, r3, r2
 8005514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005518:	464b      	mov	r3, r9
 800551a:	460a      	mov	r2, r1
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	67bb      	str	r3, [r7, #120]	; 0x78
 800552e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800553c:	4649      	mov	r1, r9
 800553e:	008b      	lsls	r3, r1, #2
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005546:	4641      	mov	r1, r8
 8005548:	008a      	lsls	r2, r1, #2
 800554a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800554e:	f7fb f8d9 	bl	8000704 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4b39      	ldr	r3, [pc, #228]	; (800563c <UART_SetConfig+0x4e4>)
 8005558:	fba3 1302 	umull	r1, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2164      	movs	r1, #100	; 0x64
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	3332      	adds	r3, #50	; 0x32
 800556a:	4a34      	ldr	r2, [pc, #208]	; (800563c <UART_SetConfig+0x4e4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005576:	441c      	add	r4, r3
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557c:	2200      	movs	r2, #0
 800557e:	673b      	str	r3, [r7, #112]	; 0x70
 8005580:	677a      	str	r2, [r7, #116]	; 0x74
 8005582:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005586:	4642      	mov	r2, r8
 8005588:	464b      	mov	r3, r9
 800558a:	1891      	adds	r1, r2, r2
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	415b      	adcs	r3, r3
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005596:	4641      	mov	r1, r8
 8005598:	1851      	adds	r1, r2, r1
 800559a:	6039      	str	r1, [r7, #0]
 800559c:	4649      	mov	r1, r9
 800559e:	414b      	adcs	r3, r1
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055ae:	4659      	mov	r1, fp
 80055b0:	00cb      	lsls	r3, r1, #3
 80055b2:	4651      	mov	r1, sl
 80055b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b8:	4651      	mov	r1, sl
 80055ba:	00ca      	lsls	r2, r1, #3
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	4603      	mov	r3, r0
 80055c2:	4642      	mov	r2, r8
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c8:	464b      	mov	r3, r9
 80055ca:	460a      	mov	r2, r1
 80055cc:	eb42 0303 	adc.w	r3, r2, r3
 80055d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	663b      	str	r3, [r7, #96]	; 0x60
 80055dc:	667a      	str	r2, [r7, #100]	; 0x64
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055ea:	4649      	mov	r1, r9
 80055ec:	008b      	lsls	r3, r1, #2
 80055ee:	4641      	mov	r1, r8
 80055f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f4:	4641      	mov	r1, r8
 80055f6:	008a      	lsls	r2, r1, #2
 80055f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055fc:	f7fb f882 	bl	8000704 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <UART_SetConfig+0x4e4>)
 8005606:	fba3 1302 	umull	r1, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2164      	movs	r1, #100	; 0x64
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	3332      	adds	r3, #50	; 0x32
 8005618:	4a08      	ldr	r2, [pc, #32]	; (800563c <UART_SetConfig+0x4e4>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 020f 	and.w	r2, r3, #15
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4422      	add	r2, r4
 800562c:	609a      	str	r2, [r3, #8]
}
 800562e:	bf00      	nop
 8005630:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005634:	46bd      	mov	sp, r7
 8005636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563a:	bf00      	nop
 800563c:	51eb851f 	.word	0x51eb851f

08005640 <atoi>:
 8005640:	220a      	movs	r2, #10
 8005642:	2100      	movs	r1, #0
 8005644:	f000 b9d0 	b.w	80059e8 <strtol>

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	; (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000014 	.word	0x20000014

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4d0d      	ldr	r5, [pc, #52]	; (800568c <__libc_init_array+0x38>)
 8005658:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	2600      	movs	r6, #0
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4d0b      	ldr	r5, [pc, #44]	; (8005694 <__libc_init_array+0x40>)
 8005666:	4c0c      	ldr	r4, [pc, #48]	; (8005698 <__libc_init_array+0x44>)
 8005668:	f000 f9d6 	bl	8005a18 <_init>
 800566c:	1b64      	subs	r4, r4, r5
 800566e:	10a4      	asrs	r4, r4, #2
 8005670:	2600      	movs	r6, #0
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08005b68 	.word	0x08005b68
 8005690:	08005b68 	.word	0x08005b68
 8005694:	08005b68 	.word	0x08005b68
 8005698:	08005b6c 	.word	0x08005b6c

0800569c <malloc>:
 800569c:	4b02      	ldr	r3, [pc, #8]	; (80056a8 <malloc+0xc>)
 800569e:	4601      	mov	r1, r0
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	f000 b87f 	b.w	80057a4 <_malloc_r>
 80056a6:	bf00      	nop
 80056a8:	20000014 	.word	0x20000014

080056ac <free>:
 80056ac:	4b02      	ldr	r3, [pc, #8]	; (80056b8 <free+0xc>)
 80056ae:	4601      	mov	r1, r0
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	f000 b80b 	b.w	80056cc <_free_r>
 80056b6:	bf00      	nop
 80056b8:	20000014 	.word	0x20000014

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <_free_r>:
 80056cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ce:	2900      	cmp	r1, #0
 80056d0:	d044      	beq.n	800575c <_free_r+0x90>
 80056d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d6:	9001      	str	r0, [sp, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f1a1 0404 	sub.w	r4, r1, #4
 80056de:	bfb8      	it	lt
 80056e0:	18e4      	addlt	r4, r4, r3
 80056e2:	f000 f98b 	bl	80059fc <__malloc_lock>
 80056e6:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <_free_r+0x94>)
 80056e8:	9801      	ldr	r0, [sp, #4]
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	b933      	cbnz	r3, 80056fc <_free_r+0x30>
 80056ee:	6063      	str	r3, [r4, #4]
 80056f0:	6014      	str	r4, [r2, #0]
 80056f2:	b003      	add	sp, #12
 80056f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056f8:	f000 b986 	b.w	8005a08 <__malloc_unlock>
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	d908      	bls.n	8005712 <_free_r+0x46>
 8005700:	6825      	ldr	r5, [r4, #0]
 8005702:	1961      	adds	r1, r4, r5
 8005704:	428b      	cmp	r3, r1
 8005706:	bf01      	itttt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	1949      	addeq	r1, r1, r5
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	e7ed      	b.n	80056ee <_free_r+0x22>
 8005712:	461a      	mov	r2, r3
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	b10b      	cbz	r3, 800571c <_free_r+0x50>
 8005718:	42a3      	cmp	r3, r4
 800571a:	d9fa      	bls.n	8005712 <_free_r+0x46>
 800571c:	6811      	ldr	r1, [r2, #0]
 800571e:	1855      	adds	r5, r2, r1
 8005720:	42a5      	cmp	r5, r4
 8005722:	d10b      	bne.n	800573c <_free_r+0x70>
 8005724:	6824      	ldr	r4, [r4, #0]
 8005726:	4421      	add	r1, r4
 8005728:	1854      	adds	r4, r2, r1
 800572a:	42a3      	cmp	r3, r4
 800572c:	6011      	str	r1, [r2, #0]
 800572e:	d1e0      	bne.n	80056f2 <_free_r+0x26>
 8005730:	681c      	ldr	r4, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	6053      	str	r3, [r2, #4]
 8005736:	4421      	add	r1, r4
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	e7da      	b.n	80056f2 <_free_r+0x26>
 800573c:	d902      	bls.n	8005744 <_free_r+0x78>
 800573e:	230c      	movs	r3, #12
 8005740:	6003      	str	r3, [r0, #0]
 8005742:	e7d6      	b.n	80056f2 <_free_r+0x26>
 8005744:	6825      	ldr	r5, [r4, #0]
 8005746:	1961      	adds	r1, r4, r5
 8005748:	428b      	cmp	r3, r1
 800574a:	bf04      	itt	eq
 800574c:	6819      	ldreq	r1, [r3, #0]
 800574e:	685b      	ldreq	r3, [r3, #4]
 8005750:	6063      	str	r3, [r4, #4]
 8005752:	bf04      	itt	eq
 8005754:	1949      	addeq	r1, r1, r5
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	6054      	str	r4, [r2, #4]
 800575a:	e7ca      	b.n	80056f2 <_free_r+0x26>
 800575c:	b003      	add	sp, #12
 800575e:	bd30      	pop	{r4, r5, pc}
 8005760:	200002ec 	.word	0x200002ec

08005764 <sbrk_aligned>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4e0e      	ldr	r6, [pc, #56]	; (80057a0 <sbrk_aligned+0x3c>)
 8005768:	460c      	mov	r4, r1
 800576a:	6831      	ldr	r1, [r6, #0]
 800576c:	4605      	mov	r5, r0
 800576e:	b911      	cbnz	r1, 8005776 <sbrk_aligned+0x12>
 8005770:	f000 f88c 	bl	800588c <_sbrk_r>
 8005774:	6030      	str	r0, [r6, #0]
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f000 f887 	bl	800588c <_sbrk_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	d00a      	beq.n	8005798 <sbrk_aligned+0x34>
 8005782:	1cc4      	adds	r4, r0, #3
 8005784:	f024 0403 	bic.w	r4, r4, #3
 8005788:	42a0      	cmp	r0, r4
 800578a:	d007      	beq.n	800579c <sbrk_aligned+0x38>
 800578c:	1a21      	subs	r1, r4, r0
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f87c 	bl	800588c <_sbrk_r>
 8005794:	3001      	adds	r0, #1
 8005796:	d101      	bne.n	800579c <sbrk_aligned+0x38>
 8005798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800579c:	4620      	mov	r0, r4
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	200002f0 	.word	0x200002f0

080057a4 <_malloc_r>:
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	1ccd      	adds	r5, r1, #3
 80057aa:	f025 0503 	bic.w	r5, r5, #3
 80057ae:	3508      	adds	r5, #8
 80057b0:	2d0c      	cmp	r5, #12
 80057b2:	bf38      	it	cc
 80057b4:	250c      	movcc	r5, #12
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	4607      	mov	r7, r0
 80057ba:	db01      	blt.n	80057c0 <_malloc_r+0x1c>
 80057bc:	42a9      	cmp	r1, r5
 80057be:	d905      	bls.n	80057cc <_malloc_r+0x28>
 80057c0:	230c      	movs	r3, #12
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	2600      	movs	r6, #0
 80057c6:	4630      	mov	r0, r6
 80057c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057cc:	4e2e      	ldr	r6, [pc, #184]	; (8005888 <_malloc_r+0xe4>)
 80057ce:	f000 f915 	bl	80059fc <__malloc_lock>
 80057d2:	6833      	ldr	r3, [r6, #0]
 80057d4:	461c      	mov	r4, r3
 80057d6:	bb34      	cbnz	r4, 8005826 <_malloc_r+0x82>
 80057d8:	4629      	mov	r1, r5
 80057da:	4638      	mov	r0, r7
 80057dc:	f7ff ffc2 	bl	8005764 <sbrk_aligned>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	4604      	mov	r4, r0
 80057e4:	d14d      	bne.n	8005882 <_malloc_r+0xde>
 80057e6:	6834      	ldr	r4, [r6, #0]
 80057e8:	4626      	mov	r6, r4
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	d140      	bne.n	8005870 <_malloc_r+0xcc>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	4631      	mov	r1, r6
 80057f2:	4638      	mov	r0, r7
 80057f4:	eb04 0803 	add.w	r8, r4, r3
 80057f8:	f000 f848 	bl	800588c <_sbrk_r>
 80057fc:	4580      	cmp	r8, r0
 80057fe:	d13a      	bne.n	8005876 <_malloc_r+0xd2>
 8005800:	6821      	ldr	r1, [r4, #0]
 8005802:	3503      	adds	r5, #3
 8005804:	1a6d      	subs	r5, r5, r1
 8005806:	f025 0503 	bic.w	r5, r5, #3
 800580a:	3508      	adds	r5, #8
 800580c:	2d0c      	cmp	r5, #12
 800580e:	bf38      	it	cc
 8005810:	250c      	movcc	r5, #12
 8005812:	4629      	mov	r1, r5
 8005814:	4638      	mov	r0, r7
 8005816:	f7ff ffa5 	bl	8005764 <sbrk_aligned>
 800581a:	3001      	adds	r0, #1
 800581c:	d02b      	beq.n	8005876 <_malloc_r+0xd2>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	442b      	add	r3, r5
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	e00e      	b.n	8005844 <_malloc_r+0xa0>
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	1b52      	subs	r2, r2, r5
 800582a:	d41e      	bmi.n	800586a <_malloc_r+0xc6>
 800582c:	2a0b      	cmp	r2, #11
 800582e:	d916      	bls.n	800585e <_malloc_r+0xba>
 8005830:	1961      	adds	r1, r4, r5
 8005832:	42a3      	cmp	r3, r4
 8005834:	6025      	str	r5, [r4, #0]
 8005836:	bf18      	it	ne
 8005838:	6059      	strne	r1, [r3, #4]
 800583a:	6863      	ldr	r3, [r4, #4]
 800583c:	bf08      	it	eq
 800583e:	6031      	streq	r1, [r6, #0]
 8005840:	5162      	str	r2, [r4, r5]
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	4638      	mov	r0, r7
 8005846:	f104 060b 	add.w	r6, r4, #11
 800584a:	f000 f8dd 	bl	8005a08 <__malloc_unlock>
 800584e:	f026 0607 	bic.w	r6, r6, #7
 8005852:	1d23      	adds	r3, r4, #4
 8005854:	1af2      	subs	r2, r6, r3
 8005856:	d0b6      	beq.n	80057c6 <_malloc_r+0x22>
 8005858:	1b9b      	subs	r3, r3, r6
 800585a:	50a3      	str	r3, [r4, r2]
 800585c:	e7b3      	b.n	80057c6 <_malloc_r+0x22>
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	42a3      	cmp	r3, r4
 8005862:	bf0c      	ite	eq
 8005864:	6032      	streq	r2, [r6, #0]
 8005866:	605a      	strne	r2, [r3, #4]
 8005868:	e7ec      	b.n	8005844 <_malloc_r+0xa0>
 800586a:	4623      	mov	r3, r4
 800586c:	6864      	ldr	r4, [r4, #4]
 800586e:	e7b2      	b.n	80057d6 <_malloc_r+0x32>
 8005870:	4634      	mov	r4, r6
 8005872:	6876      	ldr	r6, [r6, #4]
 8005874:	e7b9      	b.n	80057ea <_malloc_r+0x46>
 8005876:	230c      	movs	r3, #12
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4638      	mov	r0, r7
 800587c:	f000 f8c4 	bl	8005a08 <__malloc_unlock>
 8005880:	e7a1      	b.n	80057c6 <_malloc_r+0x22>
 8005882:	6025      	str	r5, [r4, #0]
 8005884:	e7de      	b.n	8005844 <_malloc_r+0xa0>
 8005886:	bf00      	nop
 8005888:	200002ec 	.word	0x200002ec

0800588c <_sbrk_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4d06      	ldr	r5, [pc, #24]	; (80058a8 <_sbrk_r+0x1c>)
 8005890:	2300      	movs	r3, #0
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	602b      	str	r3, [r5, #0]
 8005898:	f7fb ffa2 	bl	80017e0 <_sbrk>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_sbrk_r+0x1a>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_sbrk_r+0x1a>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	200002f4 	.word	0x200002f4

080058ac <strcpy>:
 80058ac:	4603      	mov	r3, r0
 80058ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b2:	f803 2b01 	strb.w	r2, [r3], #1
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	d1f9      	bne.n	80058ae <strcpy+0x2>
 80058ba:	4770      	bx	lr

080058bc <strncpy>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	3901      	subs	r1, #1
 80058c0:	4603      	mov	r3, r0
 80058c2:	b132      	cbz	r2, 80058d2 <strncpy+0x16>
 80058c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058c8:	f803 4b01 	strb.w	r4, [r3], #1
 80058cc:	3a01      	subs	r2, #1
 80058ce:	2c00      	cmp	r4, #0
 80058d0:	d1f7      	bne.n	80058c2 <strncpy+0x6>
 80058d2:	441a      	add	r2, r3
 80058d4:	2100      	movs	r1, #0
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d100      	bne.n	80058dc <strncpy+0x20>
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	f803 1b01 	strb.w	r1, [r3], #1
 80058e0:	e7f9      	b.n	80058d6 <strncpy+0x1a>
	...

080058e4 <_strtol_l.constprop.0>:
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ea:	d001      	beq.n	80058f0 <_strtol_l.constprop.0+0xc>
 80058ec:	2b24      	cmp	r3, #36	; 0x24
 80058ee:	d906      	bls.n	80058fe <_strtol_l.constprop.0+0x1a>
 80058f0:	f7ff feaa 	bl	8005648 <__errno>
 80058f4:	2316      	movs	r3, #22
 80058f6:	6003      	str	r3, [r0, #0]
 80058f8:	2000      	movs	r0, #0
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80059e4 <_strtol_l.constprop.0+0x100>
 8005902:	460d      	mov	r5, r1
 8005904:	462e      	mov	r6, r5
 8005906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800590a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800590e:	f017 0708 	ands.w	r7, r7, #8
 8005912:	d1f7      	bne.n	8005904 <_strtol_l.constprop.0+0x20>
 8005914:	2c2d      	cmp	r4, #45	; 0x2d
 8005916:	d132      	bne.n	800597e <_strtol_l.constprop.0+0x9a>
 8005918:	782c      	ldrb	r4, [r5, #0]
 800591a:	2701      	movs	r7, #1
 800591c:	1cb5      	adds	r5, r6, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d05b      	beq.n	80059da <_strtol_l.constprop.0+0xf6>
 8005922:	2b10      	cmp	r3, #16
 8005924:	d109      	bne.n	800593a <_strtol_l.constprop.0+0x56>
 8005926:	2c30      	cmp	r4, #48	; 0x30
 8005928:	d107      	bne.n	800593a <_strtol_l.constprop.0+0x56>
 800592a:	782c      	ldrb	r4, [r5, #0]
 800592c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005930:	2c58      	cmp	r4, #88	; 0x58
 8005932:	d14d      	bne.n	80059d0 <_strtol_l.constprop.0+0xec>
 8005934:	786c      	ldrb	r4, [r5, #1]
 8005936:	2310      	movs	r3, #16
 8005938:	3502      	adds	r5, #2
 800593a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800593e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005942:	f04f 0c00 	mov.w	ip, #0
 8005946:	fbb8 f9f3 	udiv	r9, r8, r3
 800594a:	4666      	mov	r6, ip
 800594c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005950:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005954:	f1be 0f09 	cmp.w	lr, #9
 8005958:	d816      	bhi.n	8005988 <_strtol_l.constprop.0+0xa4>
 800595a:	4674      	mov	r4, lr
 800595c:	42a3      	cmp	r3, r4
 800595e:	dd24      	ble.n	80059aa <_strtol_l.constprop.0+0xc6>
 8005960:	f1bc 0f00 	cmp.w	ip, #0
 8005964:	db1e      	blt.n	80059a4 <_strtol_l.constprop.0+0xc0>
 8005966:	45b1      	cmp	r9, r6
 8005968:	d31c      	bcc.n	80059a4 <_strtol_l.constprop.0+0xc0>
 800596a:	d101      	bne.n	8005970 <_strtol_l.constprop.0+0x8c>
 800596c:	45a2      	cmp	sl, r4
 800596e:	db19      	blt.n	80059a4 <_strtol_l.constprop.0+0xc0>
 8005970:	fb06 4603 	mla	r6, r6, r3, r4
 8005974:	f04f 0c01 	mov.w	ip, #1
 8005978:	f815 4b01 	ldrb.w	r4, [r5], #1
 800597c:	e7e8      	b.n	8005950 <_strtol_l.constprop.0+0x6c>
 800597e:	2c2b      	cmp	r4, #43	; 0x2b
 8005980:	bf04      	itt	eq
 8005982:	782c      	ldrbeq	r4, [r5, #0]
 8005984:	1cb5      	addeq	r5, r6, #2
 8005986:	e7ca      	b.n	800591e <_strtol_l.constprop.0+0x3a>
 8005988:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800598c:	f1be 0f19 	cmp.w	lr, #25
 8005990:	d801      	bhi.n	8005996 <_strtol_l.constprop.0+0xb2>
 8005992:	3c37      	subs	r4, #55	; 0x37
 8005994:	e7e2      	b.n	800595c <_strtol_l.constprop.0+0x78>
 8005996:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800599a:	f1be 0f19 	cmp.w	lr, #25
 800599e:	d804      	bhi.n	80059aa <_strtol_l.constprop.0+0xc6>
 80059a0:	3c57      	subs	r4, #87	; 0x57
 80059a2:	e7db      	b.n	800595c <_strtol_l.constprop.0+0x78>
 80059a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80059a8:	e7e6      	b.n	8005978 <_strtol_l.constprop.0+0x94>
 80059aa:	f1bc 0f00 	cmp.w	ip, #0
 80059ae:	da05      	bge.n	80059bc <_strtol_l.constprop.0+0xd8>
 80059b0:	2322      	movs	r3, #34	; 0x22
 80059b2:	6003      	str	r3, [r0, #0]
 80059b4:	4646      	mov	r6, r8
 80059b6:	b942      	cbnz	r2, 80059ca <_strtol_l.constprop.0+0xe6>
 80059b8:	4630      	mov	r0, r6
 80059ba:	e79e      	b.n	80058fa <_strtol_l.constprop.0+0x16>
 80059bc:	b107      	cbz	r7, 80059c0 <_strtol_l.constprop.0+0xdc>
 80059be:	4276      	negs	r6, r6
 80059c0:	2a00      	cmp	r2, #0
 80059c2:	d0f9      	beq.n	80059b8 <_strtol_l.constprop.0+0xd4>
 80059c4:	f1bc 0f00 	cmp.w	ip, #0
 80059c8:	d000      	beq.n	80059cc <_strtol_l.constprop.0+0xe8>
 80059ca:	1e69      	subs	r1, r5, #1
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	e7f3      	b.n	80059b8 <_strtol_l.constprop.0+0xd4>
 80059d0:	2430      	movs	r4, #48	; 0x30
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1b1      	bne.n	800593a <_strtol_l.constprop.0+0x56>
 80059d6:	2308      	movs	r3, #8
 80059d8:	e7af      	b.n	800593a <_strtol_l.constprop.0+0x56>
 80059da:	2c30      	cmp	r4, #48	; 0x30
 80059dc:	d0a5      	beq.n	800592a <_strtol_l.constprop.0+0x46>
 80059de:	230a      	movs	r3, #10
 80059e0:	e7ab      	b.n	800593a <_strtol_l.constprop.0+0x56>
 80059e2:	bf00      	nop
 80059e4:	08005a5d 	.word	0x08005a5d

080059e8 <strtol>:
 80059e8:	4613      	mov	r3, r2
 80059ea:	460a      	mov	r2, r1
 80059ec:	4601      	mov	r1, r0
 80059ee:	4802      	ldr	r0, [pc, #8]	; (80059f8 <strtol+0x10>)
 80059f0:	6800      	ldr	r0, [r0, #0]
 80059f2:	f7ff bf77 	b.w	80058e4 <_strtol_l.constprop.0>
 80059f6:	bf00      	nop
 80059f8:	20000014 	.word	0x20000014

080059fc <__malloc_lock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__malloc_lock+0x8>)
 80059fe:	f000 b809 	b.w	8005a14 <__retarget_lock_acquire_recursive>
 8005a02:	bf00      	nop
 8005a04:	200002f8 	.word	0x200002f8

08005a08 <__malloc_unlock>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__malloc_unlock+0x8>)
 8005a0a:	f000 b804 	b.w	8005a16 <__retarget_lock_release_recursive>
 8005a0e:	bf00      	nop
 8005a10:	200002f8 	.word	0x200002f8

08005a14 <__retarget_lock_acquire_recursive>:
 8005a14:	4770      	bx	lr

08005a16 <__retarget_lock_release_recursive>:
 8005a16:	4770      	bx	lr

08005a18 <_init>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr

08005a24 <_fini>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr
