
Qr-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b18  08005b18  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005b18  08005b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b20  08005b20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000284  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f878  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002388  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c90  00000000  00000000  00032a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021eb6  00000000  00000000  000336d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010827  00000000  00000000  00055586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cba87  00000000  00000000  00065dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b58  00000000  00000000  00131884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059d0 	.word	0x080059d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080059d0 	.word	0x080059d0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_d2f>:
 8000554:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000558:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800055c:	bf24      	itt	cs
 800055e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000562:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000566:	d90d      	bls.n	8000584 <__aeabi_d2f+0x30>
 8000568:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800056c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000570:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000574:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000578:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800057c:	bf08      	it	eq
 800057e:	f020 0001 	biceq.w	r0, r0, #1
 8000582:	4770      	bx	lr
 8000584:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000588:	d121      	bne.n	80005ce <__aeabi_d2f+0x7a>
 800058a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058e:	bfbc      	itt	lt
 8000590:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000594:	4770      	bxlt	lr
 8000596:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059e:	f1c2 0218 	rsb	r2, r2, #24
 80005a2:	f1c2 0c20 	rsb	ip, r2, #32
 80005a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	bf18      	it	ne
 80005b0:	f040 0001 	orrne.w	r0, r0, #1
 80005b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c0:	ea40 000c 	orr.w	r0, r0, ip
 80005c4:	fa23 f302 	lsr.w	r3, r3, r2
 80005c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005cc:	e7cc      	b.n	8000568 <__aeabi_d2f+0x14>
 80005ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d2:	d107      	bne.n	80005e4 <__aeabi_d2f+0x90>
 80005d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d8:	bf1e      	ittt	ne
 80005da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e2:	4770      	bxne	lr
 80005e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <__aeabi_uldivmod>:
 80005f4:	b953      	cbnz	r3, 800060c <__aeabi_uldivmod+0x18>
 80005f6:	b94a      	cbnz	r2, 800060c <__aeabi_uldivmod+0x18>
 80005f8:	2900      	cmp	r1, #0
 80005fa:	bf08      	it	eq
 80005fc:	2800      	cmpeq	r0, #0
 80005fe:	bf1c      	itt	ne
 8000600:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000604:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000608:	f000 b974 	b.w	80008f4 <__aeabi_idiv0>
 800060c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000614:	f000 f806 	bl	8000624 <__udivmoddi4>
 8000618:	f8dd e004 	ldr.w	lr, [sp, #4]
 800061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <__udivmoddi4>:
 8000624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000628:	9d08      	ldr	r5, [sp, #32]
 800062a:	4604      	mov	r4, r0
 800062c:	468e      	mov	lr, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14d      	bne.n	80006ce <__udivmoddi4+0xaa>
 8000632:	428a      	cmp	r2, r1
 8000634:	4694      	mov	ip, r2
 8000636:	d969      	bls.n	800070c <__udivmoddi4+0xe8>
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	b152      	cbz	r2, 8000654 <__udivmoddi4+0x30>
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	f1c2 0120 	rsb	r1, r2, #32
 8000646:	fa20 f101 	lsr.w	r1, r0, r1
 800064a:	fa0c fc02 	lsl.w	ip, ip, r2
 800064e:	ea41 0e03 	orr.w	lr, r1, r3
 8000652:	4094      	lsls	r4, r2
 8000654:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000658:	0c21      	lsrs	r1, r4, #16
 800065a:	fbbe f6f8 	udiv	r6, lr, r8
 800065e:	fa1f f78c 	uxth.w	r7, ip
 8000662:	fb08 e316 	mls	r3, r8, r6, lr
 8000666:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066a:	fb06 f107 	mul.w	r1, r6, r7
 800066e:	4299      	cmp	r1, r3
 8000670:	d90a      	bls.n	8000688 <__udivmoddi4+0x64>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800067a:	f080 811f 	bcs.w	80008bc <__udivmoddi4+0x298>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 811c 	bls.w	80008bc <__udivmoddi4+0x298>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 f707 	mul.w	r7, r0, r7
 800069c:	42a7      	cmp	r7, r4
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x92>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006a8:	f080 810a 	bcs.w	80008c0 <__udivmoddi4+0x29c>
 80006ac:	42a7      	cmp	r7, r4
 80006ae:	f240 8107 	bls.w	80008c0 <__udivmoddi4+0x29c>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ba:	1be4      	subs	r4, r4, r7
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa4>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0xc2>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	f000 80ef 	beq.w	80008b6 <__udivmoddi4+0x292>
 80006d8:	2600      	movs	r6, #0
 80006da:	e9c5 0100 	strd	r0, r1, [r5]
 80006de:	4630      	mov	r0, r6
 80006e0:	4631      	mov	r1, r6
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	fab3 f683 	clz	r6, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d14a      	bne.n	8000784 <__udivmoddi4+0x160>
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d302      	bcc.n	80006f8 <__udivmoddi4+0xd4>
 80006f2:	4282      	cmp	r2, r0
 80006f4:	f200 80f9 	bhi.w	80008ea <__udivmoddi4+0x2c6>
 80006f8:	1a84      	subs	r4, r0, r2
 80006fa:	eb61 0303 	sbc.w	r3, r1, r3
 80006fe:	2001      	movs	r0, #1
 8000700:	469e      	mov	lr, r3
 8000702:	2d00      	cmp	r5, #0
 8000704:	d0e0      	beq.n	80006c8 <__udivmoddi4+0xa4>
 8000706:	e9c5 4e00 	strd	r4, lr, [r5]
 800070a:	e7dd      	b.n	80006c8 <__udivmoddi4+0xa4>
 800070c:	b902      	cbnz	r2, 8000710 <__udivmoddi4+0xec>
 800070e:	deff      	udf	#255	; 0xff
 8000710:	fab2 f282 	clz	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	f040 8092 	bne.w	800083e <__udivmoddi4+0x21a>
 800071a:	eba1 010c 	sub.w	r1, r1, ip
 800071e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000722:	fa1f fe8c 	uxth.w	lr, ip
 8000726:	2601      	movs	r6, #1
 8000728:	0c20      	lsrs	r0, r4, #16
 800072a:	fbb1 f3f7 	udiv	r3, r1, r7
 800072e:	fb07 1113 	mls	r1, r7, r3, r1
 8000732:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000736:	fb0e f003 	mul.w	r0, lr, r3
 800073a:	4288      	cmp	r0, r1
 800073c:	d908      	bls.n	8000750 <__udivmoddi4+0x12c>
 800073e:	eb1c 0101 	adds.w	r1, ip, r1
 8000742:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000746:	d202      	bcs.n	800074e <__udivmoddi4+0x12a>
 8000748:	4288      	cmp	r0, r1
 800074a:	f200 80cb 	bhi.w	80008e4 <__udivmoddi4+0x2c0>
 800074e:	4643      	mov	r3, r8
 8000750:	1a09      	subs	r1, r1, r0
 8000752:	b2a4      	uxth	r4, r4
 8000754:	fbb1 f0f7 	udiv	r0, r1, r7
 8000758:	fb07 1110 	mls	r1, r7, r0, r1
 800075c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000760:	fb0e fe00 	mul.w	lr, lr, r0
 8000764:	45a6      	cmp	lr, r4
 8000766:	d908      	bls.n	800077a <__udivmoddi4+0x156>
 8000768:	eb1c 0404 	adds.w	r4, ip, r4
 800076c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000770:	d202      	bcs.n	8000778 <__udivmoddi4+0x154>
 8000772:	45a6      	cmp	lr, r4
 8000774:	f200 80bb 	bhi.w	80008ee <__udivmoddi4+0x2ca>
 8000778:	4608      	mov	r0, r1
 800077a:	eba4 040e 	sub.w	r4, r4, lr
 800077e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000782:	e79c      	b.n	80006be <__udivmoddi4+0x9a>
 8000784:	f1c6 0720 	rsb	r7, r6, #32
 8000788:	40b3      	lsls	r3, r6
 800078a:	fa22 fc07 	lsr.w	ip, r2, r7
 800078e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000792:	fa20 f407 	lsr.w	r4, r0, r7
 8000796:	fa01 f306 	lsl.w	r3, r1, r6
 800079a:	431c      	orrs	r4, r3
 800079c:	40f9      	lsrs	r1, r7
 800079e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a2:	fa00 f306 	lsl.w	r3, r0, r6
 80007a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80007aa:	0c20      	lsrs	r0, r4, #16
 80007ac:	fa1f fe8c 	uxth.w	lr, ip
 80007b0:	fb09 1118 	mls	r1, r9, r8, r1
 80007b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b8:	fb08 f00e 	mul.w	r0, r8, lr
 80007bc:	4288      	cmp	r0, r1
 80007be:	fa02 f206 	lsl.w	r2, r2, r6
 80007c2:	d90b      	bls.n	80007dc <__udivmoddi4+0x1b8>
 80007c4:	eb1c 0101 	adds.w	r1, ip, r1
 80007c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007cc:	f080 8088 	bcs.w	80008e0 <__udivmoddi4+0x2bc>
 80007d0:	4288      	cmp	r0, r1
 80007d2:	f240 8085 	bls.w	80008e0 <__udivmoddi4+0x2bc>
 80007d6:	f1a8 0802 	sub.w	r8, r8, #2
 80007da:	4461      	add	r1, ip
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e4:	fb09 1110 	mls	r1, r9, r0, r1
 80007e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f0:	458e      	cmp	lr, r1
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1e2>
 80007f4:	eb1c 0101 	adds.w	r1, ip, r1
 80007f8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007fc:	d26c      	bcs.n	80008d8 <__udivmoddi4+0x2b4>
 80007fe:	458e      	cmp	lr, r1
 8000800:	d96a      	bls.n	80008d8 <__udivmoddi4+0x2b4>
 8000802:	3802      	subs	r0, #2
 8000804:	4461      	add	r1, ip
 8000806:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080a:	fba0 9402 	umull	r9, r4, r0, r2
 800080e:	eba1 010e 	sub.w	r1, r1, lr
 8000812:	42a1      	cmp	r1, r4
 8000814:	46c8      	mov	r8, r9
 8000816:	46a6      	mov	lr, r4
 8000818:	d356      	bcc.n	80008c8 <__udivmoddi4+0x2a4>
 800081a:	d053      	beq.n	80008c4 <__udivmoddi4+0x2a0>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x212>
 800081e:	ebb3 0208 	subs.w	r2, r3, r8
 8000822:	eb61 010e 	sbc.w	r1, r1, lr
 8000826:	fa01 f707 	lsl.w	r7, r1, r7
 800082a:	fa22 f306 	lsr.w	r3, r2, r6
 800082e:	40f1      	lsrs	r1, r6
 8000830:	431f      	orrs	r7, r3
 8000832:	e9c5 7100 	strd	r7, r1, [r5]
 8000836:	2600      	movs	r6, #0
 8000838:	4631      	mov	r1, r6
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	40d8      	lsrs	r0, r3
 8000844:	fa0c fc02 	lsl.w	ip, ip, r2
 8000848:	fa21 f303 	lsr.w	r3, r1, r3
 800084c:	4091      	lsls	r1, r2
 800084e:	4301      	orrs	r1, r0
 8000850:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000854:	fa1f fe8c 	uxth.w	lr, ip
 8000858:	fbb3 f0f7 	udiv	r0, r3, r7
 800085c:	fb07 3610 	mls	r6, r7, r0, r3
 8000860:	0c0b      	lsrs	r3, r1, #16
 8000862:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000866:	fb00 f60e 	mul.w	r6, r0, lr
 800086a:	429e      	cmp	r6, r3
 800086c:	fa04 f402 	lsl.w	r4, r4, r2
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x260>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800087a:	d22f      	bcs.n	80008dc <__udivmoddi4+0x2b8>
 800087c:	429e      	cmp	r6, r3
 800087e:	d92d      	bls.n	80008dc <__udivmoddi4+0x2b8>
 8000880:	3802      	subs	r0, #2
 8000882:	4463      	add	r3, ip
 8000884:	1b9b      	subs	r3, r3, r6
 8000886:	b289      	uxth	r1, r1
 8000888:	fbb3 f6f7 	udiv	r6, r3, r7
 800088c:	fb07 3316 	mls	r3, r7, r6, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb06 f30e 	mul.w	r3, r6, lr
 8000898:	428b      	cmp	r3, r1
 800089a:	d908      	bls.n	80008ae <__udivmoddi4+0x28a>
 800089c:	eb1c 0101 	adds.w	r1, ip, r1
 80008a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008a4:	d216      	bcs.n	80008d4 <__udivmoddi4+0x2b0>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d914      	bls.n	80008d4 <__udivmoddi4+0x2b0>
 80008aa:	3e02      	subs	r6, #2
 80008ac:	4461      	add	r1, ip
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b4:	e738      	b.n	8000728 <__udivmoddi4+0x104>
 80008b6:	462e      	mov	r6, r5
 80008b8:	4628      	mov	r0, r5
 80008ba:	e705      	b.n	80006c8 <__udivmoddi4+0xa4>
 80008bc:	4606      	mov	r6, r0
 80008be:	e6e3      	b.n	8000688 <__udivmoddi4+0x64>
 80008c0:	4618      	mov	r0, r3
 80008c2:	e6f8      	b.n	80006b6 <__udivmoddi4+0x92>
 80008c4:	454b      	cmp	r3, r9
 80008c6:	d2a9      	bcs.n	800081c <__udivmoddi4+0x1f8>
 80008c8:	ebb9 0802 	subs.w	r8, r9, r2
 80008cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d0:	3801      	subs	r0, #1
 80008d2:	e7a3      	b.n	800081c <__udivmoddi4+0x1f8>
 80008d4:	4646      	mov	r6, r8
 80008d6:	e7ea      	b.n	80008ae <__udivmoddi4+0x28a>
 80008d8:	4620      	mov	r0, r4
 80008da:	e794      	b.n	8000806 <__udivmoddi4+0x1e2>
 80008dc:	4640      	mov	r0, r8
 80008de:	e7d1      	b.n	8000884 <__udivmoddi4+0x260>
 80008e0:	46d0      	mov	r8, sl
 80008e2:	e77b      	b.n	80007dc <__udivmoddi4+0x1b8>
 80008e4:	3b02      	subs	r3, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	e732      	b.n	8000750 <__udivmoddi4+0x12c>
 80008ea:	4630      	mov	r0, r6
 80008ec:	e709      	b.n	8000702 <__udivmoddi4+0xde>
 80008ee:	4464      	add	r4, ip
 80008f0:	3802      	subs	r0, #2
 80008f2:	e742      	b.n	800077a <__udivmoddi4+0x156>

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a37      	ldr	r2, [pc, #220]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <MX_GPIO_Init+0xfc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_GPIO_Init+0xfc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a29      	ldr	r2, [pc, #164]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <MX_GPIO_Init+0xfc>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_2_Pin|EN_2C3_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	210a      	movs	r1, #10
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <MX_GPIO_Init+0x100>)
 80009a0:	f001 ff48 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_1_Pin|EN_1E10_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <MX_GPIO_Init+0x104>)
 80009ac:	f001 ff42 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_2_Pin|EN_2C3_Pin;
 80009b0:	230a      	movs	r3, #10
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_GPIO_Init+0x100>)
 80009c8:	f001 fd98 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_1_Pin|EN_1E10_Pin;
 80009cc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_GPIO_Init+0x104>)
 80009e6:	f001 fd89 	bl	80024fc <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40021000 	.word	0x40021000

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f001 fb64 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f828 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f7ff ff74 	bl	80008f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a10:	f000 ff26 	bl	8001860 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a14:	f000 ff70 	bl	80018f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a18:	f001 f816 	bl	8001a48 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000a1c:	f000 fe90 	bl	8001740 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a20:	f001 f9d2 	bl	8001dc8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000a24:	f000 ffbc 	bl	80019a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000a28:	f000 f880 	bl	8000b2c <SerialInit>
  MotorInit();
 8000a2c:	f000 f984 	bl	8000d38 <MotorInit>
  MotorSetRun();
 8000a30:	f000 f920 	bl	8000c74 <MotorSetRun>
//  __HAL_TIM_SetCounter(&htim8, 32768);

  tProcess = NONE;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <main+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]


//	    MotorSetDuty(0, MOTOR_1);
//	    MotorSetDuty(300, MOTOR_2);

  __HAL_TIM_SetCounter(&htim3, 32768);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <main+0x54>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SetCounter(&htim4, 32768);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <main+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x4e>
 8000a50:	2000011c 	.word	0x2000011c
 8000a54:	200001cc 	.word	0x200001cc
 8000a58:	20000214 	.word	0x20000214

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fe02 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <SystemClock_Config+0xc8>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <SystemClock_Config+0xc8>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <SystemClock_Config+0xc8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <SystemClock_Config+0xcc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <SystemClock_Config+0xcc>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <SystemClock_Config+0xcc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ad0:	2348      	movs	r3, #72	; 0x48
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fec1 	bl	8002868 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aec:	f000 fc20 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 f923 	bl	8002d58 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b18:	f000 fc0a 	bl	8001330 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3750      	adds	r7, #80	; 0x50
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8000b30:	2212      	movs	r2, #18
 8000b32:	4903      	ldr	r1, [pc, #12]	; (8000b40 <SerialInit+0x14>)
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <SerialInit+0x18>)
 8000b36:	f003 fdc6 	bl	80046c6 <HAL_UART_Receive_IT>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000094 	.word	0x20000094
 8000b44:	200002a4 	.word	0x200002a4

08000b48 <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8000b4c:	2212      	movs	r2, #18
 8000b4e:	4903      	ldr	r1, [pc, #12]	; (8000b5c <SerialAcceptReceive+0x14>)
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <SerialAcceptReceive+0x18>)
 8000b52:	f003 fdb8 	bl	80046c6 <HAL_UART_Receive_IT>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000094 	.word	0x20000094
 8000b60:	200002a4 	.word	0x200002a4

08000b64 <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6178      	str	r0, [r7, #20]
  if (huart->Instance == huart2.Instance)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_UART_RxCpltCallback+0xdc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d15f      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0xd4>
    //	  MotorSetDuty(0, MOTOR_2);
    //	  MotorSetDuty(0, MOTOR_1);
//	  __HAL_TIM_SetCounter(&htim8, 32768);
//	  __HAL_TIM_SetCounter(&htim1, 32768);

	  __HAL_TIM_SetCounter(&htim3, 32768);
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <HAL_UART_RxCpltCallback+0xe0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SetCounter(&htim4, 32768);
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <HAL_UART_RxCpltCallback+0xe4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
	    tProcess = NONE;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <HAL_UART_RxCpltCallback+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
	    PIDReset(&tPID_1);
 8000b92:	482f      	ldr	r0, [pc, #188]	; (8000c50 <HAL_UART_RxCpltCallback+0xec>)
 8000b94:	f000 fc82 	bl	800149c <PIDReset>
	    PIDReset(&tPID_2);
 8000b98:	482e      	ldr	r0, [pc, #184]	; (8000c54 <HAL_UART_RxCpltCallback+0xf0>)
 8000b9a:	f000 fc7f 	bl	800149c <PIDReset>


	    if(!strcmp(dataBuffer, "1111,1111,1111,1,1")){
 8000b9e:	492e      	ldr	r1, [pc, #184]	; (8000c58 <HAL_UART_RxCpltCallback+0xf4>)
 8000ba0:	482e      	ldr	r0, [pc, #184]	; (8000c5c <HAL_UART_RxCpltCallback+0xf8>)
 8000ba2:	f7ff fb11 	bl	80001c8 <strcmp>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d107      	bne.n	8000bbc <HAL_UART_RxCpltCallback+0x58>
	    	HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8000bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	492b      	ldr	r1, [pc, #172]	; (8000c60 <HAL_UART_RxCpltCallback+0xfc>)
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <HAL_UART_RxCpltCallback+0xdc>)
 8000bb6:	f003 fcf4 	bl	80045a2 <HAL_UART_Transmit>
 8000bba:	e03b      	b.n	8000c34 <HAL_UART_RxCpltCallback+0xd0>
	    }
	    else {
	    	 HAL_UART_Transmit(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA, 1000);
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	2212      	movs	r2, #18
 8000bc2:	4926      	ldr	r1, [pc, #152]	; (8000c5c <HAL_UART_RxCpltCallback+0xf8>)
 8000bc4:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_UART_RxCpltCallback+0xdc>)
 8000bc6:	f003 fcec 	bl	80045a2 <HAL_UART_Transmit>
	    	    arrData1 = ArrProcess(dataBuffer);
 8000bca:	4c26      	ldr	r4, [pc, #152]	; (8000c64 <HAL_UART_RxCpltCallback+0x100>)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4923      	ldr	r1, [pc, #140]	; (8000c5c <HAL_UART_RxCpltCallback+0xf8>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f9b9 	bl	8001f48 <ArrProcess>
 8000bd6:	4623      	mov	r3, r4
 8000bd8:	463a      	mov	r2, r7
 8000bda:	6810      	ldr	r0, [r2, #0]
 8000bdc:	6851      	ldr	r1, [r2, #4]
 8000bde:	c303      	stmia	r3!, {r0, r1}
 8000be0:	8912      	ldrh	r2, [r2, #8]
 8000be2:	801a      	strh	r2, [r3, #0]
	    	    MotorTrapzoidalInit(&tProfile, arrData1.pos1, arrData1.vel1, arrData1.acc1);
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_UART_RxCpltCallback+0x100>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_UART_RxCpltCallback+0x100>)
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	ee07 3a10 	vmov	s14, r3
 8000bf8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_UART_RxCpltCallback+0x100>)
 8000bfe:	889b      	ldrh	r3, [r3, #4]
 8000c00:	ee06 3a90 	vmov	s13, r3
 8000c04:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000c08:	eeb0 1a66 	vmov.f32	s2, s13
 8000c0c:	eef0 0a47 	vmov.f32	s1, s14
 8000c10:	eeb0 0a67 	vmov.f32	s0, s15
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <HAL_UART_RxCpltCallback+0x104>)
 8000c16:	f000 fb90 	bl	800133a <MotorTrapzoidalInit>
	    	    dir1 = arrData1.dir1;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_UART_RxCpltCallback+0x100>)
 8000c1c:	88db      	ldrh	r3, [r3, #6]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_UART_RxCpltCallback+0x108>)
 8000c22:	701a      	strb	r2, [r3, #0]
	    	    dir2 = arrData1.dir2;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_UART_RxCpltCallback+0x100>)
 8000c26:	891b      	ldrh	r3, [r3, #8]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_RxCpltCallback+0x10c>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	    	    tProcess = RUN_TEST;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_UART_RxCpltCallback+0xe8>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]

	    }
//	    memset(dataBuffer, '\0', 18*sizeof(char));
	    SerialAcceptReceive();
 8000c34:	f7ff ff88 	bl	8000b48 <SerialAcceptReceive>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	200002a4 	.word	0x200002a4
 8000c44:	200001cc 	.word	0x200001cc
 8000c48:	20000214 	.word	0x20000214
 8000c4c:	2000011c 	.word	0x2000011c
 8000c50:	200000c0 	.word	0x200000c0
 8000c54:	200000d4 	.word	0x200000d4
 8000c58:	080059e8 	.word	0x080059e8
 8000c5c:	20000094 	.word	0x20000094
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000120 	.word	0x20000120
 8000c68:	200000e8 	.word	0x200000e8
 8000c6c:	2000012a 	.word	0x2000012a
 8000c70:	2000012b 	.word	0x2000012b

08000c74 <MotorSetRun>:

// set motor direction

// set (-) pwm
void MotorSetRun()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
//
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <MotorSetRun+0x34>)
 8000c7e:	f001 fdd9 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2108      	movs	r1, #8
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <MotorSetRun+0x38>)
 8000c88:	f001 fdd4 	bl	8002834 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MotorSetRun+0x3c>)
 8000c94:	f001 fdce 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MotorSetRun+0x3c>)
 8000ca0:	f001 fdc8 	bl	8002834 <HAL_GPIO_WritePin>

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <MotorSetDuty>:
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
}

void MotorSetDuty(uint16_t nDuty, uint8_t channel,  uint8_t dir)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	717b      	strb	r3, [r7, #5]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	713b      	strb	r3, [r7, #4]
  if (channel == MOTOR_1)
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d114      	bne.n	8000cf6 <MotorSetDuty+0x42>
  {
	  if (dir == GO_BACK){
 8000ccc:	793b      	ldrb	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d106      	bne.n	8000ce0 <MotorSetDuty+0x2c>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <MotorSetDuty+0x74>)
 8000cda:	f001 fdab 	bl	8002834 <HAL_GPIO_WritePin>
 8000cde:	e005      	b.n	8000cec <MotorSetDuty+0x38>
	  } else {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce6:	4810      	ldr	r0, [pc, #64]	; (8000d28 <MotorSetDuty+0x74>)
 8000ce8:	f001 fda4 	bl	8002834 <HAL_GPIO_WritePin>
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,nDuty);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MotorSetDuty+0x78>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	  } else {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
	  }
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, nDuty);
  }
}
 8000cf4:	e014      	b.n	8000d20 <MotorSetDuty+0x6c>
  else if (channel == MOTOR_2)
 8000cf6:	797b      	ldrb	r3, [r7, #5]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d111      	bne.n	8000d20 <MotorSetDuty+0x6c>
	  if (dir == GO_BACK){
 8000cfc:	793b      	ldrb	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d105      	bne.n	8000d0e <MotorSetDuty+0x5a>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2102      	movs	r1, #2
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <MotorSetDuty+0x7c>)
 8000d08:	f001 fd94 	bl	8002834 <HAL_GPIO_WritePin>
 8000d0c:	e004      	b.n	8000d18 <MotorSetDuty+0x64>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2102      	movs	r1, #2
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MotorSetDuty+0x7c>)
 8000d14:	f001 fd8e 	bl	8002834 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, nDuty);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MotorSetDuty+0x80>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	88fa      	ldrh	r2, [r7, #6]
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	2000013c 	.word	0x2000013c
 8000d30:	40020800 	.word	0x40020800
 8000d34:	2000025c 	.word	0x2000025c

08000d38 <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8000d3c:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <MotorInit+0x88>)
 8000d3e:	f002 fa7b 	bl	8003238 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d42:	2108      	movs	r1, #8
 8000d44:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <MotorInit+0x8c>)
 8000d46:	f002 fb37 	bl	80033b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <MotorInit+0x90>)
 8000d4e:	f002 fb33 	bl	80033b8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000d52:	2100      	movs	r1, #0
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MotorInit+0x90>)
 8000d56:	f002 fb2f 	bl	80033b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <MotorInit+0x8c>)
 8000d5e:	f002 fb2b 	bl	80033b8 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4819      	ldr	r0, [pc, #100]	; (8000dcc <MotorInit+0x94>)
 8000d66:	f002 fc95 	bl	8003694 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <MotorInit+0x94>)
 8000d6e:	f002 fc91 	bl	8003694 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000d72:	2100      	movs	r1, #0
 8000d74:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <MotorInit+0x98>)
 8000d76:	f002 fc8d 	bl	8003694 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <MotorInit+0x98>)
 8000d7e:	f002 fc89 	bl	8003694 <HAL_TIM_Encoder_Start>

  PIDInit(&tPID_1, 3.5, 1.5, 0.2);
 8000d82:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000dd4 <MotorInit+0x9c>
 8000d86:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000d8a:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <MotorInit+0xa0>)
 8000d90:	f000 fb9c 	bl	80014cc <PIDInit>
  PIDInit(&tPID_2, 3.5, 1.5, 0.2);
 8000d94:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000dd4 <MotorInit+0x9c>
 8000d98:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000d9c:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8000da0:	480e      	ldr	r0, [pc, #56]	; (8000ddc <MotorInit+0xa4>)
 8000da2:	f000 fb93 	bl	80014cc <PIDInit>

  MotorSetDuty(0, MOTOR_1, GO_AHEAD);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2101      	movs	r1, #1
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff ff82 	bl	8000cb4 <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2, GO_AHEAD);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2102      	movs	r1, #2
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff7d 	bl	8000cb4 <MotorSetDuty>

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	2000013c 	.word	0x2000013c
 8000dc8:	2000025c 	.word	0x2000025c
 8000dcc:	200001cc 	.word	0x200001cc
 8000dd0:	20000214 	.word	0x20000214
 8000dd4:	3e4ccccd 	.word	0x3e4ccccd
 8000dd8:	200000c0 	.word	0x200000c0
 8000ddc:	200000d4 	.word	0x200000d4

08000de0 <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse, uint8_t motor)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
  if (motor == MOTOR_1)
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d105      	bne.n	8000dfe <MotorGetPulse+0x1e>
  {
    *nPulse = __HAL_TIM_GetCounter(&htim4);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MotorGetPulse+0x3c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
  }
  else if (motor == MOTOR_2)
  {
    *nPulse = __HAL_TIM_GetCounter(&htim3);
  }
}
 8000dfc:	e007      	b.n	8000e0e <MotorGetPulse+0x2e>
  else if (motor == MOTOR_2)
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d104      	bne.n	8000e0e <MotorGetPulse+0x2e>
    *nPulse = __HAL_TIM_GetCounter(&htim3);
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MotorGetPulse+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000214 	.word	0x20000214
 8000e20:	200001cc 	.word	0x200001cc

08000e24 <HAL_TIM_PeriodElapsedCallback>:

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim2.Instance)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d114      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
//	  MotorGetPulse(&nPulse1, MOTOR_1); // get encoder counter
//	   MotorGetPulse(&nPulse2, MOTOR_2);// get encoder counter
    switch (tProcess)
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d012      	beq.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d000      	beq.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x22>
    	 MotorSetRun();
      MotorMovePos(&tProfile, &tPID_1, &tPID_2, dir1, dir2);
//    	break;
    }
  }
}
 8000e44:	e010      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x44>
    	 MotorSetRun();
 8000e46:	f7ff ff15 	bl	8000c74 <MotorSetRun>
      MotorMovePos(&tProfile, &tPID_1, &tPID_2, dir1, dir2);
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	4613      	mov	r3, r2
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e58:	490a      	ldr	r1, [pc, #40]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e5c:	f000 f818 	bl	8000e90 <MotorMovePos>
}
 8000e60:	e002      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x44>
  }
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x44>
      break;
 8000e66:	bf00      	nop
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000184 	.word	0x20000184
 8000e74:	2000011c 	.word	0x2000011c
 8000e78:	2000012a 	.word	0x2000012a
 8000e7c:	2000012b 	.word	0x2000012b
 8000e80:	200000d4 	.word	0x200000d4
 8000e84:	200000c0 	.word	0x200000c0
 8000e88:	200000e8 	.word	0x200000e8
 8000e8c:	00000000 	.word	0x00000000

08000e90 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl1, PID_CONTROL_t *tPIDControl2, uint8_t dir1, uint8_t dir2)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	70fb      	strb	r3, [r7, #3]
  int32_t g_nDutyCycle_1, g_nDutyCycle_2;
  uint32_t g_nActPulse_1_tmp, g_nActPulse_2_tmp;

  MotorGetPulse(&nPulse1, MOTOR_1); // get encoder counter
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	48b5      	ldr	r0, [pc, #724]	; (8001178 <MotorMovePos+0x2e8>)
 8000ea2:	f7ff ff9d 	bl	8000de0 <MotorGetPulse>
  MotorGetPulse(&nPulse2, MOTOR_2); // get encoder counter
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	48b4      	ldr	r0, [pc, #720]	; (800117c <MotorMovePos+0x2ec>)
 8000eaa:	f7ff ff99 	bl	8000de0 <MotorGetPulse>
  if (dir1 == HEAD)
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d119      	bne.n	8000ee8 <MotorMovePos+0x58>
  {
	  if((nPulse1 < 32768) && (tProfile->nTime < 0.5)){
 8000eb4:	4bb0      	ldr	r3, [pc, #704]	; (8001178 <MotorMovePos+0x2e8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ebc:	d20d      	bcs.n	8000eda <MotorMovePos+0x4a>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ec4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed0:	d503      	bpl.n	8000eda <MotorMovePos+0x4a>

		  nPulse1 = 32768;
 8000ed2:	4ba9      	ldr	r3, [pc, #676]	; (8001178 <MotorMovePos+0x2e8>)
 8000ed4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed8:	601a      	str	r2, [r3, #0]
	  }
    g_nActPulse_1 = nPulse1 - 32768;
 8000eda:	4ba7      	ldr	r3, [pc, #668]	; (8001178 <MotorMovePos+0x2e8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000ee2:	4aa7      	ldr	r2, [pc, #668]	; (8001180 <MotorMovePos+0x2f0>)
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e018      	b.n	8000f1a <MotorMovePos+0x8a>
  }
  else
  {
	  if((nPulse1 > 32768) && (tProfile->nTime < 0.5)){
 8000ee8:	4ba3      	ldr	r3, [pc, #652]	; (8001178 <MotorMovePos+0x2e8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef0:	d90d      	bls.n	8000f0e <MotorMovePos+0x7e>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ef8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d503      	bpl.n	8000f0e <MotorMovePos+0x7e>
		  nPulse1 = 32768;
 8000f06:	4b9c      	ldr	r3, [pc, #624]	; (8001178 <MotorMovePos+0x2e8>)
 8000f08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f0c:	601a      	str	r2, [r3, #0]
	  }
    g_nActPulse_1 = 32768 - nPulse1;
 8000f0e:	4b9a      	ldr	r3, [pc, #616]	; (8001178 <MotorMovePos+0x2e8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000f16:	4a9a      	ldr	r2, [pc, #616]	; (8001180 <MotorMovePos+0x2f0>)
 8000f18:	6013      	str	r3, [r2, #0]
  }

  if (dir2 == HEAD)
 8000f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d119      	bne.n	8000f56 <MotorMovePos+0xc6>
  {
	  if((nPulse2 < 32768) && (tProfile->nTime < 0.5)){
 8000f22:	4b96      	ldr	r3, [pc, #600]	; (800117c <MotorMovePos+0x2ec>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f2a:	d20d      	bcs.n	8000f48 <MotorMovePos+0xb8>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	d503      	bpl.n	8000f48 <MotorMovePos+0xb8>
		  nPulse2 = 32768;
 8000f40:	4b8e      	ldr	r3, [pc, #568]	; (800117c <MotorMovePos+0x2ec>)
 8000f42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f46:	601a      	str	r2, [r3, #0]
	  }
	  g_nActPulse_2 = nPulse2 - 32768;
 8000f48:	4b8c      	ldr	r3, [pc, #560]	; (800117c <MotorMovePos+0x2ec>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f50:	4a8c      	ldr	r2, [pc, #560]	; (8001184 <MotorMovePos+0x2f4>)
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e018      	b.n	8000f88 <MotorMovePos+0xf8>
  }
  else
  {
	  if((nPulse2 > 32768) && (tProfile->nTime < 0.5)){
 8000f56:	4b89      	ldr	r3, [pc, #548]	; (800117c <MotorMovePos+0x2ec>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f5e:	d90d      	bls.n	8000f7c <MotorMovePos+0xec>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	d503      	bpl.n	8000f7c <MotorMovePos+0xec>
		  nPulse2 = 32768;
 8000f74:	4b81      	ldr	r3, [pc, #516]	; (800117c <MotorMovePos+0x2ec>)
 8000f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f7a:	601a      	str	r2, [r3, #0]
	  }
    g_nActPulse_2 = 32768 - nPulse2;
 8000f7c:	4b7f      	ldr	r3, [pc, #508]	; (800117c <MotorMovePos+0x2ec>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000f84:	4a7f      	ldr	r2, [pc, #508]	; (8001184 <MotorMovePos+0x2f4>)
 8000f86:	6013      	str	r3, [r2, #0]
  }

  g_nActPulse_1_tmp = g_nActPulse_1;
 8000f88:	4b7d      	ldr	r3, [pc, #500]	; (8001180 <MotorMovePos+0x2f0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	623b      	str	r3, [r7, #32]
  g_nActPulse_2_tmp = g_nActPulse_2;
 8000f8e:	4b7d      	ldr	r3, [pc, #500]	; (8001184 <MotorMovePos+0x2f4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	61fb      	str	r3, [r7, #28]





  float dPosTemp = 0;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d820      	bhi.n	8000ff2 <MotorMovePos+0x162>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fdc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	4b67      	ldr	r3, [pc, #412]	; (8001188 <MotorMovePos+0x2f8>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]
 8000ff0:	e065      	b.n	80010be <MotorMovePos+0x22e>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	d817      	bhi.n	8001038 <MotorMovePos+0x1a8>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	ed93 7a04 	vldr	s14, [r3, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	edd3 7a05 	vldr	s15, [r3, #20]
 800101e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_dCmdVel = tProfile->dA2;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	4a55      	ldr	r2, [pc, #340]	; (8001188 <MotorMovePos+0x2f8>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e042      	b.n	80010be <MotorMovePos+0x22e>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	d834      	bhi.n	80010b8 <MotorMovePos+0x228>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	ed93 7a06 	vldr	s14, [r3, #24]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800105a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	edd3 6a07 	vldr	s13, [r3, #28]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	edd3 7a06 	vldr	s15, [r3, #24]
 8001098:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	4b35      	ldr	r3, [pc, #212]	; (8001188 <MotorMovePos+0x2f8>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]
 80010b6:	e002      	b.n	80010be <MotorMovePos+0x22e>
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  // Control PID
  g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 80010be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 ff15 	bl	8001efc <ConvertDegToPulse>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MotorMovePos+0x2fc>)
 80010d8:	601a      	str	r2, [r3, #0]

  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_nCmdPulse, g_nActPulse_1_tmp, SAMPLING_TIME);
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MotorMovePos+0x2fc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	ee07 3a10 	vmov	s14, r3
 80010ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010f0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001190 <MotorMovePos+0x300>
 80010f4:	eef0 0a47 	vmov.f32	s1, s14
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f000 f9ff 	bl	8001500 <PIDCompute>
 8001102:	eef0 7a40 	vmov.f32	s15, s0
 8001106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110a:	ee17 3a90 	vmov	r3, s15
 800110e:	b21b      	sxth	r3, r3
 8001110:	61bb      	str	r3, [r7, #24]
  g_nDutyCycle_2 = (int16_t)PIDCompute(tPIDControl2, g_nCmdPulse, g_nActPulse_2_tmp, SAMPLING_TIME);
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MotorMovePos+0x2fc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	ee07 3a10 	vmov	s14, r3
 8001124:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001128:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001190 <MotorMovePos+0x300>
 800112c:	eef0 0a47 	vmov.f32	s1, s14
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f9e3 	bl	8001500 <PIDCompute>
 800113a:	eef0 7a40 	vmov.f32	s15, s0
 800113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001142:	ee17 3a90 	vmov	r3, s15
 8001146:	b21b      	sxth	r3, r3
 8001148:	617b      	str	r3, [r7, #20]

  dutyCycle_global_1 = g_nDutyCycle_1;
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MotorMovePos+0x304>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6013      	str	r3, [r2, #0]
  dutyCycle_global_2 = g_nDutyCycle_2;
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <MotorMovePos+0x308>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	6013      	str	r3, [r2, #0]
  if (g_nDutyCycle_1 >= 0)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db2a      	blt.n	80011b2 <MotorMovePos+0x322>
  {
    if (dir1 == HEAD)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d11c      	bne.n	800119c <MotorMovePos+0x30c>
    {
      MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1, GO_AHEAD);
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bfb8      	it	lt
 8001168:	425b      	neglt	r3, r3
 800116a:	b29b      	uxth	r3, r3
 800116c:	2201      	movs	r2, #1
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fd9f 	bl	8000cb4 <MotorSetDuty>
 8001176:	e037      	b.n	80011e8 <MotorMovePos+0x358>
 8001178:	200000b8 	.word	0x200000b8
 800117c:	200000bc 	.word	0x200000bc
 8001180:	200000a8 	.word	0x200000a8
 8001184:	200000ac 	.word	0x200000ac
 8001188:	200000b4 	.word	0x200000b4
 800118c:	200000b0 	.word	0x200000b0
 8001190:	3ba3d70a 	.word	0x3ba3d70a
 8001194:	2000012c 	.word	0x2000012c
 8001198:	20000130 	.word	0x20000130
    }
    else
    {
      MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1,GO_BACK);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfb8      	it	lt
 80011a2:	425b      	neglt	r3, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fd82 	bl	8000cb4 <MotorSetDuty>
 80011b0:	e01a      	b.n	80011e8 <MotorMovePos+0x358>
    }
  }
  else if (g_nDutyCycle_1 < 0)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da17      	bge.n	80011e8 <MotorMovePos+0x358>
  {

    if (dir1 == HEAD)
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10a      	bne.n	80011d4 <MotorMovePos+0x344>
    {
      MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1, GO_BACK);
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bfb8      	it	lt
 80011c4:	425b      	neglt	r3, r3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd71 	bl	8000cb4 <MotorSetDuty>
 80011d2:	e009      	b.n	80011e8 <MotorMovePos+0x358>
    }
    else
    {
      MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1, GO_AHEAD);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bfb8      	it	lt
 80011da:	425b      	neglt	r3, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2201      	movs	r2, #1
 80011e0:	2101      	movs	r1, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd66 	bl	8000cb4 <MotorSetDuty>
    }

  }

  if (g_nDutyCycle_2 >= 0)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db19      	blt.n	8001222 <MotorMovePos+0x392>
  {
    if (dir2 == HEAD)
 80011ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10a      	bne.n	800120c <MotorMovePos+0x37c>
    {
      MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2, GO_AHEAD);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bfb8      	it	lt
 80011fc:	425b      	neglt	r3, r3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fd55 	bl	8000cb4 <MotorSetDuty>
 800120a:	e026      	b.n	800125a <MotorMovePos+0x3ca>
    }
    else
    {
      MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2, GO_BACK);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	bfb8      	it	lt
 8001212:	425b      	neglt	r3, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd4a 	bl	8000cb4 <MotorSetDuty>
 8001220:	e01b      	b.n	800125a <MotorMovePos+0x3ca>
    }
  }
  else if (g_nDutyCycle_2 < 0)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da18      	bge.n	800125a <MotorMovePos+0x3ca>
  {

    if (dir2 == HEAD)
 8001228:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10a      	bne.n	8001246 <MotorMovePos+0x3b6>
    {
    	MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2, GO_BACK);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd38 	bl	8000cb4 <MotorSetDuty>
 8001244:	e009      	b.n	800125a <MotorMovePos+0x3ca>
    }
    else
    {
    	MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2, GO_AHEAD);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b00      	cmp	r3, #0
 800124a:	bfb8      	it	lt
 800124c:	425b      	neglt	r3, r3
 800124e:	b29b      	uxth	r3, r3
 8001250:	2201      	movs	r2, #1
 8001252:	2102      	movs	r1, #2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd2d 	bl	8000cb4 <MotorSetDuty>
    }
  }

  if (tProfile->nTime > tProfile->dMidStep3)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dd32      	ble.n	80012d6 <MotorMovePos+0x446>
  {
    __HAL_TIM_SetCounter(&htim4, 32768);
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MotorMovePos+0x480>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim3, 32768);
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MotorMovePos+0x484>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    g_nDutyCycle_1 = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
    g_nDutyCycle_2 = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
    g_dCmdVel = 0;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MotorMovePos+0x488>)
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MotorMovePos+0x48c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(0, MOTOR_1, GO_AHEAD);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2101      	movs	r1, #1
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fd01 	bl	8000cb4 <MotorSetDuty>
    MotorSetDuty(0, MOTOR_2, GO_AHEAD);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2102      	movs	r1, #2
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fcfc 	bl	8000cb4 <MotorSetDuty>
    PIDReset(&tPID_2);
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <MotorMovePos+0x490>)
 80012be:	f000 f8ed 	bl	800149c <PIDReset>
    PIDReset(&tPID_1);
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <MotorMovePos+0x494>)
 80012c4:	f000 f8ea 	bl	800149c <PIDReset>
    HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	2205      	movs	r2, #5
 80012ce:	4916      	ldr	r1, [pc, #88]	; (8001328 <MotorMovePos+0x498>)
 80012d0:	4816      	ldr	r0, [pc, #88]	; (800132c <MotorMovePos+0x49c>)
 80012d2:	f003 f966 	bl	80045a2 <HAL_UART_Transmit>
  }
  tProfile->nTime += SAMPLING_TIME;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8e2 	bl	80004a4 <__aeabi_f2d>
 80012e0:	a309      	add	r3, pc, #36	; (adr r3, 8001308 <MotorMovePos+0x478>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ff7f 	bl	80001e8 <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff f92f 	bl	8000554 <__aeabi_d2f>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	47ae147b 	.word	0x47ae147b
 800130c:	3f747ae1 	.word	0x3f747ae1
 8001310:	20000214 	.word	0x20000214
 8001314:	200001cc 	.word	0x200001cc
 8001318:	200000b4 	.word	0x200000b4
 800131c:	2000011c 	.word	0x2000011c
 8001320:	200000d4 	.word	0x200000d4
 8001324:	200000c0 	.word	0x200000c0
 8001328:	20000000 	.word	0x20000000
 800132c:	200002a4 	.word	0x200002a4

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>

0800133a <MotorTrapzoidalInit>:
 */

#include "motor.h"

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	ed87 0a02 	vstr	s0, [r7, #8]
 8001346:	edc7 0a01 	vstr	s1, [r7, #4]
 800134a:	ed87 1a00 	vstr	s2, [r7]
	tProfile->dAccelMax = maxAcc;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001382:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001386:	ee27 7a87 	vmul.f32	s14, s15, s14
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001390:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	ed93 7a00 	vldr	s14, [r3]
 800139a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013e8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7a01 	vldr	s14, [r3, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 7a01 	vldr	s15, [r3, #4]
 800141e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001422:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 7a01 	vldr	s15, [r3, #4]
 800142c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edd3 6a00 	vldr	s13, [r3]
 8001436:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	edd3 6a01 	vldr	s13, [r3, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	ed93 7a01 	vldr	s14, [r3, #4]
 8001466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
//	tProfile->Direct = direct;
	tProfile->nTime = 0;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <PIDReset+0x2c>)
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000134 	.word	0x20000134

080014cc <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80014d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80014dc:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff ffdb 	bl	800149c <PIDReset>
    PID_Ctrl->dKp = dKp;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	609a      	str	r2, [r3, #8]

}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	ed87 0a02 	vstr	s0, [r7, #8]
 800150c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001510:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001514:	ed97 7a02 	vldr	s14, [r7, #8]
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001520:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <PIDCompute+0xe0>)
 8001522:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl->dKp * g_dPIDError;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <PIDCompute+0xe0>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001548:	edc7 7a07 	vstr	s15, [r7, #28]
    PID_Ctrl->dIntergral += g_dPIDError;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <PIDCompute+0xe0>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	ed93 7a01 	vldr	s14, [r3, #4]
 8001568:	edd7 7a00 	vldr	s15, [r7]
 800156c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001570:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001574:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	edd3 7a04 	vldr	s15, [r3, #16]
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	edc7 7a06 	vstr	s15, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7a02 	vldr	s14, [r3, #8]
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <PIDCompute+0xe0>)
 800158e:	edd3 6a00 	vldr	s13, [r3]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	edd3 7a03 	vldr	s15, [r3, #12]
 8001598:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800159c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015a0:	ed97 7a00 	vldr	s14, [r7]
 80015a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a8:	edc7 7a05 	vstr	s15, [r7, #20]
    dPIDResult = dP + dI + dD;
 80015ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80015b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	edc7 7a04 	vstr	s15, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <PIDCompute+0xe0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	ee07 3a90 	vmov	s15, r3
}
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	3724      	adds	r7, #36	; 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000134 	.word	0x20000134

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 fd78 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM2_IRQHandler+0x10>)
 800168e:	f002 f88f 	bl	80037b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000184 	.word	0x20000184

0800169c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <USART2_IRQHandler+0x10>)
 80016a2:	f003 f841 	bl	8004728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002a4 	.word	0x200002a4

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f003 ff8e 	bl	8005600 <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20020000 	.word	0x20020000
 8001710:	00000400 	.word	0x00000400
 8001714:	20000138 	.word	0x20000138
 8001718:	20000300 	.word	0x20000300

0800171c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b092      	sub	sp, #72	; 0x48
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2220      	movs	r2, #32
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f003 ff82 	bl	8005674 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <MX_TIM1_Init+0x118>)
 8001772:	4a3a      	ldr	r2, [pc, #232]	; (800185c <MX_TIM1_Init+0x11c>)
 8001774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <MX_TIM1_Init+0x118>)
 8001778:	2247      	movs	r2, #71	; 0x47
 800177a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <MX_TIM1_Init+0x118>)
 800177e:	2260      	movs	r2, #96	; 0x60
 8001780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001782:	4b35      	ldr	r3, [pc, #212]	; (8001858 <MX_TIM1_Init+0x118>)
 8001784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001788:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <MX_TIM1_Init+0x118>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001790:	4b31      	ldr	r3, [pc, #196]	; (8001858 <MX_TIM1_Init+0x118>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <MX_TIM1_Init+0x118>)
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <MX_TIM1_Init+0x118>)
 800179e:	f001 fdbb 	bl	8003318 <HAL_TIM_PWM_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80017a8:	f7ff fdc2 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b8:	4619      	mov	r1, r3
 80017ba:	4827      	ldr	r0, [pc, #156]	; (8001858 <MX_TIM1_Init+0x118>)
 80017bc:	f002 fdc2 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80017c6:	f7ff fdb3 	bl	8001330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ca:	2360      	movs	r3, #96	; 0x60
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	2208      	movs	r2, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	481a      	ldr	r0, [pc, #104]	; (8001858 <MX_TIM1_Init+0x118>)
 80017f0:	f002 f8e6 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80017fa:	f7ff fd99 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	220c      	movs	r2, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_TIM1_Init+0x118>)
 8001808:	f002 f8da 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001812:	f7ff fd8d 	bl	8001330 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM1_Init+0x118>)
 800183a:	f002 fdff 	bl	800443c <HAL_TIMEx_ConfigBreakDeadTime>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001844:	f7ff fd74 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM1_Init+0x118>)
 800184a:	f000 fa5b 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 800184e:	bf00      	nop
 8001850:	3748      	adds	r7, #72	; 0x48
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000013c 	.word	0x2000013c
 800185c:	40010000 	.word	0x40010000

08001860 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_TIM2_Init+0x94>)
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_TIM2_Init+0x94>)
 8001886:	2263      	movs	r2, #99	; 0x63
 8001888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_TIM2_Init+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_TIM2_Init+0x94>)
 8001892:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_TIM2_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_TIM2_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a4:	4813      	ldr	r0, [pc, #76]	; (80018f4 <MX_TIM2_Init+0x94>)
 80018a6:	f001 fc77 	bl	8003198 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b0:	f7ff fd3e 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_TIM2_Init+0x94>)
 80018c2:	f002 f93f 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018cc:	f7ff fd30 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_TIM2_Init+0x94>)
 80018de:	f002 fd31 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018e8:	f7ff fd22 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000184 	.word	0x20000184

080018f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f003 feb4 	bl	8005674 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <MX_TIM3_Init+0xa4>)
 8001918:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <MX_TIM3_Init+0xa0>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800193a:	2303      	movs	r3, #3
 800193c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800194a:	230a      	movs	r3, #10
 800194c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001952:	2301      	movs	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800195a:	230a      	movs	r3, #10
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001966:	f001 fdef 	bl	8003548 <HAL_TIM_Encoder_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001970:	f7ff fcde 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_TIM3_Init+0xa0>)
 8001982:	f002 fcdf 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800198c:	f7ff fcd0 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3730      	adds	r7, #48	; 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200001cc 	.word	0x200001cc
 800199c:	40000400 	.word	0x40000400

080019a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	; 0x30
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fe60 	bl	8005674 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <MX_TIM4_Init+0xa0>)
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <MX_TIM4_Init+0xa4>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_TIM4_Init+0xa0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_TIM4_Init+0xa0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_TIM4_Init+0xa0>)
 80019d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM4_Init+0xa0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_TIM4_Init+0xa0>)
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019e2:	2303      	movs	r3, #3
 80019e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019ea:	2301      	movs	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019f2:	230a      	movs	r3, #10
 80019f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019fa:	2301      	movs	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a02:	230a      	movs	r3, #10
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <MX_TIM4_Init+0xa0>)
 8001a0e:	f001 fd9b 	bl	8003548 <HAL_TIM_Encoder_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a18:	f7ff fc8a 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_TIM4_Init+0xa0>)
 8001a2a:	f002 fc8b 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a34:	f7ff fc7c 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	3730      	adds	r7, #48	; 0x30
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000214 	.word	0x20000214
 8001a44:	40000800 	.word	0x40000800

08001a48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001a7a:	4a33      	ldr	r2, [pc, #204]	; (8001b48 <MX_TIM5_Init+0x100>)
 8001a7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001a80:	2247      	movs	r2, #71	; 0x47
 8001a82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001a86:	2260      	movs	r2, #96	; 0x60
 8001a88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a9e:	4829      	ldr	r0, [pc, #164]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001aa0:	f001 fb7a 	bl	8003198 <HAL_TIM_Base_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001aaa:	f7ff fc41 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4822      	ldr	r0, [pc, #136]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001abc:	f002 f842 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001ac6:	f7ff fc33 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001aca:	481e      	ldr	r0, [pc, #120]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001acc:	f001 fc24 	bl	8003318 <HAL_TIM_PWM_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001ad6:	f7ff fc2b 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4816      	ldr	r0, [pc, #88]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001aea:	f002 fc2b 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001af4:	f7ff fc1c 	bl	8001330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af8:	2360      	movs	r3, #96	; 0x60
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001b10:	f001 ff56 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001b1a:	f7ff fc09 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2204      	movs	r2, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001b26:	f001 ff4b 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8001b30:	f7ff fbfe 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM5_Init+0xfc>)
 8001b36:	f000 f8e5 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001b3a:	bf00      	nop
 8001b3c:	3738      	adds	r7, #56	; 0x38
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000025c 	.word	0x2000025c
 8001b48:	40000c00 	.word	0x40000c00

08001b4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10d      	bne.n	8001b7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_TIM_PWM_MspInit+0x40>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_TIM_PWM_MspInit+0x40>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_TIM_PWM_MspInit+0x40>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba0:	d116      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_TIM_Base_MspInit+0x70>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <HAL_TIM_Base_MspInit+0x70>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_TIM_Base_MspInit+0x70>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	201c      	movs	r0, #28
 8001bc4:	f000 fbd1 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f000 fbea 	bl	80023a2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001bce:	e012      	b.n	8001bf6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_TIM_Base_MspInit+0x74>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_TIM_Base_MspInit+0x70>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_TIM_Base_MspInit+0x70>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_TIM_Base_MspInit+0x70>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40000c00 	.word	0x40000c00

08001c08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12c      	bne.n	8001c84 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_CH_1_Pin|ENCODER_2_CH_2_Pin;
 8001c62:	23c0      	movs	r3, #192	; 0xc0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001c7e:	f000 fc3d 	bl	80024fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c82:	e031      	b.n	8001ce8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_TIM_Encoder_MspInit+0xf4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_CH_1_Pin|ENCODER_1_CH_2_Pin;
 8001cc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001ce4:	f000 fc0a 	bl	80024fc <HAL_GPIO_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40000800 	.word	0x40000800
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <HAL_TIM_MspPostInit+0xb0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d11f      	bne.n	8001d66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_CH_3_Pin|PWM_MOTOR_1_CH_4_Pin;
 8001d42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4817      	ldr	r0, [pc, #92]	; (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d60:	f000 fbcc 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001d64:	e022      	b.n	8001dac <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_TIM_MspPostInit+0xbc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d11d      	bne.n	8001dac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTOR_2_CH1_Pin|PWM_MOTOR_2_CH_2_Pin;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <HAL_TIM_MspPostInit+0xc0>)
 8001da8:	f000 fba8 	bl	80024fc <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_USART2_UART_Init+0x50>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f002 fb82 	bl	8004508 <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e0a:	f7ff fa91 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200002a4 	.word	0x200002a4
 8001e18:	40004400 	.word	0x40004400

08001e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <HAL_UART_MspInit+0xd0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d151      	bne.n	8001ee2 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_UART_MspInit+0xd4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e92:	2304      	movs	r3, #4
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <HAL_UART_MspInit+0xd8>)
 8001eae:	f000 fb25 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <HAL_UART_MspInit+0xdc>)
 8001ece:	f000 fb15 	bl	80024fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2026      	movs	r0, #38	; 0x26
 8001ed8:	f000 fa47 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001edc:	2026      	movs	r0, #38	; 0x26
 8001ede:	f000 fa60 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004400 	.word	0x40004400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020c00 	.word	0x40020c00

08001efc <ConvertDegToPulse>:
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * TotalPulse / TotalDeg;
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <ConvertDegToPulse+0x48>)
 8001f12:	fb82 1203 	smull	r1, r2, r2, r3
 8001f16:	441a      	add	r2, r3
 8001f18:	1212      	asrs	r2, r2, #8
 8001f1a:	17db      	asrs	r3, r3, #31
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f26:	edc7 7a03 	vstr	s15, [r7, #12]
    return (uint16_t)dPulse;
 8001f2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f32:	ee17 3a90 	vmov	r3, s15
 8001f36:	b29b      	uxth	r3, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	b60b60b7 	.word	0xb60b60b7

08001f48 <ArrProcess>:
    float dDeg = nPulse * TotalDeg / TotalPulse;
    return (uint16_t)dDeg;
}

ArrData_t ArrProcess(char *arr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b090      	sub	sp, #64	; 0x40
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    ArrData_t data;
    char sampleString[19];
    strcpy(sampleString, arr);
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	6839      	ldr	r1, [r7, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fc83 	bl	8005864 <strcpy>

    char *pos1 = (char *)malloc(sizeof(char) * 5);
 8001f5e:	2005      	movs	r0, #5
 8001f60:	f003 fb78 	bl	8005654 <malloc>
 8001f64:	4603      	mov	r3, r0
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *vel1 = (char *)malloc(sizeof(char) * 5);
 8001f68:	2005      	movs	r0, #5
 8001f6a:	f003 fb73 	bl	8005654 <malloc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
    char *acc1 = (char *)malloc(sizeof(char) * 5);
 8001f72:	2005      	movs	r0, #5
 8001f74:	f003 fb6e 	bl	8005654 <malloc>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
    char *dir1 = (char *)malloc(sizeof(char) * 2);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f003 fb69 	bl	8005654 <malloc>
 8001f82:	4603      	mov	r3, r0
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
    char *dir2 = (char *)malloc(sizeof(char) * 2);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f003 fb64 	bl	8005654 <malloc>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

    strncpy(pos1, sampleString, 4);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2204      	movs	r2, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f9a:	f003 fc6b 	bl	8005874 <strncpy>
    pos1[4] = '\0';
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
    strncpy(vel1, &sampleString[5], 4);
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	3305      	adds	r3, #5
 8001fac:	2204      	movs	r2, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001fb2:	f003 fc5f 	bl	8005874 <strncpy>
    vel1[4] = '\0';
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
    strncpy(acc1, &sampleString[10], 4);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	330a      	adds	r3, #10
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fca:	f003 fc53 	bl	8005874 <strncpy>
    acc1[4] = '\0';
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    strncpy(dir1, &sampleString[15], 1);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	330f      	adds	r3, #15
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fe2:	f003 fc47 	bl	8005874 <strncpy>
    dir1[1] = '\0';
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	3301      	adds	r3, #1
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
    strncpy(dir2, &sampleString[17], 1);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	3311      	adds	r3, #17
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ffa:	f003 fc3b 	bl	8005874 <strncpy>
    dir2[1] = '\0';
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	3301      	adds	r3, #1
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]

    data.pos1 = atoi(pos1);
 8002006:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002008:	f003 faf6 	bl	80055f8 <atoi>
 800200c:	4603      	mov	r3, r0
 800200e:	b29b      	uxth	r3, r3
 8002010:	843b      	strh	r3, [r7, #32]
    data.vel1 = atoi(vel1);
 8002012:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002014:	f003 faf0 	bl	80055f8 <atoi>
 8002018:	4603      	mov	r3, r0
 800201a:	b29b      	uxth	r3, r3
 800201c:	847b      	strh	r3, [r7, #34]	; 0x22
    data.acc1 = atoi(acc1);
 800201e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002020:	f003 faea 	bl	80055f8 <atoi>
 8002024:	4603      	mov	r3, r0
 8002026:	b29b      	uxth	r3, r3
 8002028:	84bb      	strh	r3, [r7, #36]	; 0x24
    data.dir1 = atoi(dir1);
 800202a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800202c:	f003 fae4 	bl	80055f8 <atoi>
 8002030:	4603      	mov	r3, r0
 8002032:	b29b      	uxth	r3, r3
 8002034:	84fb      	strh	r3, [r7, #38]	; 0x26
    data.dir2 = atoi(dir2);
 8002036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002038:	f003 fade 	bl	80055f8 <atoi>
 800203c:	4603      	mov	r3, r0
 800203e:	b29b      	uxth	r3, r3
 8002040:	853b      	strh	r3, [r7, #40]	; 0x28

    free(pos1);
 8002042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002044:	f003 fb0e 	bl	8005664 <free>
    free(vel1);
 8002048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800204a:	f003 fb0b 	bl	8005664 <free>
    free(acc1);
 800204e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002050:	f003 fb08 	bl	8005664 <free>
    free(dir1);
 8002054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002056:	f003 fb05 	bl	8005664 <free>
    free(dir2);
 800205a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800205c:	f003 fb02 	bl	8005664 <free>

    return data;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	461a      	mov	r2, r3
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	cb03      	ldmia	r3!, {r0, r1}
 800206a:	6010      	str	r0, [r2, #0]
 800206c:	6051      	str	r1, [r2, #4]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	8113      	strh	r3, [r2, #8]
}
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	3740      	adds	r7, #64	; 0x40
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002098:	4c0b      	ldr	r4, [pc, #44]	; (80020c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a6:	f7ff fb39 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f003 faaf 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7fe fca7 	bl	8000a00 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80020c0:	08005b28 	.word	0x08005b28
  ldr r2, =_sbss
 80020c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80020c8:	200002fc 	.word	0x200002fc

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f92b 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fa6e 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f943 	bl	80023be <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002150:	f000 f90b 	bl	800236a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000008 	.word	0x20000008
 800216c:	20000010 	.word	0x20000010
 8002170:	2000000c 	.word	0x2000000c

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000010 	.word	0x20000010
 8002198:	200002e8 	.word	0x200002e8

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200002e8 	.word	0x200002e8

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff29 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff3e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff8e 	bl	80022a8 <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5d 	bl	8002254 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff31 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa2 	bl	8002310 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff feda 	bl	800219c <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e052      	b.n	80024ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0216 	bic.w	r2, r2, #22
 8002416:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002426:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <HAL_DMA_Abort+0x62>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0208 	bic.w	r2, r2, #8
 8002446:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	e013      	b.n	8002482 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245a:	f7ff fe9f 	bl	800219c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b05      	cmp	r3, #5
 8002466:	d90c      	bls.n	8002482 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e015      	b.n	80024ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e4      	bne.n	800245a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00c      	b.n	80024ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e16b      	b.n	80027f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	f040 815a 	bne.w	80027ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d005      	beq.n	800254e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	2b02      	cmp	r3, #2
 800254c:	d130      	bne.n	80025b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0201 	and.w	r2, r3, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d017      	beq.n	80025ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d123      	bne.n	8002640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80b4 	beq.w	80027ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_GPIO_Init+0x30c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <HAL_GPIO_Init+0x30c>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_GPIO_Init+0x310>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	220f      	movs	r2, #15
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_GPIO_Init+0x314>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x226>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_GPIO_Init+0x318>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x222>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_GPIO_Init+0x31c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4f      	ldr	r2, [pc, #316]	; (800281c <HAL_GPIO_Init+0x320>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x21a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4e      	ldr	r2, [pc, #312]	; (8002820 <HAL_GPIO_Init+0x324>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x216>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <HAL_GPIO_Init+0x328>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x212>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4b      	ldr	r2, [pc, #300]	; (800282c <HAL_GPIO_Init+0x330>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x20a>
 8002702:	2307      	movs	r3, #7
 8002704:	e00e      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002706:	2308      	movs	r3, #8
 8002708:	e00c      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800270a:	2306      	movs	r3, #6
 800270c:	e00a      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800270e:	2305      	movs	r3, #5
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002712:	2304      	movs	r3, #4
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x310>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a32      	ldr	r2, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_GPIO_Init+0x334>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e4:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f ae90 	bls.w	8002518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40021c00 	.word	0x40021c00
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e267      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d075      	beq.n	8002972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e242      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x74>
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6c      	ldr	r2, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff fc3c 	bl	800219c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff fc38 	bl	800219c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e207      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5b      	ldr	r3, [pc, #364]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xc0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fc28 	bl	800219c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fc24 	bl	800219c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1f3      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff fbdd 	bl	800219c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff fbd9 	bl	800219c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a8      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff fbbc 	bl	800219c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff fbb8 	bl	800219c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e187      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff fb9c 	bl	800219c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff fb98 	bl	800219c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e167      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x200>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff fb85 	bl	800219c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff fb81 	bl	800219c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e150      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b77      	ldr	r3, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b74      	ldr	r3, [pc, #464]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a73      	ldr	r2, [pc, #460]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7ff fb41 	bl	800219c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7ff fb3d 	bl	800219c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7ff fb02 	bl	800219c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fafe 	bl	800219c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cb      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7ff faec 	bl	800219c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fae8 	bl	800219c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b5      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a1 	beq.w	8002d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d05c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d141      	bne.n	8002c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fabc 	bl	800219c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff fab8 	bl	800219c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7ff fa91 	bl	800219c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7ff fa8d 	bl	800219c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e05c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x416>
 8002c9c:	e054      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7ff fa7a 	bl	800219c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7ff fa76 	bl	800219c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7ff f9a8 	bl	800219c <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7ff f9a4 	bl	800219c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f908 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	080059fc 	.word	0x080059fc
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b094      	sub	sp, #80	; 0x50
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b79      	ldr	r3, [pc, #484]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80e1 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0db      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f5c:	e0db      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fdc:	4659      	mov	r1, fp
 8002fde:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	eb18 0303 	adds.w	r3, r8, r3
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	462b      	mov	r3, r5
 8003004:	eb49 0303 	adc.w	r3, r9, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003016:	4629      	mov	r1, r5
 8003018:	024b      	lsls	r3, r1, #9
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003020:	4621      	mov	r1, r4
 8003022:	024a      	lsls	r2, r1, #9
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003034:	f7fd fade 	bl	80005f4 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	e058      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	4611      	mov	r1, r2
 800304e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0159      	lsls	r1, r3, #5
 800306a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306e:	0150      	lsls	r0, r2, #5
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4641      	mov	r1, r8
 8003076:	ebb2 0a01 	subs.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800308c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003094:	ebb2 040a 	subs.w	r4, r2, sl
 8003098:	eb63 050b 	sbc.w	r5, r3, fp
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	f7fd fa84 	bl	80005f4 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003118:	4618      	mov	r0, r3
 800311a:	3750      	adds	r7, #80	; 0x50
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000008 	.word	0x20000008

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800314c:	f7ff fff0 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	; (800316c <HAL_RCC_GetPCLK1Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	08005a0c 	.word	0x08005a0c

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003174:	f7ff ffdc 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0b5b      	lsrs	r3, r3, #13
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	08005a0c 	.word	0x08005a0c

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fce6 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fda4 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e04e      	b.n	80032ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <HAL_TIM_Base_Start_IT+0xc4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d01d      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_TIM_Base_Start_IT+0xc8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_TIM_Base_Start_IT+0xcc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_TIM_Base_Start_IT+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_TIM_Base_Start_IT+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_TIM_Base_Start_IT+0xd8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIM_Base_Start_IT+0xdc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d111      	bne.n	80032dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d010      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	e007      	b.n	80032ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40000c00 	.word	0x40000c00
 800330c:	40010400 	.word	0x40010400
 8003310:	40014000 	.word	0x40014000
 8003314:	40001800 	.word	0x40001800

08003318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e041      	b.n	80033ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fc04 	bl	8001b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 fce4 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_TIM_PWM_Start+0x24>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e022      	b.n	8003422 <HAL_TIM_PWM_Start+0x6a>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d109      	bne.n	80033f6 <HAL_TIM_PWM_Start+0x3e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	e015      	b.n	8003422 <HAL_TIM_PWM_Start+0x6a>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d109      	bne.n	8003410 <HAL_TIM_PWM_Start+0x58>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e008      	b.n	8003422 <HAL_TIM_PWM_Start+0x6a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07c      	b.n	8003524 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <HAL_TIM_PWM_Start+0x82>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	e013      	b.n	8003462 <HAL_TIM_PWM_Start+0xaa>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d104      	bne.n	800344a <HAL_TIM_PWM_Start+0x92>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003448:	e00b      	b.n	8003462 <HAL_TIM_PWM_Start+0xaa>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d104      	bne.n	800345a <HAL_TIM_PWM_Start+0xa2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003458:	e003      	b.n	8003462 <HAL_TIM_PWM_Start+0xaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2201      	movs	r2, #1
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 ff44 	bl	80042f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_TIM_PWM_Start+0x174>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_TIM_PWM_Start+0xcc>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_TIM_PWM_Start+0x178>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_TIM_PWM_Start+0xd0>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_TIM_PWM_Start+0xd2>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_TIM_PWM_Start+0x174>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d01d      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_TIM_PWM_Start+0x17c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_TIM_PWM_Start+0x180>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <HAL_TIM_PWM_Start+0x184>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <HAL_TIM_PWM_Start+0x178>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIM_PWM_Start+0x188>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_TIM_PWM_Start+0x136>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a16      	ldr	r2, [pc, #88]	; (8003544 <HAL_TIM_PWM_Start+0x18c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d111      	bne.n	8003512 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b06      	cmp	r3, #6
 80034fe:	d010      	beq.n	8003522 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003510:	e007      	b.n	8003522 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010000 	.word	0x40010000
 8003530:	40010400 	.word	0x40010400
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800

08003548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e097      	b.n	800368c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fe fb49 	bl	8001c08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 fbc1 	bl	8003d24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	4313      	orrs	r3, r2
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035e8:	f023 030c 	bic.w	r3, r3, #12
 80035ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4313      	orrs	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	011a      	lsls	r2, r3, #4
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	031b      	lsls	r3, r3, #12
 8003618:	4313      	orrs	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4313      	orrs	r3, r2
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d110      	bne.n	80036e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80036ca:	7b7b      	ldrb	r3, [r7, #13]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d001      	beq.n	80036d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e069      	b.n	80037a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	e031      	b.n	800374a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d110      	bne.n	800370e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ec:	7bbb      	ldrb	r3, [r7, #14]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036f2:	7b3b      	ldrb	r3, [r7, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d001      	beq.n	80036fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e055      	b.n	80037a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	e01d      	b.n	800374a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003714:	7bbb      	ldrb	r3, [r7, #14]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800371a:	7b7b      	ldrb	r3, [r7, #13]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003720:	7b3b      	ldrb	r3, [r7, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03e      	b.n	80037a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_TIM_Encoder_Start+0xc4>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b04      	cmp	r3, #4
 8003754:	d008      	beq.n	8003768 <HAL_TIM_Encoder_Start+0xd4>
 8003756:	e00f      	b.n	8003778 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fdc9 	bl	80042f8 <TIM_CCxChannelCmd>
      break;
 8003766:	e016      	b.n	8003796 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	2104      	movs	r1, #4
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fdc1 	bl	80042f8 <TIM_CCxChannelCmd>
      break;
 8003776:	e00e      	b.n	8003796 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fdb9 	bl	80042f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	2104      	movs	r1, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fdb2 	bl	80042f8 <TIM_CCxChannelCmd>
      break;
 8003794:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0202 	mvn.w	r2, #2
 80037dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa77 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fa69 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa7a 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0204 	mvn.w	r2, #4
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa4d 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa3f 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fa50 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d122      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b08      	cmp	r3, #8
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0208 	mvn.w	r2, #8
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2204      	movs	r2, #4
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa23 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa15 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa26 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d122      	bne.n	8003908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0210 	mvn.w	r2, #16
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2208      	movs	r2, #8
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f9f9 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9eb 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9fc 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0201 	mvn.w	r2, #1
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fa78 	bl	8000e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fdca 	bl	80044f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9c1 	bl	8003d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0220 	mvn.w	r2, #32
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fd94 	bl	80044e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e0ae      	b.n	8003b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f200 809f 	bhi.w	8003b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003b2d 	.word	0x08003b2d
 80039fc:	08003b2d 	.word	0x08003b2d
 8003a00:	08003b2d 	.word	0x08003b2d
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003b2d 	.word	0x08003b2d
 8003a0c:	08003b2d 	.word	0x08003b2d
 8003a10:	08003b2d 	.word	0x08003b2d
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003b2d 	.word	0x08003b2d
 8003a1c:	08003b2d 	.word	0x08003b2d
 8003a20:	08003b2d 	.word	0x08003b2d
 8003a24:	08003aeb 	.word	0x08003aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa18 	bl	8003e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e064      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fa68 	bl	8003f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e043      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fabd 	bl	8004030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e023      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fb11 	bl	8004118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e002      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_ConfigClockSource+0x1c>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0b4      	b.n	8003cca <HAL_TIM_ConfigClockSource+0x186>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d03e      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0xd4>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	f200 8087 	bhi.w	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	f000 8086 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x172>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d87f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b70      	cmp	r3, #112	; 0x70
 8003bb2:	d01a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xa6>
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d87b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b60      	cmp	r3, #96	; 0x60
 8003bba:	d050      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x11a>
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d877      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b50      	cmp	r3, #80	; 0x50
 8003bc2:	d03c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xfa>
 8003bc4:	2b50      	cmp	r3, #80	; 0x50
 8003bc6:	d873      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d058      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x13a>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d86f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b30      	cmp	r3, #48	; 0x30
 8003bd2:	d064      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d86b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d060      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d867      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05c      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d05a      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	e062      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 fb5d 	bl	80042b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	609a      	str	r2, [r3, #8]
      break;
 8003c16:	e04f      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f000 fb46 	bl	80042b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3a:	609a      	str	r2, [r3, #8]
      break;
 8003c3c:	e03c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f000 faba 	bl	80041c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2150      	movs	r1, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fb13 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e02c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 fad9 	bl	8004222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2160      	movs	r1, #96	; 0x60
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fb03 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e01c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 fa9a 	bl	80041c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 faf3 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f000 faea 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003cae:	e003      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d00f      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <TIM_Base_SetConfig+0x120>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d108      	bne.n	8003d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02b      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d027      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d023      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01f      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <TIM_Base_SetConfig+0x120>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01b      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d017      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <TIM_Base_SetConfig+0x128>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <TIM_Base_SetConfig+0x12c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00f      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_Base_SetConfig+0x130>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <TIM_Base_SetConfig+0x134>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <TIM_Base_SetConfig+0x138>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a23      	ldr	r2, [pc, #140]	; (8003e60 <TIM_Base_SetConfig+0x13c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d103      	bne.n	8003e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	615a      	str	r2, [r3, #20]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40010400 	.word	0x40010400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800
 8003e58:	40001800 	.word	0x40001800
 8003e5c:	40001c00 	.word	0x40001c00
 8003e60:	40002000 	.word	0x40002000

08003e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <TIM_OC1_SetConfig+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_OC1_SetConfig+0x64>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <TIM_OC1_SetConfig+0xdc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d10c      	bne.n	8003ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0308 	bic.w	r3, r3, #8
 8003ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <TIM_OC1_SetConfig+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_OC1_SetConfig+0x8e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <TIM_OC1_SetConfig+0xdc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d111      	bne.n	8003f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	621a      	str	r2, [r3, #32]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400

08003f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0210 	bic.w	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0320 	bic.w	r3, r3, #32
 8003f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a22      	ldr	r2, [pc, #136]	; (8004028 <TIM_OC2_SetConfig+0xe4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC2_SetConfig+0x68>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a21      	ldr	r2, [pc, #132]	; (800402c <TIM_OC2_SetConfig+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10d      	bne.n	8003fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <TIM_OC2_SetConfig+0xe4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC2_SetConfig+0x94>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <TIM_OC2_SetConfig+0xe8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d113      	bne.n	8004000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <TIM_OC3_SetConfig+0xe0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC3_SetConfig+0x66>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <TIM_OC3_SetConfig+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10d      	bne.n	80040b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a16      	ldr	r2, [pc, #88]	; (8004110 <TIM_OC3_SetConfig+0xe0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC3_SetConfig+0x92>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	; (8004114 <TIM_OC3_SetConfig+0xe4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d113      	bne.n	80040ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	621a      	str	r2, [r3, #32]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40010000 	.word	0x40010000
 8004114:	40010400 	.word	0x40010400

08004118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <TIM_OC4_SetConfig+0xa4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC4_SetConfig+0x68>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <TIM_OC4_SetConfig+0xa8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010400 	.word	0x40010400

080041c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 030a 	bic.w	r3, r3, #10
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f023 0210 	bic.w	r2, r3, #16
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800424c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	031b      	lsls	r3, r3, #12
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800425e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f043 0307 	orr.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	431a      	orrs	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e05a      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d01d      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40010400 	.word	0x40010400
 8004434:	40014000 	.word	0x40014000
 8004438:	40001800 	.word	0x40001800

0800443c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004454:	2302      	movs	r3, #2
 8004456:	e03d      	b.n	80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e03f      	b.n	800459a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd fc74 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800454a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fddf 	bl	8005110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b08a      	sub	sp, #40	; 0x28
 80045a6:	af02      	add	r7, sp, #8
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d17c      	bne.n	80046bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UART_Transmit+0x2c>
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e075      	b.n	80046be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Transmit+0x3e>
 80045dc:	2302      	movs	r3, #2
 80045de:	e06e      	b.n	80046be <HAL_UART_Transmit+0x11c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2221      	movs	r2, #33	; 0x21
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f6:	f7fd fdd1 	bl	800219c <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	88fa      	ldrh	r2, [r7, #6]
 8004606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004610:	d108      	bne.n	8004624 <HAL_UART_Transmit+0x82>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e003      	b.n	800462c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004634:	e02a      	b.n	800468c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fb1f 	bl	8004c84 <UART_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e036      	b.n	80046be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3302      	adds	r3, #2
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	e007      	b.n	800467e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1cf      	bne.n	8004636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	2140      	movs	r1, #64	; 0x40
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 faef 	bl	8004c84 <UART_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	4613      	mov	r3, r2
 80046d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d11d      	bne.n	800471c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Receive_IT+0x26>
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e016      	b.n	800471e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Receive_IT+0x38>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e00f      	b.n	800471e <HAL_UART_Receive_IT+0x58>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	461a      	mov	r2, r3
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 fb24 	bl	8004d60 <UART_Start_Receive_IT>
 8004718:	4603      	mov	r3, r0
 800471a:	e000      	b.n	800471e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b0ba      	sub	sp, #232	; 0xe8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_UART_IRQHandler+0x66>
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fc07 	bl	8004f9a <UART_Receive_IT>
      return;
 800478c:	e256      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800478e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80de 	beq.w	8004954 <HAL_UART_IRQHandler+0x22c>
 8004798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d1 	beq.w	8004954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_UART_IRQHandler+0xae>
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_UART_IRQHandler+0xd2>
 80047e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0202 	orr.w	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0xf6>
 8004806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d011      	beq.n	800484e <HAL_UART_IRQHandler+0x126>
 800482a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0208 	orr.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 81ed 	beq.w	8004c32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_UART_IRQHandler+0x14e>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fb92 	bl	8004f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <HAL_UART_IRQHandler+0x17a>
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04f      	beq.n	8004942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa9a 	bl	8004ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d141      	bne.n	800493a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1d9      	bne.n	80048b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	2b00      	cmp	r3, #0
 8004908:	d013      	beq.n	8004932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	4a7d      	ldr	r2, [pc, #500]	; (8004b04 <HAL_UART_IRQHandler+0x3dc>)
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd fdcd 	bl	80024b6 <HAL_DMA_Abort_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800492c:	4610      	mov	r0, r2
 800492e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e00e      	b.n	8004950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f990 	bl	8004c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e00a      	b.n	8004950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f98c 	bl	8004c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e006      	b.n	8004950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f988 	bl	8004c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800494e:	e170      	b.n	8004c32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	bf00      	nop
    return;
 8004952:	e16e      	b.n	8004c32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	2b01      	cmp	r3, #1
 800495a:	f040 814a 	bne.w	8004bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8143 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800496c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 813c 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	f040 80b4 	bne.w	8004b08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8140 	beq.w	8004c36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049be:	429a      	cmp	r2, r3
 80049c0:	f080 8139 	bcs.w	8004c36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	f000 8088 	beq.w	8004aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1d9      	bne.n	80049da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e1      	bne.n	8004a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aba:	f023 0310 	bic.w	r3, r3, #16
 8004abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e3      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd fc76 	bl	80023d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8b6 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b00:	e099      	b.n	8004c36 <HAL_UART_IRQHandler+0x50e>
 8004b02:	bf00      	nop
 8004b04:	08004ea3 	.word	0x08004ea3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 808b 	beq.w	8004c3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b52:	647a      	str	r2, [r7, #68]	; 0x44
 8004b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e3      	bne.n	8004bac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f83e 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf0:	e023      	b.n	8004c3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_UART_IRQHandler+0x4ea>
 8004bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f95d 	bl	8004eca <UART_Transmit_IT>
    return;
 8004c10:	e014      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <HAL_UART_IRQHandler+0x514>
 8004c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f99d 	bl	8004f6a <UART_EndTransmit_IT>
    return;
 8004c30:	e004      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
    return;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
      return;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <HAL_UART_IRQHandler+0x514>
      return;
 8004c3a:	bf00      	nop
  }
}
 8004c3c:	37e8      	adds	r7, #232	; 0xe8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop

08004c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b090      	sub	sp, #64	; 0x40
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c94:	e050      	b.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c9c:	d04c      	beq.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca4:	f7fd fa7a 	bl	800219c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d241      	bcs.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cd4:	637a      	str	r2, [r7, #52]	; 0x34
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d08:	623a      	str	r2, [r7, #32]
 8004d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	69f9      	ldr	r1, [r7, #28]
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e00f      	b.n	8004d58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d09f      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3740      	adds	r7, #64	; 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	88fa      	ldrh	r2, [r7, #6]
 8004d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2222      	movs	r2, #34	; 0x22
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0220 	orr.w	r2, r2, #32
 8004dcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b095      	sub	sp, #84	; 0x54
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e04:	643a      	str	r2, [r7, #64]	; 0x40
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3314      	adds	r3, #20
 8004e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e5      	bne.n	8004e18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d119      	bne.n	8004e88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f023 0310 	bic.w	r3, r3, #16
 8004e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e74:	61ba      	str	r2, [r7, #24]
 8004e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	6979      	ldr	r1, [r7, #20]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	613b      	str	r3, [r7, #16]
   return(result);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e5      	bne.n	8004e54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e96:	bf00      	nop
 8004e98:	3754      	adds	r7, #84	; 0x54
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff fecb 	bl	8004c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b21      	cmp	r3, #33	; 0x21
 8004edc:	d13e      	bne.n	8004f5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d114      	bne.n	8004f12 <UART_Transmit_IT+0x48>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	1c9a      	adds	r2, r3, #2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	621a      	str	r2, [r3, #32]
 8004f10:	e008      	b.n	8004f24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6211      	str	r1, [r2, #32]
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4619      	mov	r1, r3
 8004f32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10f      	bne.n	8004f58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fe5a 	bl	8004c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b08c      	sub	sp, #48	; 0x30
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b22      	cmp	r3, #34	; 0x22
 8004fac:	f040 80ab 	bne.w	8005106 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	d117      	bne.n	8004fea <UART_Receive_IT+0x50>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d113      	bne.n	8004fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	1c9a      	adds	r2, r3, #2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe8:	e026      	b.n	8005038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffc:	d007      	beq.n	800500e <UART_Receive_IT+0x74>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <UART_Receive_IT+0x82>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e008      	b.n	800502e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005028:	b2da      	uxtb	r2, r3
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4619      	mov	r1, r3
 8005046:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005048:	2b00      	cmp	r3, #0
 800504a:	d15a      	bne.n	8005102 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0220 	bic.w	r2, r2, #32
 800505a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800506a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	2b01      	cmp	r3, #1
 800508a:	d135      	bne.n	80050f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	613b      	str	r3, [r7, #16]
   return(result);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f023 0310 	bic.w	r3, r3, #16
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	330c      	adds	r3, #12
 80050b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b2:	623a      	str	r2, [r7, #32]
 80050b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	69f9      	ldr	r1, [r7, #28]
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	61bb      	str	r3, [r7, #24]
   return(result);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d10a      	bne.n	80050ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ee:	4619      	mov	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fdbb 	bl	8004c6c <HAL_UARTEx_RxEventCallback>
 80050f6:	e002      	b.n	80050fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7fb fd33 	bl	8000b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e002      	b.n	8005108 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3730      	adds	r7, #48	; 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005114:	b0c0      	sub	sp, #256	; 0x100
 8005116:	af00      	add	r7, sp, #0
 8005118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	68d9      	ldr	r1, [r3, #12]
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	ea40 0301 	orr.w	r3, r0, r1
 8005138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	431a      	orrs	r2, r3
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005168:	f021 010c 	bic.w	r1, r1, #12
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005176:	430b      	orrs	r3, r1
 8005178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	6999      	ldr	r1, [r3, #24]
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	ea40 0301 	orr.w	r3, r0, r1
 8005196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b8f      	ldr	r3, [pc, #572]	; (80053dc <UART_SetConfig+0x2cc>)
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d005      	beq.n	80051b0 <UART_SetConfig+0xa0>
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b8d      	ldr	r3, [pc, #564]	; (80053e0 <UART_SetConfig+0x2d0>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d104      	bne.n	80051ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7fd ffde 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 80051b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051b8:	e003      	b.n	80051c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ba:	f7fd ffc5 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 80051be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051cc:	f040 810c 	bne.w	80053e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80051ea:	415b      	adcs	r3, r3
 80051ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051f2:	4621      	mov	r1, r4
 80051f4:	eb12 0801 	adds.w	r8, r2, r1
 80051f8:	4629      	mov	r1, r5
 80051fa:	eb43 0901 	adc.w	r9, r3, r1
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800520a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800520e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005212:	4690      	mov	r8, r2
 8005214:	4699      	mov	r9, r3
 8005216:	4623      	mov	r3, r4
 8005218:	eb18 0303 	adds.w	r3, r8, r3
 800521c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005220:	462b      	mov	r3, r5
 8005222:	eb49 0303 	adc.w	r3, r9, r3
 8005226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800523a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800523e:	460b      	mov	r3, r1
 8005240:	18db      	adds	r3, r3, r3
 8005242:	653b      	str	r3, [r7, #80]	; 0x50
 8005244:	4613      	mov	r3, r2
 8005246:	eb42 0303 	adc.w	r3, r2, r3
 800524a:	657b      	str	r3, [r7, #84]	; 0x54
 800524c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005254:	f7fb f9ce 	bl	80005f4 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4b61      	ldr	r3, [pc, #388]	; (80053e4 <UART_SetConfig+0x2d4>)
 800525e:	fba3 2302 	umull	r2, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	011c      	lsls	r4, r3, #4
 8005266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005280:	415b      	adcs	r3, r3
 8005282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005288:	4641      	mov	r1, r8
 800528a:	eb12 0a01 	adds.w	sl, r2, r1
 800528e:	4649      	mov	r1, r9
 8005290:	eb43 0b01 	adc.w	fp, r3, r1
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a8:	4692      	mov	sl, r2
 80052aa:	469b      	mov	fp, r3
 80052ac:	4643      	mov	r3, r8
 80052ae:	eb1a 0303 	adds.w	r3, sl, r3
 80052b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052b6:	464b      	mov	r3, r9
 80052b8:	eb4b 0303 	adc.w	r3, fp, r3
 80052bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052d4:	460b      	mov	r3, r1
 80052d6:	18db      	adds	r3, r3, r3
 80052d8:	643b      	str	r3, [r7, #64]	; 0x40
 80052da:	4613      	mov	r3, r2
 80052dc:	eb42 0303 	adc.w	r3, r2, r3
 80052e0:	647b      	str	r3, [r7, #68]	; 0x44
 80052e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052ea:	f7fb f983 	bl	80005f4 <__aeabi_uldivmod>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <UART_SetConfig+0x2d4>)
 80052f6:	fba3 2301 	umull	r2, r3, r3, r1
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2264      	movs	r2, #100	; 0x64
 80052fe:	fb02 f303 	mul.w	r3, r2, r3
 8005302:	1acb      	subs	r3, r1, r3
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800530a:	4b36      	ldr	r3, [pc, #216]	; (80053e4 <UART_SetConfig+0x2d4>)
 800530c:	fba3 2302 	umull	r2, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005318:	441c      	add	r4, r3
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	63b9      	str	r1, [r7, #56]	; 0x38
 8005334:	415b      	adcs	r3, r3
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800533c:	4641      	mov	r1, r8
 800533e:	1851      	adds	r1, r2, r1
 8005340:	6339      	str	r1, [r7, #48]	; 0x30
 8005342:	4649      	mov	r1, r9
 8005344:	414b      	adcs	r3, r1
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005354:	4659      	mov	r1, fp
 8005356:	00cb      	lsls	r3, r1, #3
 8005358:	4651      	mov	r1, sl
 800535a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800535e:	4651      	mov	r1, sl
 8005360:	00ca      	lsls	r2, r1, #3
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	4603      	mov	r3, r0
 8005368:	4642      	mov	r2, r8
 800536a:	189b      	adds	r3, r3, r2
 800536c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005370:	464b      	mov	r3, r9
 8005372:	460a      	mov	r2, r1
 8005374:	eb42 0303 	adc.w	r3, r2, r3
 8005378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800538c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005390:	460b      	mov	r3, r1
 8005392:	18db      	adds	r3, r3, r3
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
 8005396:	4613      	mov	r3, r2
 8005398:	eb42 0303 	adc.w	r3, r2, r3
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800539e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053a6:	f7fb f925 	bl	80005f4 <__aeabi_uldivmod>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <UART_SetConfig+0x2d4>)
 80053b0:	fba3 1302 	umull	r1, r3, r3, r2
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	2164      	movs	r1, #100	; 0x64
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	3332      	adds	r3, #50	; 0x32
 80053c2:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <UART_SetConfig+0x2d4>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	f003 0207 	and.w	r2, r3, #7
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4422      	add	r2, r4
 80053d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d8:	e105      	b.n	80055e6 <UART_SetConfig+0x4d6>
 80053da:	bf00      	nop
 80053dc:	40011000 	.word	0x40011000
 80053e0:	40011400 	.word	0x40011400
 80053e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053fa:	4642      	mov	r2, r8
 80053fc:	464b      	mov	r3, r9
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	6239      	str	r1, [r7, #32]
 8005402:	415b      	adcs	r3, r3
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
 8005406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800540a:	4641      	mov	r1, r8
 800540c:	1854      	adds	r4, r2, r1
 800540e:	4649      	mov	r1, r9
 8005410:	eb43 0501 	adc.w	r5, r3, r1
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	00eb      	lsls	r3, r5, #3
 800541e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005422:	00e2      	lsls	r2, r4, #3
 8005424:	4614      	mov	r4, r2
 8005426:	461d      	mov	r5, r3
 8005428:	4643      	mov	r3, r8
 800542a:	18e3      	adds	r3, r4, r3
 800542c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005430:	464b      	mov	r3, r9
 8005432:	eb45 0303 	adc.w	r3, r5, r3
 8005436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005456:	4629      	mov	r1, r5
 8005458:	008b      	lsls	r3, r1, #2
 800545a:	4621      	mov	r1, r4
 800545c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005460:	4621      	mov	r1, r4
 8005462:	008a      	lsls	r2, r1, #2
 8005464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005468:	f7fb f8c4 	bl	80005f4 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b60      	ldr	r3, [pc, #384]	; (80055f4 <UART_SetConfig+0x4e4>)
 8005472:	fba3 2302 	umull	r2, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	011c      	lsls	r4, r3, #4
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	61b9      	str	r1, [r7, #24]
 8005494:	415b      	adcs	r3, r3
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800549c:	4641      	mov	r1, r8
 800549e:	1851      	adds	r1, r2, r1
 80054a0:	6139      	str	r1, [r7, #16]
 80054a2:	4649      	mov	r1, r9
 80054a4:	414b      	adcs	r3, r1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054b4:	4659      	mov	r1, fp
 80054b6:	00cb      	lsls	r3, r1, #3
 80054b8:	4651      	mov	r1, sl
 80054ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054be:	4651      	mov	r1, sl
 80054c0:	00ca      	lsls	r2, r1, #3
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	4642      	mov	r2, r8
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d0:	464b      	mov	r3, r9
 80054d2:	460a      	mov	r2, r1
 80054d4:	eb42 0303 	adc.w	r3, r2, r3
 80054d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054f4:	4649      	mov	r1, r9
 80054f6:	008b      	lsls	r3, r1, #2
 80054f8:	4641      	mov	r1, r8
 80054fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054fe:	4641      	mov	r1, r8
 8005500:	008a      	lsls	r2, r1, #2
 8005502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005506:	f7fb f875 	bl	80005f4 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <UART_SetConfig+0x4e4>)
 8005510:	fba3 1302 	umull	r1, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	2164      	movs	r1, #100	; 0x64
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	3332      	adds	r3, #50	; 0x32
 8005522:	4a34      	ldr	r2, [pc, #208]	; (80055f4 <UART_SetConfig+0x4e4>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552e:	441c      	add	r4, r3
 8005530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005534:	2200      	movs	r2, #0
 8005536:	673b      	str	r3, [r7, #112]	; 0x70
 8005538:	677a      	str	r2, [r7, #116]	; 0x74
 800553a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	1891      	adds	r1, r2, r2
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	415b      	adcs	r3, r3
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800554e:	4641      	mov	r1, r8
 8005550:	1851      	adds	r1, r2, r1
 8005552:	6039      	str	r1, [r7, #0]
 8005554:	4649      	mov	r1, r9
 8005556:	414b      	adcs	r3, r1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005566:	4659      	mov	r1, fp
 8005568:	00cb      	lsls	r3, r1, #3
 800556a:	4651      	mov	r1, sl
 800556c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005570:	4651      	mov	r1, sl
 8005572:	00ca      	lsls	r2, r1, #3
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	4603      	mov	r3, r0
 800557a:	4642      	mov	r2, r8
 800557c:	189b      	adds	r3, r3, r2
 800557e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005580:	464b      	mov	r3, r9
 8005582:	460a      	mov	r2, r1
 8005584:	eb42 0303 	adc.w	r3, r2, r3
 8005588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	663b      	str	r3, [r7, #96]	; 0x60
 8005594:	667a      	str	r2, [r7, #100]	; 0x64
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055a2:	4649      	mov	r1, r9
 80055a4:	008b      	lsls	r3, r1, #2
 80055a6:	4641      	mov	r1, r8
 80055a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ac:	4641      	mov	r1, r8
 80055ae:	008a      	lsls	r2, r1, #2
 80055b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055b4:	f7fb f81e 	bl	80005f4 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <UART_SetConfig+0x4e4>)
 80055be:	fba3 1302 	umull	r1, r3, r3, r2
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2164      	movs	r1, #100	; 0x64
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	3332      	adds	r3, #50	; 0x32
 80055d0:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <UART_SetConfig+0x4e4>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4422      	add	r2, r4
 80055e4:	609a      	str	r2, [r3, #8]
}
 80055e6:	bf00      	nop
 80055e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f2:	bf00      	nop
 80055f4:	51eb851f 	.word	0x51eb851f

080055f8 <atoi>:
 80055f8:	220a      	movs	r2, #10
 80055fa:	2100      	movs	r1, #0
 80055fc:	f000 b9d0 	b.w	80059a0 <strtol>

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000014 	.word	0x20000014

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4d0d      	ldr	r5, [pc, #52]	; (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005612:	1b64      	subs	r4, r4, r5
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2600      	movs	r6, #0
 8005618:	42a6      	cmp	r6, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4d0b      	ldr	r5, [pc, #44]	; (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x44>)
 8005620:	f000 f9d6 	bl	80059d0 <_init>
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2600      	movs	r6, #0
 800562a:	42a6      	cmp	r6, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f855 3b04 	ldr.w	r3, [r5], #4
 8005634:	4798      	blx	r3
 8005636:	3601      	adds	r6, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f855 3b04 	ldr.w	r3, [r5], #4
 800563e:	4798      	blx	r3
 8005640:	3601      	adds	r6, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08005b20 	.word	0x08005b20
 8005648:	08005b20 	.word	0x08005b20
 800564c:	08005b20 	.word	0x08005b20
 8005650:	08005b24 	.word	0x08005b24

08005654 <malloc>:
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <malloc+0xc>)
 8005656:	4601      	mov	r1, r0
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f000 b87f 	b.w	800575c <_malloc_r>
 800565e:	bf00      	nop
 8005660:	20000014 	.word	0x20000014

08005664 <free>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <free+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f000 b80b 	b.w	8005684 <_free_r>
 800566e:	bf00      	nop
 8005670:	20000014 	.word	0x20000014

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <_free_r>:
 8005684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005686:	2900      	cmp	r1, #0
 8005688:	d044      	beq.n	8005714 <_free_r+0x90>
 800568a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568e:	9001      	str	r0, [sp, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f1a1 0404 	sub.w	r4, r1, #4
 8005696:	bfb8      	it	lt
 8005698:	18e4      	addlt	r4, r4, r3
 800569a:	f000 f98b 	bl	80059b4 <__malloc_lock>
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <_free_r+0x94>)
 80056a0:	9801      	ldr	r0, [sp, #4]
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	b933      	cbnz	r3, 80056b4 <_free_r+0x30>
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	6014      	str	r4, [r2, #0]
 80056aa:	b003      	add	sp, #12
 80056ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056b0:	f000 b986 	b.w	80059c0 <__malloc_unlock>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d908      	bls.n	80056ca <_free_r+0x46>
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	1961      	adds	r1, r4, r5
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf01      	itttt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	1949      	addeq	r1, r1, r5
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	e7ed      	b.n	80056a6 <_free_r+0x22>
 80056ca:	461a      	mov	r2, r3
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b10b      	cbz	r3, 80056d4 <_free_r+0x50>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x46>
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	1855      	adds	r5, r2, r1
 80056d8:	42a5      	cmp	r5, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x70>
 80056dc:	6824      	ldr	r4, [r4, #0]
 80056de:	4421      	add	r1, r4
 80056e0:	1854      	adds	r4, r2, r1
 80056e2:	42a3      	cmp	r3, r4
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	d1e0      	bne.n	80056aa <_free_r+0x26>
 80056e8:	681c      	ldr	r4, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6053      	str	r3, [r2, #4]
 80056ee:	4421      	add	r1, r4
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	e7da      	b.n	80056aa <_free_r+0x26>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x78>
 80056f6:	230c      	movs	r3, #12
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	e7d6      	b.n	80056aa <_free_r+0x26>
 80056fc:	6825      	ldr	r5, [r4, #0]
 80056fe:	1961      	adds	r1, r4, r5
 8005700:	428b      	cmp	r3, r1
 8005702:	bf04      	itt	eq
 8005704:	6819      	ldreq	r1, [r3, #0]
 8005706:	685b      	ldreq	r3, [r3, #4]
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	bf04      	itt	eq
 800570c:	1949      	addeq	r1, r1, r5
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6054      	str	r4, [r2, #4]
 8005712:	e7ca      	b.n	80056aa <_free_r+0x26>
 8005714:	b003      	add	sp, #12
 8005716:	bd30      	pop	{r4, r5, pc}
 8005718:	200002ec 	.word	0x200002ec

0800571c <sbrk_aligned>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4e0e      	ldr	r6, [pc, #56]	; (8005758 <sbrk_aligned+0x3c>)
 8005720:	460c      	mov	r4, r1
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	4605      	mov	r5, r0
 8005726:	b911      	cbnz	r1, 800572e <sbrk_aligned+0x12>
 8005728:	f000 f88c 	bl	8005844 <_sbrk_r>
 800572c:	6030      	str	r0, [r6, #0]
 800572e:	4621      	mov	r1, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 f887 	bl	8005844 <_sbrk_r>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d00a      	beq.n	8005750 <sbrk_aligned+0x34>
 800573a:	1cc4      	adds	r4, r0, #3
 800573c:	f024 0403 	bic.w	r4, r4, #3
 8005740:	42a0      	cmp	r0, r4
 8005742:	d007      	beq.n	8005754 <sbrk_aligned+0x38>
 8005744:	1a21      	subs	r1, r4, r0
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f87c 	bl	8005844 <_sbrk_r>
 800574c:	3001      	adds	r0, #1
 800574e:	d101      	bne.n	8005754 <sbrk_aligned+0x38>
 8005750:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005754:	4620      	mov	r0, r4
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	200002f0 	.word	0x200002f0

0800575c <_malloc_r>:
 800575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005760:	1ccd      	adds	r5, r1, #3
 8005762:	f025 0503 	bic.w	r5, r5, #3
 8005766:	3508      	adds	r5, #8
 8005768:	2d0c      	cmp	r5, #12
 800576a:	bf38      	it	cc
 800576c:	250c      	movcc	r5, #12
 800576e:	2d00      	cmp	r5, #0
 8005770:	4607      	mov	r7, r0
 8005772:	db01      	blt.n	8005778 <_malloc_r+0x1c>
 8005774:	42a9      	cmp	r1, r5
 8005776:	d905      	bls.n	8005784 <_malloc_r+0x28>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	2600      	movs	r6, #0
 800577e:	4630      	mov	r0, r6
 8005780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005784:	4e2e      	ldr	r6, [pc, #184]	; (8005840 <_malloc_r+0xe4>)
 8005786:	f000 f915 	bl	80059b4 <__malloc_lock>
 800578a:	6833      	ldr	r3, [r6, #0]
 800578c:	461c      	mov	r4, r3
 800578e:	bb34      	cbnz	r4, 80057de <_malloc_r+0x82>
 8005790:	4629      	mov	r1, r5
 8005792:	4638      	mov	r0, r7
 8005794:	f7ff ffc2 	bl	800571c <sbrk_aligned>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	4604      	mov	r4, r0
 800579c:	d14d      	bne.n	800583a <_malloc_r+0xde>
 800579e:	6834      	ldr	r4, [r6, #0]
 80057a0:	4626      	mov	r6, r4
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	d140      	bne.n	8005828 <_malloc_r+0xcc>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	4631      	mov	r1, r6
 80057aa:	4638      	mov	r0, r7
 80057ac:	eb04 0803 	add.w	r8, r4, r3
 80057b0:	f000 f848 	bl	8005844 <_sbrk_r>
 80057b4:	4580      	cmp	r8, r0
 80057b6:	d13a      	bne.n	800582e <_malloc_r+0xd2>
 80057b8:	6821      	ldr	r1, [r4, #0]
 80057ba:	3503      	adds	r5, #3
 80057bc:	1a6d      	subs	r5, r5, r1
 80057be:	f025 0503 	bic.w	r5, r5, #3
 80057c2:	3508      	adds	r5, #8
 80057c4:	2d0c      	cmp	r5, #12
 80057c6:	bf38      	it	cc
 80057c8:	250c      	movcc	r5, #12
 80057ca:	4629      	mov	r1, r5
 80057cc:	4638      	mov	r0, r7
 80057ce:	f7ff ffa5 	bl	800571c <sbrk_aligned>
 80057d2:	3001      	adds	r0, #1
 80057d4:	d02b      	beq.n	800582e <_malloc_r+0xd2>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	442b      	add	r3, r5
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	e00e      	b.n	80057fc <_malloc_r+0xa0>
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	1b52      	subs	r2, r2, r5
 80057e2:	d41e      	bmi.n	8005822 <_malloc_r+0xc6>
 80057e4:	2a0b      	cmp	r2, #11
 80057e6:	d916      	bls.n	8005816 <_malloc_r+0xba>
 80057e8:	1961      	adds	r1, r4, r5
 80057ea:	42a3      	cmp	r3, r4
 80057ec:	6025      	str	r5, [r4, #0]
 80057ee:	bf18      	it	ne
 80057f0:	6059      	strne	r1, [r3, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	bf08      	it	eq
 80057f6:	6031      	streq	r1, [r6, #0]
 80057f8:	5162      	str	r2, [r4, r5]
 80057fa:	604b      	str	r3, [r1, #4]
 80057fc:	4638      	mov	r0, r7
 80057fe:	f104 060b 	add.w	r6, r4, #11
 8005802:	f000 f8dd 	bl	80059c0 <__malloc_unlock>
 8005806:	f026 0607 	bic.w	r6, r6, #7
 800580a:	1d23      	adds	r3, r4, #4
 800580c:	1af2      	subs	r2, r6, r3
 800580e:	d0b6      	beq.n	800577e <_malloc_r+0x22>
 8005810:	1b9b      	subs	r3, r3, r6
 8005812:	50a3      	str	r3, [r4, r2]
 8005814:	e7b3      	b.n	800577e <_malloc_r+0x22>
 8005816:	6862      	ldr	r2, [r4, #4]
 8005818:	42a3      	cmp	r3, r4
 800581a:	bf0c      	ite	eq
 800581c:	6032      	streq	r2, [r6, #0]
 800581e:	605a      	strne	r2, [r3, #4]
 8005820:	e7ec      	b.n	80057fc <_malloc_r+0xa0>
 8005822:	4623      	mov	r3, r4
 8005824:	6864      	ldr	r4, [r4, #4]
 8005826:	e7b2      	b.n	800578e <_malloc_r+0x32>
 8005828:	4634      	mov	r4, r6
 800582a:	6876      	ldr	r6, [r6, #4]
 800582c:	e7b9      	b.n	80057a2 <_malloc_r+0x46>
 800582e:	230c      	movs	r3, #12
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	4638      	mov	r0, r7
 8005834:	f000 f8c4 	bl	80059c0 <__malloc_unlock>
 8005838:	e7a1      	b.n	800577e <_malloc_r+0x22>
 800583a:	6025      	str	r5, [r4, #0]
 800583c:	e7de      	b.n	80057fc <_malloc_r+0xa0>
 800583e:	bf00      	nop
 8005840:	200002ec 	.word	0x200002ec

08005844 <_sbrk_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d06      	ldr	r5, [pc, #24]	; (8005860 <_sbrk_r+0x1c>)
 8005848:	2300      	movs	r3, #0
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	602b      	str	r3, [r5, #0]
 8005850:	f7fb ff2e 	bl	80016b0 <_sbrk>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_sbrk_r+0x1a>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_sbrk_r+0x1a>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	200002f4 	.word	0x200002f4

08005864 <strcpy>:
 8005864:	4603      	mov	r3, r0
 8005866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800586a:	f803 2b01 	strb.w	r2, [r3], #1
 800586e:	2a00      	cmp	r2, #0
 8005870:	d1f9      	bne.n	8005866 <strcpy+0x2>
 8005872:	4770      	bx	lr

08005874 <strncpy>:
 8005874:	b510      	push	{r4, lr}
 8005876:	3901      	subs	r1, #1
 8005878:	4603      	mov	r3, r0
 800587a:	b132      	cbz	r2, 800588a <strncpy+0x16>
 800587c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005880:	f803 4b01 	strb.w	r4, [r3], #1
 8005884:	3a01      	subs	r2, #1
 8005886:	2c00      	cmp	r4, #0
 8005888:	d1f7      	bne.n	800587a <strncpy+0x6>
 800588a:	441a      	add	r2, r3
 800588c:	2100      	movs	r1, #0
 800588e:	4293      	cmp	r3, r2
 8005890:	d100      	bne.n	8005894 <strncpy+0x20>
 8005892:	bd10      	pop	{r4, pc}
 8005894:	f803 1b01 	strb.w	r1, [r3], #1
 8005898:	e7f9      	b.n	800588e <strncpy+0x1a>
	...

0800589c <_strtol_l.constprop.0>:
 800589c:	2b01      	cmp	r3, #1
 800589e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a2:	d001      	beq.n	80058a8 <_strtol_l.constprop.0+0xc>
 80058a4:	2b24      	cmp	r3, #36	; 0x24
 80058a6:	d906      	bls.n	80058b6 <_strtol_l.constprop.0+0x1a>
 80058a8:	f7ff feaa 	bl	8005600 <__errno>
 80058ac:	2316      	movs	r3, #22
 80058ae:	6003      	str	r3, [r0, #0]
 80058b0:	2000      	movs	r0, #0
 80058b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800599c <_strtol_l.constprop.0+0x100>
 80058ba:	460d      	mov	r5, r1
 80058bc:	462e      	mov	r6, r5
 80058be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80058c6:	f017 0708 	ands.w	r7, r7, #8
 80058ca:	d1f7      	bne.n	80058bc <_strtol_l.constprop.0+0x20>
 80058cc:	2c2d      	cmp	r4, #45	; 0x2d
 80058ce:	d132      	bne.n	8005936 <_strtol_l.constprop.0+0x9a>
 80058d0:	782c      	ldrb	r4, [r5, #0]
 80058d2:	2701      	movs	r7, #1
 80058d4:	1cb5      	adds	r5, r6, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d05b      	beq.n	8005992 <_strtol_l.constprop.0+0xf6>
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d109      	bne.n	80058f2 <_strtol_l.constprop.0+0x56>
 80058de:	2c30      	cmp	r4, #48	; 0x30
 80058e0:	d107      	bne.n	80058f2 <_strtol_l.constprop.0+0x56>
 80058e2:	782c      	ldrb	r4, [r5, #0]
 80058e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80058e8:	2c58      	cmp	r4, #88	; 0x58
 80058ea:	d14d      	bne.n	8005988 <_strtol_l.constprop.0+0xec>
 80058ec:	786c      	ldrb	r4, [r5, #1]
 80058ee:	2310      	movs	r3, #16
 80058f0:	3502      	adds	r5, #2
 80058f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80058f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80058fa:	f04f 0c00 	mov.w	ip, #0
 80058fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8005902:	4666      	mov	r6, ip
 8005904:	fb03 8a19 	mls	sl, r3, r9, r8
 8005908:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800590c:	f1be 0f09 	cmp.w	lr, #9
 8005910:	d816      	bhi.n	8005940 <_strtol_l.constprop.0+0xa4>
 8005912:	4674      	mov	r4, lr
 8005914:	42a3      	cmp	r3, r4
 8005916:	dd24      	ble.n	8005962 <_strtol_l.constprop.0+0xc6>
 8005918:	f1bc 0f00 	cmp.w	ip, #0
 800591c:	db1e      	blt.n	800595c <_strtol_l.constprop.0+0xc0>
 800591e:	45b1      	cmp	r9, r6
 8005920:	d31c      	bcc.n	800595c <_strtol_l.constprop.0+0xc0>
 8005922:	d101      	bne.n	8005928 <_strtol_l.constprop.0+0x8c>
 8005924:	45a2      	cmp	sl, r4
 8005926:	db19      	blt.n	800595c <_strtol_l.constprop.0+0xc0>
 8005928:	fb06 4603 	mla	r6, r6, r3, r4
 800592c:	f04f 0c01 	mov.w	ip, #1
 8005930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005934:	e7e8      	b.n	8005908 <_strtol_l.constprop.0+0x6c>
 8005936:	2c2b      	cmp	r4, #43	; 0x2b
 8005938:	bf04      	itt	eq
 800593a:	782c      	ldrbeq	r4, [r5, #0]
 800593c:	1cb5      	addeq	r5, r6, #2
 800593e:	e7ca      	b.n	80058d6 <_strtol_l.constprop.0+0x3a>
 8005940:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005944:	f1be 0f19 	cmp.w	lr, #25
 8005948:	d801      	bhi.n	800594e <_strtol_l.constprop.0+0xb2>
 800594a:	3c37      	subs	r4, #55	; 0x37
 800594c:	e7e2      	b.n	8005914 <_strtol_l.constprop.0+0x78>
 800594e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005952:	f1be 0f19 	cmp.w	lr, #25
 8005956:	d804      	bhi.n	8005962 <_strtol_l.constprop.0+0xc6>
 8005958:	3c57      	subs	r4, #87	; 0x57
 800595a:	e7db      	b.n	8005914 <_strtol_l.constprop.0+0x78>
 800595c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005960:	e7e6      	b.n	8005930 <_strtol_l.constprop.0+0x94>
 8005962:	f1bc 0f00 	cmp.w	ip, #0
 8005966:	da05      	bge.n	8005974 <_strtol_l.constprop.0+0xd8>
 8005968:	2322      	movs	r3, #34	; 0x22
 800596a:	6003      	str	r3, [r0, #0]
 800596c:	4646      	mov	r6, r8
 800596e:	b942      	cbnz	r2, 8005982 <_strtol_l.constprop.0+0xe6>
 8005970:	4630      	mov	r0, r6
 8005972:	e79e      	b.n	80058b2 <_strtol_l.constprop.0+0x16>
 8005974:	b107      	cbz	r7, 8005978 <_strtol_l.constprop.0+0xdc>
 8005976:	4276      	negs	r6, r6
 8005978:	2a00      	cmp	r2, #0
 800597a:	d0f9      	beq.n	8005970 <_strtol_l.constprop.0+0xd4>
 800597c:	f1bc 0f00 	cmp.w	ip, #0
 8005980:	d000      	beq.n	8005984 <_strtol_l.constprop.0+0xe8>
 8005982:	1e69      	subs	r1, r5, #1
 8005984:	6011      	str	r1, [r2, #0]
 8005986:	e7f3      	b.n	8005970 <_strtol_l.constprop.0+0xd4>
 8005988:	2430      	movs	r4, #48	; 0x30
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1b1      	bne.n	80058f2 <_strtol_l.constprop.0+0x56>
 800598e:	2308      	movs	r3, #8
 8005990:	e7af      	b.n	80058f2 <_strtol_l.constprop.0+0x56>
 8005992:	2c30      	cmp	r4, #48	; 0x30
 8005994:	d0a5      	beq.n	80058e2 <_strtol_l.constprop.0+0x46>
 8005996:	230a      	movs	r3, #10
 8005998:	e7ab      	b.n	80058f2 <_strtol_l.constprop.0+0x56>
 800599a:	bf00      	nop
 800599c:	08005a15 	.word	0x08005a15

080059a0 <strtol>:
 80059a0:	4613      	mov	r3, r2
 80059a2:	460a      	mov	r2, r1
 80059a4:	4601      	mov	r1, r0
 80059a6:	4802      	ldr	r0, [pc, #8]	; (80059b0 <strtol+0x10>)
 80059a8:	6800      	ldr	r0, [r0, #0]
 80059aa:	f7ff bf77 	b.w	800589c <_strtol_l.constprop.0>
 80059ae:	bf00      	nop
 80059b0:	20000014 	.word	0x20000014

080059b4 <__malloc_lock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__malloc_lock+0x8>)
 80059b6:	f000 b809 	b.w	80059cc <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	200002f8 	.word	0x200002f8

080059c0 <__malloc_unlock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__malloc_unlock+0x8>)
 80059c2:	f000 b804 	b.w	80059ce <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	200002f8 	.word	0x200002f8

080059cc <__retarget_lock_acquire_recursive>:
 80059cc:	4770      	bx	lr

080059ce <__retarget_lock_release_recursive>:
 80059ce:	4770      	bx	lr

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
